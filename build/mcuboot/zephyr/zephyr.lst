
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return pm_state;
}


enum power_states pm_system_suspend(int32_t ticks)
{
   0:	200056b0 	.word	0x200056b0
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
   4:	00002415 	.word	0x00002415
		   pm_policy_next_state(ticks) : forced_pm_state;
   8:	00006037 	.word	0x00006037
   c:	00002445 	.word	0x00002445
  10:	00002445 	.word	0x00002445
	if (pm_state == POWER_STATE_ACTIVE) {
  14:	00002445 	.word	0x00002445
  18:	00002445 	.word	0x00002445
	post_ops_done = 0;
  1c:	00002445 	.word	0x00002445
	...
	pm_power_state_set(pm_state);
  2c:	00002221 	.word	0x00002221
	if (!post_ops_done) {
  30:	00002445 	.word	0x00002445
		post_ops_done = 1;
  34:	00000000 	.word	0x00000000
		forced_pm_state = POWER_STATE_AUTO;
  38:	000021c9 	.word	0x000021c9
		pm_state_notify(false);
  3c:	00006013 	.word	0x00006013

00000040 <_irq_vector_table>:
		pm_power_state_exit_post_ops(pm_state);
  40:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
	return pm_policy_mgr(ticks);
}
  50:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  60:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  70:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  80:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  90:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  a0:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  b0:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  c0:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  d0:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  e0:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
  f0:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
 100:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
 110:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
 120:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
 130:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
 140:	000023d5 000023d5 000023d5 000023d5     .#...#...#...#..
 150:	000023d5                                .#..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b970 	b.w	44c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     188:	9e08      	ldr	r6, [sp, #32]
     18a:	460d      	mov	r5, r1
     18c:	4604      	mov	r4, r0
     18e:	468a      	mov	sl, r1
     190:	2b00      	cmp	r3, #0
     192:	d17f      	bne.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     194:	428a      	cmp	r2, r1
     196:	4617      	mov	r7, r2
     198:	d941      	bls.n	21e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1e>
     19a:	fab2 f282 	clz	r2, r2
     19e:	b14a      	cbz	r2, 1b4 <__udivmoddi4+0x30>
     1a0:	f1c2 0120 	rsb	r1, r2, #32
     1a4:	fa05 f302 	lsl.w	r3, r5, r2
     1a8:	4097      	lsls	r7, r2
     1aa:	4094      	lsls	r4, r2
     1ac:	fa20 f101 	lsr.w	r1, r0, r1
     1b0:	ea41 0a03 	orr.w	sl, r1, r3
     1b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1bc:	fa1f f987 	uxth.w	r9, r7
     1c0:	fbba fef8 	udiv	lr, sl, r8
     1c4:	fb08 a31e 	mls	r3, r8, lr, sl
     1c8:	fb0e f109 	mul.w	r1, lr, r9
     1cc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d0:	4299      	cmp	r1, r3
     1d2:	d906      	bls.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	d202      	bcs.n	1de <CONFIG_SRAM_SIZE+0x1e>
     1d8:	4299      	cmp	r1, r3
     1da:	f200 8124 	bhi.w	426 <CONFIG_FLASH_SIZE+0x26>
     1de:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e2:	1a59      	subs	r1, r3, r1
     1e4:	b2a3      	uxth	r3, r4
     1e6:	fbb1 f0f8 	udiv	r0, r1, r8
     1ea:	fb08 1110 	mls	r1, r8, r0, r1
     1ee:	fb00 f909 	mul.w	r9, r0, r9
     1f2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1f6:	45a1      	cmp	r9, r4
     1f8:	d905      	bls.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     1fa:	193c      	adds	r4, r7, r4
     1fc:	d202      	bcs.n	204 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x4>
     1fe:	45a1      	cmp	r9, r4
     200:	f200 810e 	bhi.w	420 <CONFIG_FLASH_SIZE+0x20>
     204:	3801      	subs	r0, #1
     206:	eba4 0409 	sub.w	r4, r4, r9
     20a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     20e:	2100      	movs	r1, #0
     210:	b11e      	cbz	r6, 21a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1a>
     212:	40d4      	lsrs	r4, r2
     214:	2300      	movs	r3, #0
     216:	e9c6 4300 	strd	r4, r3, [r6]
     21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21e:	b902      	cbnz	r2, 222 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x22>
     220:	deff      	udf	#255	; 0xff
     222:	fab2 f282 	clz	r2, r2
     226:	2a00      	cmp	r2, #0
     228:	d14f      	bne.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     22a:	1bcb      	subs	r3, r1, r7
     22c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     230:	fa1f f887 	uxth.w	r8, r7
     234:	2101      	movs	r1, #1
     236:	0c25      	lsrs	r5, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 301c 	mls	r0, lr, ip, r3
     240:	462b      	mov	r3, r5
     242:	fb08 f90c 	mul.w	r9, r8, ip
     246:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24a:	45a9      	cmp	r9, r5
     24c:	d90a      	bls.n	264 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x64>
     24e:	197d      	adds	r5, r7, r5
     250:	bf2c      	ite	cs
     252:	2301      	movcs	r3, #1
     254:	2300      	movcc	r3, #0
     256:	45a9      	cmp	r9, r5
     258:	d902      	bls.n	260 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x60>
     25a:	2b00      	cmp	r3, #0
     25c:	f000 80d9 	beq.w	412 <CONFIG_FLASH_SIZE+0x12>
     260:	f10c 3cff 	add.w	ip, ip, #4294967295
     264:	eba5 0509 	sub.w	r5, r5, r9
     268:	b2a3      	uxth	r3, r4
     26a:	fbb5 f0fe 	udiv	r0, r5, lr
     26e:	fb0e 5510 	mls	r5, lr, r0, r5
     272:	fb08 f800 	mul.w	r8, r8, r0
     276:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27a:	45a0      	cmp	r8, r4
     27c:	d905      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     27e:	193c      	adds	r4, r7, r4
     280:	d202      	bcs.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     282:	45a0      	cmp	r8, r4
     284:	f200 80c9 	bhi.w	41a <CONFIG_FLASH_SIZE+0x1a>
     288:	3801      	subs	r0, #1
     28a:	eba4 0408 	sub.w	r4, r4, r8
     28e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     292:	e7bd      	b.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     294:	428b      	cmp	r3, r1
     296:	d908      	bls.n	2aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2a>
     298:	2e00      	cmp	r6, #0
     29a:	f000 80b1 	beq.w	400 <CONFIG_FLASH_SIZE>
     29e:	2100      	movs	r1, #0
     2a0:	e9c6 0500 	strd	r0, r5, [r6]
     2a4:	4608      	mov	r0, r1
     2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2aa:	fab3 f183 	clz	r1, r3
     2ae:	2900      	cmp	r1, #0
     2b0:	d146      	bne.n	340 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc0>
     2b2:	42ab      	cmp	r3, r5
     2b4:	f0c0 80a7 	bcc.w	406 <CONFIG_FLASH_SIZE+0x6>
     2b8:	4282      	cmp	r2, r0
     2ba:	f240 80a4 	bls.w	406 <CONFIG_FLASH_SIZE+0x6>
     2be:	4608      	mov	r0, r1
     2c0:	2e00      	cmp	r6, #0
     2c2:	d0aa      	beq.n	21a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1a>
     2c4:	e9c6 4a00 	strd	r4, sl, [r6]
     2c8:	e7a7      	b.n	21a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1a>
     2ca:	f1c2 0020 	rsb	r0, r2, #32
     2ce:	4097      	lsls	r7, r2
     2d0:	fa01 f302 	lsl.w	r3, r1, r2
     2d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2d8:	40c1      	lsrs	r1, r0
     2da:	fa24 f500 	lsr.w	r5, r4, r0
     2de:	fa1f f887 	uxth.w	r8, r7
     2e2:	4094      	lsls	r4, r2
     2e4:	431d      	orrs	r5, r3
     2e6:	fbb1 f0fe 	udiv	r0, r1, lr
     2ea:	0c2b      	lsrs	r3, r5, #16
     2ec:	fb0e 1110 	mls	r1, lr, r0, r1
     2f0:	fb00 fc08 	mul.w	ip, r0, r8
     2f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f8:	459c      	cmp	ip, r3
     2fa:	d909      	bls.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	bf2c      	ite	cs
     300:	2101      	movcs	r1, #1
     302:	2100      	movcc	r1, #0
     304:	459c      	cmp	ip, r3
     306:	d902      	bls.n	30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     308:	2900      	cmp	r1, #0
     30a:	f000 8095 	beq.w	438 <CONFIG_FLASH_SIZE+0x38>
     30e:	3801      	subs	r0, #1
     310:	eba3 030c 	sub.w	r3, r3, ip
     314:	b2ad      	uxth	r5, r5
     316:	fbb3 f1fe 	udiv	r1, r3, lr
     31a:	fb0e 3311 	mls	r3, lr, r1, r3
     31e:	fb01 fc08 	mul.w	ip, r1, r8
     322:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     326:	45ac      	cmp	ip, r5
     328:	d905      	bls.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>
     32a:	197d      	adds	r5, r7, r5
     32c:	d202      	bcs.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     32e:	45ac      	cmp	ip, r5
     330:	f200 8089 	bhi.w	446 <CONFIG_FLASH_SIZE+0x46>
     334:	3901      	subs	r1, #1
     336:	eba5 030c 	sub.w	r3, r5, ip
     33a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     33e:	e77a      	b.n	236 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x36>
     340:	f1c1 0420 	rsb	r4, r1, #32
     344:	408b      	lsls	r3, r1
     346:	fa02 f701 	lsl.w	r7, r2, r1
     34a:	fa05 fc01 	lsl.w	ip, r5, r1
     34e:	40e2      	lsrs	r2, r4
     350:	fa20 f804 	lsr.w	r8, r0, r4
     354:	40e5      	lsrs	r5, r4
     356:	fa00 fe01 	lsl.w	lr, r0, r1
     35a:	4313      	orrs	r3, r2
     35c:	ea48 020c 	orr.w	r2, r8, ip
     360:	ea4f 4813 	mov.w	r8, r3, lsr #16
     364:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     368:	fa1f f983 	uxth.w	r9, r3
     36c:	fbb5 faf8 	udiv	sl, r5, r8
     370:	fb08 551a 	mls	r5, r8, sl, r5
     374:	fb0a f009 	mul.w	r0, sl, r9
     378:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     37c:	4560      	cmp	r0, ip
     37e:	d90a      	bls.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     380:	eb13 0c0c 	adds.w	ip, r3, ip
     384:	bf2c      	ite	cs
     386:	2501      	movcs	r5, #1
     388:	2500      	movcc	r5, #0
     38a:	4560      	cmp	r0, ip
     38c:	d901      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     38e:	2d00      	cmp	r5, #0
     390:	d055      	beq.n	43e <CONFIG_FLASH_SIZE+0x3e>
     392:	f10a 3aff 	add.w	sl, sl, #4294967295
     396:	ebac 0c00 	sub.w	ip, ip, r0
     39a:	b292      	uxth	r2, r2
     39c:	fbbc f0f8 	udiv	r0, ip, r8
     3a0:	fb08 cc10 	mls	ip, r8, r0, ip
     3a4:	fb00 f909 	mul.w	r9, r0, r9
     3a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ac:	45e1      	cmp	r9, ip
     3ae:	d905      	bls.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     3b0:	eb13 0c0c 	adds.w	ip, r3, ip
     3b4:	d201      	bcs.n	3ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13a>
     3b6:	45e1      	cmp	r9, ip
     3b8:	d83b      	bhi.n	432 <CONFIG_FLASH_SIZE+0x32>
     3ba:	3801      	subs	r0, #1
     3bc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c0:	ebac 0c09 	sub.w	ip, ip, r9
     3c4:	fba0 8907 	umull	r8, r9, r0, r7
     3c8:	45cc      	cmp	ip, r9
     3ca:	4645      	mov	r5, r8
     3cc:	464a      	mov	r2, r9
     3ce:	d302      	bcc.n	3d6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x156>
     3d0:	d106      	bne.n	3e0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x160>
     3d2:	45c6      	cmp	lr, r8
     3d4:	d204      	bcs.n	3e0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x160>
     3d6:	3801      	subs	r0, #1
     3d8:	ebb8 0507 	subs.w	r5, r8, r7
     3dc:	eb69 0203 	sbc.w	r2, r9, r3
     3e0:	b32e      	cbz	r6, 42e <CONFIG_FLASH_SIZE+0x2e>
     3e2:	ebbe 0305 	subs.w	r3, lr, r5
     3e6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ea:	fa23 f201 	lsr.w	r2, r3, r1
     3ee:	fa0c f404 	lsl.w	r4, ip, r4
     3f2:	fa2c f301 	lsr.w	r3, ip, r1
     3f6:	2100      	movs	r1, #0
     3f8:	4314      	orrs	r4, r2
     3fa:	e9c6 4300 	strd	r4, r3, [r6]
     3fe:	e70c      	b.n	21a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1a>
     400:	4631      	mov	r1, r6
     402:	4630      	mov	r0, r6
     404:	e709      	b.n	21a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1a>
     406:	1a84      	subs	r4, r0, r2
     408:	eb65 0303 	sbc.w	r3, r5, r3
     40c:	2001      	movs	r0, #1
     40e:	469a      	mov	sl, r3
     410:	e756      	b.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     412:	f1ac 0c02 	sub.w	ip, ip, #2
     416:	443d      	add	r5, r7
     418:	e724      	b.n	264 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x64>
     41a:	3802      	subs	r0, #2
     41c:	443c      	add	r4, r7
     41e:	e734      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     420:	3802      	subs	r0, #2
     422:	443c      	add	r4, r7
     424:	e6ef      	b.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     426:	f1ae 0e02 	sub.w	lr, lr, #2
     42a:	443b      	add	r3, r7
     42c:	e6d9      	b.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     42e:	4631      	mov	r1, r6
     430:	e6f3      	b.n	21a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1a>
     432:	3802      	subs	r0, #2
     434:	449c      	add	ip, r3
     436:	e7c1      	b.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     438:	3802      	subs	r0, #2
     43a:	443b      	add	r3, r7
     43c:	e768      	b.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     43e:	f1aa 0a02 	sub.w	sl, sl, #2
     442:	449c      	add	ip, r3
     444:	e7a7      	b.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     446:	3902      	subs	r1, #2
     448:	443d      	add	r5, r7
     44a:	e774      	b.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>

0000044c <__aeabi_idiv0>:
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <main>:
}
#endif/* defined(CONFIG_LOG) && !defined(CONFIG_LOG_IMMEDIATE) &&\
        !defined(CONFIG_LOG_PROCESS_THREAD) */

void main(void)
{
     450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     452:	4b3a      	ldr	r3, [pc, #232]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     454:	4a3a      	ldr	r2, [pc, #232]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

    BOOT_LOG_INF("Starting bootloader");
     456:	483b      	ldr	r0, [pc, #236]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
     458:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     45c:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     460:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     464:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     468:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     46c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     470:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     474:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
     478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
     47c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     480:	2149      	movs	r1, #73	; 0x49
     482:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     486:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     48a:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     48e:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     492:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     496:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     49a:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
     49e:	f005 fa7e 	bl	599e <printk>

    os_heap_init();
     4a2:	f000 f87d 	bl	5a0 <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     4a6:	4828      	ldr	r0, [pc, #160]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4a8:	f000 f85e 	bl	568 <flash_device_get_binding>
     4ac:	b928      	cbnz	r0, 4ba <FIH_LABEL_FIH_CALL_START_395>
        BOOT_LOG_ERR("Flash device %s not found",
     4ae:	2145      	movs	r1, #69	; 0x45
     4b0:	4a25      	ldr	r2, [pc, #148]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4b2:	4826      	ldr	r0, [pc, #152]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     4b4:	f005 fa73 	bl	599e <printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     4b8:	e7fe      	b.n	4b8 <main+0x68>

000004ba <FIH_LABEL_FIH_CALL_START_395>:
        wait_for_usb_dfu();
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     4ba:	a801      	add	r0, sp, #4
     4bc:	f000 fcda 	bl	e74 <boot_go>

000004c0 <FIH_LABEL_FIH_CALL_END_408>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     4c0:	4b23      	ldr	r3, [pc, #140]	; (550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	4283      	cmp	r3, r0
     4c6:	d004      	beq.n	4d2 <FIH_LABEL_FIH_CALL_END_408+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     4c8:	2145      	movs	r1, #69	; 0x45
     4ca:	4822      	ldr	r0, [pc, #136]	; (554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>)
     4cc:	f005 fa67 	bl	599e <printk>
        FIH_PANIC;
     4d0:	e7fe      	b.n	4d0 <FIH_LABEL_FIH_CALL_END_408+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4d2:	2149      	movs	r1, #73	; 0x49
     4d4:	9a03      	ldr	r2, [sp, #12]
     4d6:	4820      	ldr	r0, [pc, #128]	; (558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>)
     4d8:	f005 fa61 	bl	599e <printk>
                 rsp.br_image_off);

    BOOT_LOG_INF("Jumping to the first image slot");
     4dc:	2149      	movs	r1, #73	; 0x49
     4de:	481f      	ldr	r0, [pc, #124]	; (55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>)
     4e0:	f005 fa5d 	bl	599e <printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4e4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     4e8:	2000      	movs	r0, #0
     4ea:	f002 ff27 	bl	333c <fprotect_area>

    if (rc != 0) {
     4ee:	b120      	cbz	r0, 4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     4f0:	2145      	movs	r1, #69	; 0x45
     4f2:	481b      	ldr	r0, [pc, #108]	; (560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>)
     4f4:	f005 fa53 	bl	599e <printk>
        while (1)
     4f8:	e7fe      	b.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4fa:	4669      	mov	r1, sp
     4fc:	f89d 0008 	ldrb.w	r0, [sp, #8]
     500:	f000 f83e 	bl	580 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     504:	9b00      	ldr	r3, [sp, #0]
     506:	9c03      	ldr	r4, [sp, #12]
     508:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     50a:	9b01      	ldr	r3, [sp, #4]
     50c:	891d      	ldrh	r5, [r3, #8]
                                     rsp->br_image_off +
     50e:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     510:	f04f 0220 	mov.w	r2, #32
     514:	f3ef 8311 	mrs	r3, BASEPRI
     518:	f382 8811 	msr	BASEPRI, r2
     51c:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
     520:	f005 fd79 	bl	6016 <sys_clock_disable>
    nrf_cleanup_peripheral();
     524:	f000 ff44 	bl	13b0 <nrf_cleanup_peripheral>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     528:	5963      	ldr	r3, [r4, r5]
     52a:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     52e:	6873      	ldr	r3, [r6, #4]
     530:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     532:	2145      	movs	r1, #69	; 0x45
     534:	480b      	ldr	r0, [pc, #44]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     536:	f005 fa32 	bl	599e <printk>
    while (1)
     53a:	e7fe      	b.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
     53c:	6e524635 	.word	0x6e524635
     540:	50018000 	.word	0x50018000
     544:	00008874 	.word	0x00008874
     548:	0000888d 	.word	0x0000888d
     54c:	000088a0 	.word	0x000088a0
     550:	2000022c 	.word	0x2000022c
     554:	000088bf 	.word	0x000088bf
     558:	000088e2 	.word	0x000088e2
     55c:	00008911 	.word	0x00008911
     560:	00008936 	.word	0x00008936
     564:	00008969 	.word	0x00008969

00000568 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     568:	b510      	push	{r4, lr}
    if (!flash_dev) {
     56a:	4c04      	ldr	r4, [pc, #16]	; (57c <flash_device_get_binding+0x14>)
     56c:	6823      	ldr	r3, [r4, #0]
     56e:	b913      	cbnz	r3, 576 <flash_device_get_binding+0xe>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     570:	f004 f8a4 	bl	46bc <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     574:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     576:	6820      	ldr	r0, [r4, #0]
     578:	bd10      	pop	{r4, pc}
     57a:	bf00      	nop
     57c:	20000228 	.word	0x20000228

00000580 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     580:	4602      	mov	r2, r0
{
     582:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     584:	b138      	cbz	r0, 596 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     586:	4805      	ldr	r0, [pc, #20]	; (59c <flash_device_base+0x1c>)
     588:	2300      	movs	r3, #0
     58a:	2145      	movs	r1, #69	; 0x45
     58c:	f005 fa07 	bl	599e <printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     590:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     594:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     596:	6008      	str	r0, [r1, #0]
    return 0;
     598:	e7fc      	b.n	594 <flash_device_base+0x14>
     59a:	bf00      	nop
     59c:	0000898c 	.word	0x0000898c

000005a0 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     5a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     5a4:	4801      	ldr	r0, [pc, #4]	; (5ac <os_heap_init+0xc>)
     5a6:	f003 bb89 	b.w	3cbc <mbedtls_memory_buffer_alloc_init>
     5aa:	bf00      	nop
     5ac:	20001188 	.word	0x20001188

000005b0 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     5b4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 7b0 <FIH_LABEL_FIH_CALL_END_644+0x34>
{
     5b8:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     5ba:	a838      	add	r0, sp, #224	; 0xe0
     5bc:	4617      	mov	r7, r2
     5be:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
     5c2:	461d      	mov	r5, r3
     5c4:	f8dd b208 	ldr.w	fp, [sp, #520]	; 0x208
    fih_int valid_signature = FIH_FAILURE;
     5c8:	f8d9 6000 	ldr.w	r6, [r9]
     5cc:	f007 fc45 	bl	7e5a <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     5d0:	2100      	movs	r1, #0
     5d2:	a838      	add	r0, sp, #224	; 0xe0
     5d4:	f003 fc82 	bl	3edc <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
     5d8:	f8cd 900c 	str.w	r9, [sp, #12]
     5dc:	b13c      	cbz	r4, 5ee <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x12>
     5de:	f1b8 0f00 	cmp.w	r8, #0
     5e2:	dd04      	ble.n	5ee <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x12>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     5e4:	4642      	mov	r2, r8
     5e6:	4621      	mov	r1, r4
     5e8:	a838      	add	r0, sp, #224	; 0xe0
     5ea:	f007 fc3a 	bl	7e62 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
     5ee:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     5f2:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     5f4:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     5f8:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     5fa:	68fb      	ldr	r3, [r7, #12]
     5fc:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     5fe:	45c8      	cmp	r8, r9
     600:	d84b      	bhi.n	69a <FIH_LABEL_FIH_CALL_END_310+0x10>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     602:	a90d      	add	r1, sp, #52	; 0x34
     604:	a838      	add	r0, sp, #224	; 0xe0
     606:	f007 fc69 	bl	7edc <mbedtls_sha256_finish_ret>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     60a:	9b86      	ldr	r3, [sp, #536]	; 0x218
     60c:	b123      	cbz	r3, 618 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3c>
        memcpy(out_hash, hash, 32);
     60e:	2220      	movs	r2, #32
     610:	4618      	mov	r0, r3
     612:	a90d      	add	r1, sp, #52	; 0x34
     614:	f005 fd3b 	bl	608e <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     618:	2300      	movs	r3, #0
     61a:	462a      	mov	r2, r5
     61c:	9300      	str	r3, [sp, #0]
     61e:	4639      	mov	r1, r7
     620:	f64f 73ff 	movw	r3, #65535	; 0xffff
     624:	a807      	add	r0, sp, #28
     626:	f004 fefe 	bl	5426 <bootutil_tlv_iter_begin>
    if (rc) {
     62a:	4604      	mov	r4, r0
     62c:	2800      	cmp	r0, #0
     62e:	f040 80b5 	bne.w	79c <FIH_LABEL_FIH_CALL_END_644+0x20>
    int sha256_valid = 0;
     632:	4680      	mov	r8, r0
    int key_id = -1;
     634:	f04f 37ff 	mov.w	r7, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     638:	f8df 9178 	ldr.w	r9, [pc, #376]	; 7b4 <FIH_LABEL_FIH_CALL_END_644+0x38>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     63c:	f10d 0316 	add.w	r3, sp, #22
     640:	aa05      	add	r2, sp, #20
     642:	a906      	add	r1, sp, #24
     644:	a807      	add	r0, sp, #28
     646:	f004 ff3a 	bl	54be <bootutil_tlv_iter_next>
        if (rc < 0) {
     64a:	1e04      	subs	r4, r0, #0
     64c:	f2c0 80a6 	blt.w	79c <FIH_LABEL_FIH_CALL_END_644+0x20>
        } else if (rc > 0) {
     650:	f040 8097 	bne.w	782 <FIH_LABEL_FIH_CALL_END_644+0x6>
        if (type == IMAGE_TLV_SHA256) {
     654:	f8bd a016 	ldrh.w	sl, [sp, #22]
     658:	f1ba 0f10 	cmp.w	sl, #16
     65c:	d134      	bne.n	6c8 <FIH_LABEL_FIH_CALL_END_310+0x3e>
            if (len != sizeof(hash)) {
     65e:	f8bd 8014 	ldrh.w	r8, [sp, #20]
     662:	f1b8 0f20 	cmp.w	r8, #32
     666:	f040 8097 	bne.w	798 <FIH_LABEL_FIH_CALL_END_644+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     66a:	4643      	mov	r3, r8
     66c:	4628      	mov	r0, r5
     66e:	9906      	ldr	r1, [sp, #24]
     670:	aa38      	add	r2, sp, #224	; 0xe0
     672:	f005 fbae 	bl	5dd2 <flash_area_read>
            if (rc) {
     676:	4604      	mov	r4, r0
     678:	2800      	cmp	r0, #0
     67a:	f040 808f 	bne.w	79c <FIH_LABEL_FIH_CALL_END_644+0x20>

0000067e <FIH_LABEL_FIH_CALL_START_291>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     67e:	4642      	mov	r2, r8
     680:	a938      	add	r1, sp, #224	; 0xe0
     682:	a80d      	add	r0, sp, #52	; 0x34
     684:	f004 ff93 	bl	55ae <boot_fih_memequal>
     688:	4604      	mov	r4, r0

0000068a <FIH_LABEL_FIH_CALL_END_310>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     68a:	4b47      	ldr	r3, [pc, #284]	; (7a8 <FIH_LABEL_FIH_CALL_END_644+0x2c>)
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	4283      	cmp	r3, r0
     690:	f040 8084 	bne.w	79c <FIH_LABEL_FIH_CALL_END_644+0x20>
            sha256_valid = 1;
     694:	f04f 0801 	mov.w	r8, #1
     698:	e7d0      	b.n	63c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x60>
        blk_sz = size - off;
     69a:	9a83      	ldr	r2, [sp, #524]	; 0x20c
     69c:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     6a0:	429a      	cmp	r2, r3
     6a2:	bf28      	it	cs
     6a4:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     6a6:	4649      	mov	r1, r9
     6a8:	4613      	mov	r3, r2
     6aa:	4692      	mov	sl, r2
     6ac:	4628      	mov	r0, r5
     6ae:	465a      	mov	r2, fp
     6b0:	f005 fb8f 	bl	5dd2 <flash_area_read>
        if (rc) {
     6b4:	4604      	mov	r4, r0
     6b6:	2800      	cmp	r0, #0
     6b8:	d170      	bne.n	79c <FIH_LABEL_FIH_CALL_END_644+0x20>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     6ba:	4652      	mov	r2, sl
     6bc:	4659      	mov	r1, fp
     6be:	a838      	add	r0, sp, #224	; 0xe0
     6c0:	f007 fbcf 	bl	7e62 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
     6c4:	44d1      	add	r9, sl
     6c6:	e79a      	b.n	5fe <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x22>
        } else if (type == IMAGE_TLV_KEYHASH) {
     6c8:	f1ba 0f01 	cmp.w	sl, #1
     6cc:	d136      	bne.n	73c <FIH_LABEL_FIH_CALL_END_310+0xb2>
            if (len > 32) {
     6ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6d2:	2b20      	cmp	r3, #32
     6d4:	d860      	bhi.n	798 <FIH_LABEL_FIH_CALL_END_644+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6d6:	4628      	mov	r0, r5
     6d8:	9906      	ldr	r1, [sp, #24]
     6da:	aa38      	add	r2, sp, #224	; 0xe0
     6dc:	f005 fb79 	bl	5dd2 <flash_area_read>
            if (rc) {
     6e0:	4604      	mov	r4, r0
     6e2:	2800      	cmp	r0, #0
     6e4:	d15a      	bne.n	79c <FIH_LABEL_FIH_CALL_END_644+0x20>
            key_id = bootutil_find_key(buf, len);
     6e6:	f89d a014 	ldrb.w	sl, [sp, #20]
    if (keyhash_len > 32) {
     6ea:	f1ba 0f20 	cmp.w	sl, #32
     6ee:	d903      	bls.n	6f8 <FIH_LABEL_FIH_CALL_END_310+0x6e>
        return -1;
     6f0:	f04f 34ff 	mov.w	r4, #4294967295
            key_id = bootutil_find_key(buf, len);
     6f4:	4627      	mov	r7, r4
     6f6:	e7a1      	b.n	63c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x60>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6f8:	f8d9 3000 	ldr.w	r3, [r9]
     6fc:	4f2b      	ldr	r7, [pc, #172]	; (7ac <FIH_LABEL_FIH_CALL_END_644+0x30>)
     6fe:	9302      	str	r3, [sp, #8]
     700:	9b02      	ldr	r3, [sp, #8]
     702:	429c      	cmp	r4, r3
     704:	daf4      	bge.n	6f0 <FIH_LABEL_FIH_CALL_END_310+0x66>
    mbedtls_sha256_init(ctx);
     706:	a81d      	add	r0, sp, #116	; 0x74
     708:	f007 fba7 	bl	7e5a <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     70c:	2100      	movs	r1, #0
     70e:	a81d      	add	r0, sp, #116	; 0x74
     710:	f003 fbe4 	bl	3edc <mbedtls_sha256_starts_ret>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     714:	687b      	ldr	r3, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     716:	a81d      	add	r0, sp, #116	; 0x74
     718:	681a      	ldr	r2, [r3, #0]
     71a:	f857 1b08 	ldr.w	r1, [r7], #8
     71e:	f007 fba0 	bl	7e62 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     722:	a915      	add	r1, sp, #84	; 0x54
     724:	a81d      	add	r0, sp, #116	; 0x74
     726:	f007 fbd9 	bl	7edc <mbedtls_sha256_finish_ret>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     72a:	4652      	mov	r2, sl
     72c:	a938      	add	r1, sp, #224	; 0xe0
     72e:	a815      	add	r0, sp, #84	; 0x54
     730:	f005 fc9d 	bl	606e <memcmp>
     734:	2800      	cmp	r0, #0
     736:	d0dd      	beq.n	6f4 <FIH_LABEL_FIH_CALL_END_310+0x6a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     738:	3401      	adds	r4, #1
     73a:	e7e1      	b.n	700 <FIH_LABEL_FIH_CALL_END_310+0x76>
        } else if (type == EXPECTED_SIG_TLV) {
     73c:	f1ba 0f20 	cmp.w	sl, #32
     740:	f47f af7c 	bne.w	63c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x60>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     744:	2f00      	cmp	r7, #0
     746:	db19      	blt.n	77c <FIH_LABEL_FIH_CALL_END_644>
     748:	f8d9 3000 	ldr.w	r3, [r9]
     74c:	42bb      	cmp	r3, r7
     74e:	dd15      	ble.n	77c <FIH_LABEL_FIH_CALL_END_644>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     750:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     758:	d11e      	bne.n	798 <FIH_LABEL_FIH_CALL_END_644+0x1c>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     75a:	4628      	mov	r0, r5
     75c:	9906      	ldr	r1, [sp, #24]
     75e:	aa38      	add	r2, sp, #224	; 0xe0
     760:	f005 fb37 	bl	5dd2 <flash_area_read>
            if (rc) {
     764:	4604      	mov	r4, r0
     766:	b9c8      	cbnz	r0, 79c <FIH_LABEL_FIH_CALL_END_644+0x20>

00000768 <FIH_LABEL_FIH_CALL_START_622>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     768:	b2ff      	uxtb	r7, r7
     76a:	4651      	mov	r1, sl
     76c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     770:	9700      	str	r7, [sp, #0]
     772:	aa38      	add	r2, sp, #224	; 0xe0
     774:	a80d      	add	r0, sp, #52	; 0x34
     776:	f000 f81f 	bl	7b8 <bootutil_verify_sig>
     77a:	4606      	mov	r6, r0

0000077c <FIH_LABEL_FIH_CALL_END_644>:
                key_id = -1;
     77c:	f04f 37ff 	mov.w	r7, #4294967295
     780:	e75c      	b.n	63c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x60>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     782:	f1b8 0f00 	cmp.w	r8, #0
     786:	d00d      	beq.n	7a4 <FIH_LABEL_FIH_CALL_END_644+0x28>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     788:	4b07      	ldr	r3, [pc, #28]	; (7a8 <FIH_LABEL_FIH_CALL_END_644+0x2c>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     78a:	681b      	ldr	r3, [r3, #0]
     78c:	42b3      	cmp	r3, r6
     78e:	d001      	beq.n	794 <FIH_LABEL_FIH_CALL_END_644+0x18>
        return FIH_FAILURE;
     790:	9b03      	ldr	r3, [sp, #12]
     792:	681e      	ldr	r6, [r3, #0]
                rc = -1;
     794:	4634      	mov	r4, r6
     796:	e001      	b.n	79c <FIH_LABEL_FIH_CALL_END_644+0x20>
     798:	f04f 34ff 	mov.w	r4, #4294967295
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     79c:	4620      	mov	r0, r4
     79e:	b079      	add	sp, #484	; 0x1e4
     7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a4:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     7a6:	e7f9      	b.n	79c <FIH_LABEL_FIH_CALL_END_644+0x20>
     7a8:	2000022c 	.word	0x2000022c
     7ac:	000084cc 	.word	0x000084cc
     7b0:	20000000 	.word	0x20000000
     7b4:	000084c8 	.word	0x000084c8

000007b8 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7bc:	4691      	mov	r9, r2
    int rc;
    fih_int fih_rc = FIH_FAILURE;
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
     7be:	2200      	movs	r2, #0
{
     7c0:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
     7c4:	4698      	mov	r8, r3
    fih_int fih_rc = FIH_FAILURE;
     7c6:	4b6b      	ldr	r3, [pc, #428]	; (974 <FIH_LABEL_FIH_CALL_END_688+0x4>)
{
     7c8:	4607      	mov	r7, r0
     7ca:	468a      	mov	sl, r1
    mbedtls_rsa_init(&ctx, 0, 0);
     7cc:	a827      	add	r0, sp, #156	; 0x9c
     7ce:	4611      	mov	r1, r2
{
     7d0:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
    fih_int fih_rc = FIH_FAILURE;
     7d4:	681d      	ldr	r5, [r3, #0]
    mbedtls_rsa_init(&ctx, 0, 0);
     7d6:	f007 fafc 	bl	7dd2 <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
     7da:	4b67      	ldr	r3, [pc, #412]	; (978 <FIH_LABEL_FIH_CALL_END_688+0x8>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7dc:	aa8a      	add	r2, sp, #552	; 0x228
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7de:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     7e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     7e6:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7e8:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     7ea:	6819      	ldr	r1, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7ec:	a802      	add	r0, sp, #8
    end = cp + *bootutil_keys[key_id].len;
     7ee:	440c      	add	r4, r1
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7f0:	2330      	movs	r3, #48	; 0x30
     7f2:	4621      	mov	r1, r4
     7f4:	f005 ffde 	bl	67b4 <mbedtls_asn1_get_tag>
     7f8:	bb68      	cbnz	r0, 856 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x56>
    if (*p + len != end) {
     7fa:	9b02      	ldr	r3, [sp, #8]
     7fc:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     7fe:	4413      	add	r3, r2
     800:	429c      	cmp	r4, r3
     802:	d128      	bne.n	856 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x56>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
     804:	4621      	mov	r1, r4
     806:	aa29      	add	r2, sp, #164	; 0xa4
     808:	a802      	add	r0, sp, #8
     80a:	f005 ffe7 	bl	67dc <mbedtls_asn1_get_mpi>
     80e:	bb10      	cbnz	r0, 856 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x56>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
     810:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     814:	465a      	mov	r2, fp
     816:	4621      	mov	r1, r4
     818:	a802      	add	r0, sp, #8
     81a:	f005 ffdf 	bl	67dc <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
     81e:	4606      	mov	r6, r0
     820:	b9c8      	cbnz	r0, 856 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x56>
    ctx->len = mbedtls_mpi_size(&ctx->N);
     822:	a829      	add	r0, sp, #164	; 0xa4
     824:	f006 fbc5 	bl	6fb2 <mbedtls_mpi_size>
    if (*p != end) {
     828:	9b02      	ldr	r3, [sp, #8]
    ctx->len = mbedtls_mpi_size(&ctx->N);
     82a:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     82c:	429c      	cmp	r4, r3
     82e:	d112      	bne.n	856 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x56>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
     830:	4633      	mov	r3, r6
     832:	4632      	mov	r2, r6
     834:	e9cd 6b00 	strd	r6, fp, [sp]
     838:	a929      	add	r1, sp, #164	; 0xa4
     83a:	a827      	add	r0, sp, #156	; 0x9c
     83c:	f007 fa85 	bl	7d4a <mbedtls_rsa_import>
    if (rc != 0) {
     840:	b948      	cbnz	r0, 856 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x56>
    rc = mbedtls_rsa_check_pubkey(ctx);
     842:	a827      	add	r0, sp, #156	; 0x9c
     844:	f003 fae8 	bl	3e18 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     848:	b928      	cbnz	r0, 856 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x56>
    ctx->len = mbedtls_mpi_size(&ctx->N);
     84a:	a829      	add	r0, sp, #164	; 0xa4
     84c:	f006 fbb1 	bl	6fb2 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.len) {
     850:	4580      	cmp	r8, r0
    ctx->len = mbedtls_mpi_size(&ctx->N);
     852:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.len) {
     854:	d00a      	beq.n	86c <FIH_LABEL_FIH_CALL_START_231>
        mbedtls_rsa_free(&ctx);
     856:	a827      	add	r0, sp, #156	; 0x9c
     858:	f007 fac6 	bl	7de8 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     85c:	a827      	add	r0, sp, #156	; 0x9c
     85e:	f007 fac3 	bl	7de8 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     862:	4628      	mov	r0, r5
     864:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000086c <FIH_LABEL_FIH_CALL_START_231>:
    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
     86c:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
     870:	d002      	beq.n	878 <FIH_LABEL_FIH_CALL_END_292+0x2>
     872:	f04f 35ff 	mov.w	r5, #4294967295

00000876 <FIH_LABEL_FIH_CALL_END_292>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     876:	e7f1      	b.n	85c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x5c>
    if (hlen != PSS_HLEN) {
     878:	f1ba 0f20 	cmp.w	sl, #32
     87c:	d1f9      	bne.n	872 <FIH_LABEL_FIH_CALL_START_231+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     87e:	4649      	mov	r1, r9
     880:	aa8a      	add	r2, sp, #552	; 0x228
     882:	a827      	add	r0, sp, #156	; 0x9c
     884:	f003 faec 	bl	3e60 <mbedtls_rsa_public>
     888:	4604      	mov	r4, r0
     88a:	2800      	cmp	r0, #0
     88c:	d1f1      	bne.n	872 <FIH_LABEL_FIH_CALL_START_231+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     88e:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     892:	2bbc      	cmp	r3, #188	; 0xbc
     894:	d1ed      	bne.n	872 <FIH_LABEL_FIH_CALL_START_231+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     896:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
    int count = PSS_MASK_LEN;
     89a:	26df      	movs	r6, #223	; 0xdf
     89c:	4645      	mov	r5, r8
    uint8_t counter[4] = { 0, 0, 0, 0 };
     89e:	9003      	str	r0, [sp, #12]
    mbedtls_sha256_init(ctx);
     8a0:	a80c      	add	r0, sp, #48	; 0x30
     8a2:	f007 fada 	bl	7e5a <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     8a6:	2100      	movs	r1, #0
     8a8:	a80c      	add	r0, sp, #48	; 0x30
     8aa:	f003 fb17 	bl	3edc <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     8ae:	2220      	movs	r2, #32
     8b0:	f20d 3107 	addw	r1, sp, #775	; 0x307
     8b4:	a80c      	add	r0, sp, #48	; 0x30
     8b6:	f007 fad4 	bl	7e62 <mbedtls_sha256_update_ret>
     8ba:	2204      	movs	r2, #4
     8bc:	a903      	add	r1, sp, #12
     8be:	a80c      	add	r0, sp, #48	; 0x30
     8c0:	f007 facf 	bl	7e62 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     8c4:	a904      	add	r1, sp, #16
     8c6:	a80c      	add	r0, sp, #48	; 0x30
     8c8:	f007 fb08 	bl	7edc <mbedtls_sha256_finish_ret>
        if (bytes > count)
     8cc:	2e1f      	cmp	r6, #31
     8ce:	bfd4      	ite	le
     8d0:	46b1      	movle	r9, r6
     8d2:	f04f 0920 	movgt.w	r9, #32
        counter[3]++;
     8d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     8da:	4640      	mov	r0, r8
        counter[3]++;
     8dc:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     8de:	464a      	mov	r2, r9
     8e0:	a904      	add	r1, sp, #16
        count -= bytes;
     8e2:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     8e6:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     8ea:	f005 fbd0 	bl	608e <memcpy>
    while (count > 0) {
     8ee:	2e00      	cmp	r6, #0
        mask += bytes;
     8f0:	44c8      	add	r8, r9
    while (count > 0) {
     8f2:	dcd5      	bgt.n	8a0 <FIH_LABEL_FIH_CALL_END_292+0x2a>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8f4:	4628      	mov	r0, r5
     8f6:	462a      	mov	r2, r5
     8f8:	23df      	movs	r3, #223	; 0xdf
     8fa:	ae8a      	add	r6, sp, #552	; 0x228
        db_mask[i] ^= em[i];
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	f816 cb01 	ldrb.w	ip, [r6], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     902:	3b01      	subs	r3, #1
        db_mask[i] ^= em[i];
     904:	ea81 010c 	eor.w	r1, r1, ip
     908:	f802 1b01 	strb.w	r1, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     90c:	d1f6      	bne.n	8fc <FIH_LABEL_FIH_CALL_END_292+0x86>
    db_mask[0] &= 0x7F;
     90e:	782b      	ldrb	r3, [r5, #0]
     910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     914:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     916:	f810 6b01 	ldrb.w	r6, [r0], #1
     91a:	2e00      	cmp	r6, #0
     91c:	d1a9      	bne.n	872 <FIH_LABEL_FIH_CALL_START_231+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     91e:	3401      	adds	r4, #1
     920:	2cbe      	cmp	r4, #190	; 0xbe
     922:	d1f8      	bne.n	916 <FIH_LABEL_FIH_CALL_END_292+0xa0>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     924:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     928:	2b01      	cmp	r3, #1
     92a:	d1a2      	bne.n	872 <FIH_LABEL_FIH_CALL_START_231+0x6>
    mbedtls_sha256_init(ctx);
     92c:	a80c      	add	r0, sp, #48	; 0x30
     92e:	f007 fa94 	bl	7e5a <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     932:	4631      	mov	r1, r6
     934:	a80c      	add	r0, sp, #48	; 0x30
     936:	f003 fad1 	bl	3edc <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     93a:	2208      	movs	r2, #8
     93c:	490f      	ldr	r1, [pc, #60]	; (97c <FIH_LABEL_FIH_CALL_END_688+0xc>)
     93e:	a80c      	add	r0, sp, #48	; 0x30
     940:	f007 fa8f 	bl	7e62 <mbedtls_sha256_update_ret>
     944:	4639      	mov	r1, r7
     946:	2220      	movs	r2, #32
     948:	a80c      	add	r0, sp, #48	; 0x30
     94a:	f007 fa8a 	bl	7e62 <mbedtls_sha256_update_ret>
     94e:	2220      	movs	r2, #32
     950:	f20d 2107 	addw	r1, sp, #519	; 0x207
     954:	a80c      	add	r0, sp, #48	; 0x30
     956:	f007 fa84 	bl	7e62 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     95a:	a904      	add	r1, sp, #16
     95c:	a80c      	add	r0, sp, #48	; 0x30
     95e:	f007 fabd 	bl	7edc <mbedtls_sha256_finish_ret>

00000962 <FIH_LABEL_FIH_CALL_START_667>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     962:	2220      	movs	r2, #32
     964:	f20d 3107 	addw	r1, sp, #775	; 0x307
     968:	a804      	add	r0, sp, #16
     96a:	f004 fe20 	bl	55ae <boot_fih_memequal>
     96e:	4605      	mov	r5, r0

00000970 <FIH_LABEL_FIH_CALL_END_688>:
    if (rc) {
     970:	e781      	b.n	876 <FIH_LABEL_FIH_CALL_END_292>
     972:	bf00      	nop
     974:	20000000 	.word	0x20000000
     978:	000084cc 	.word	0x000084cc
     97c:	000089b2 	.word	0x000089b2

00000980 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     984:	2302      	movs	r3, #2
{
     986:	b086      	sub	sp, #24
     988:	460d      	mov	r5, r1
     98a:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     98c:	2600      	movs	r6, #0
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     98e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 9fc <boot_read_swap_size+0x7c>
    uint8_t areas[2] = {
     992:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     996:	f817 0b01 	ldrb.w	r0, [r7], #1
     99a:	a901      	add	r1, sp, #4
     99c:	f001 f82e 	bl	19fc <flash_area_open>
        if (rc != 0) {
     9a0:	4604      	mov	r4, r0
     9a2:	b9d8      	cbnz	r0, 9dc <boot_read_swap_size+0x5c>
        off = boot_magic_off(*fap);
     9a4:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     9a6:	2310      	movs	r3, #16
    return fap->fa_size - BOOT_MAGIC_SZ;
     9a8:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     9aa:	aa02      	add	r2, sp, #8
     9ac:	3910      	subs	r1, #16
     9ae:	f005 fa10 	bl	5dd2 <flash_area_read>
        if (rc != 0) {
     9b2:	4604      	mov	r4, r0
     9b4:	b128      	cbz	r0, 9c2 <boot_read_swap_size+0x42>

    rc = boot_find_status(image_index, &fap);
    if (rc == 0) {
        off = boot_swap_size_off(fap);
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
     9b6:	9801      	ldr	r0, [sp, #4]
     9b8:	f005 fa0a 	bl	5dd0 <flash_area_close>
     9bc:	e00e      	b.n	9dc <boot_read_swap_size+0x5c>
     9be:	2601      	movs	r6, #1
     9c0:	e7e9      	b.n	996 <boot_read_swap_size+0x16>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     9c2:	2210      	movs	r2, #16
     9c4:	4641      	mov	r1, r8
     9c6:	a802      	add	r0, sp, #8
     9c8:	f005 fb51 	bl	606e <memcmp>
     9cc:	b150      	cbz	r0, 9e4 <boot_read_swap_size+0x64>
        flash_area_close(*fap);
     9ce:	9801      	ldr	r0, [sp, #4]
     9d0:	f005 f9fe 	bl	5dd0 <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9d4:	2e00      	cmp	r6, #0
     9d6:	d0f2      	beq.n	9be <boot_read_swap_size+0x3e>
    return -1;
     9d8:	f04f 34ff 	mov.w	r4, #4294967295
    }

    return rc;
}
     9dc:	4620      	mov	r0, r4
     9de:	b006      	add	sp, #24
     9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     9e4:	9801      	ldr	r0, [sp, #4]
     9e6:	f005 fe19 	bl	661c <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     9ea:	2304      	movs	r3, #4
     9ec:	f1a0 0108 	sub.w	r1, r0, #8
     9f0:	462a      	mov	r2, r5
     9f2:	9801      	ldr	r0, [sp, #4]
     9f4:	f005 f9ed 	bl	5dd2 <flash_area_read>
     9f8:	4604      	mov	r4, r0
     9fa:	e7dc      	b.n	9b6 <boot_read_swap_size+0x36>
     9fc:	000086ac 	.word	0x000086ac

00000a00 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     a04:	4b38      	ldr	r3, [pc, #224]	; (ae8 <FIH_LABEL_FIH_CALL_END_453+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     a06:	b088      	sub	sp, #32
     a08:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a0a:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     a0c:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     a0e:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a10:	f004 fd00 	bl	5414 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     a14:	a906      	add	r1, sp, #24
     a16:	b2c0      	uxtb	r0, r0
     a18:	f000 fff0 	bl	19fc <flash_area_open>
    if (rc != 0) {
     a1c:	2800      	cmp	r0, #0
     a1e:	d157      	bne.n	ad0 <FIH_LABEL_FIH_CALL_END_453+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a20:	4629      	mov	r1, r5
     a22:	f004 fcf7 	bl	5414 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     a26:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a28:	a907      	add	r1, sp, #28
     a2a:	b2c0      	uxtb	r0, r0
     a2c:	fb04 6405 	mla	r4, r4, r5, r6
     a30:	f000 ffe4 	bl	19fc <flash_area_open>
    if (rc != 0) {
     a34:	2800      	cmp	r0, #0
     a36:	d036      	beq.n	aa6 <FIH_LABEL_FIH_CALL_END_453+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a38:	f04f 082c 	mov.w	r8, #44	; 0x2c
     a3c:	fb08 f805 	mul.w	r8, r8, r5
     a40:	eb06 0708 	add.w	r7, r6, r8
     a44:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     a46:	f011 0110 	ands.w	r1, r1, #16
     a4a:	d137      	bne.n	abc <FIH_LABEL_FIH_CALL_END_453+0x54>

00000a4c <FIH_LABEL_FIH_CALL_START_397>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
     a50:	9301      	str	r3, [sp, #4]
     a52:	4b26      	ldr	r3, [pc, #152]	; (aec <FIH_LABEL_FIH_CALL_END_453+0x84>)
     a54:	4622      	mov	r2, r4
     a56:	9300      	str	r3, [sp, #0]
     a58:	4608      	mov	r0, r1
     a5a:	e9cd 1103 	strd	r1, r1, [sp, #12]
     a5e:	9b06      	ldr	r3, [sp, #24]
     a60:	9102      	str	r1, [sp, #8]
     a62:	f7ff fda5 	bl	5b0 <bootutil_img_validate>
     a66:	4604      	mov	r4, r0

00000a68 <FIH_LABEL_FIH_CALL_END_453>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a68:	4b21      	ldr	r3, [pc, #132]	; (af0 <FIH_LABEL_FIH_CALL_END_453+0x88>)
     a6a:	f856 2008 	ldr.w	r2, [r6, r8]
        }
    }
#endif

    FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a6e:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a70:	429a      	cmp	r2, r3
     a72:	d10c      	bne.n	a8e <FIH_LABEL_FIH_CALL_END_453+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a74:	893a      	ldrh	r2, [r7, #8]
     a76:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     a78:	43d1      	mvns	r1, r2
     a7a:	428b      	cmp	r3, r1
     a7c:	d807      	bhi.n	a8e <FIH_LABEL_FIH_CALL_END_453+0x26>
        *dest = a + b;
     a7e:	4413      	add	r3, r2
    if (size >= fap->fa_size) {
     a80:	6882      	ldr	r2, [r0, #8]
     a82:	4293      	cmp	r3, r2
     a84:	d203      	bcs.n	a8e <FIH_LABEL_FIH_CALL_END_453+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a86:	4b1b      	ldr	r3, [pc, #108]	; (af4 <FIH_LABEL_FIH_CALL_END_453+0x8c>)
     a88:	681b      	ldr	r3, [r3, #0]
     a8a:	42a3      	cmp	r3, r4
     a8c:	d01d      	beq.n	aca <FIH_LABEL_FIH_CALL_END_453+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a8e:	b345      	cbz	r5, ae2 <FIH_LABEL_FIH_CALL_END_453+0x7a>
            flash_area_erase(fap, 0, fap->fa_size);
     a90:	6882      	ldr	r2, [r0, #8]
     a92:	2100      	movs	r1, #0
     a94:	f005 f9e3 	bl	5e5e <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a98:	4a17      	ldr	r2, [pc, #92]	; (af8 <FIH_LABEL_FIH_CALL_END_453+0x90>)
     a9a:	2145      	movs	r1, #69	; 0x45
     a9c:	4817      	ldr	r0, [pc, #92]	; (afc <FIH_LABEL_FIH_CALL_END_453+0x94>)
     a9e:	f004 ff7e 	bl	599e <printk>
        fih_rc = fih_int_encode(1);
     aa2:	2401      	movs	r4, #1
     aa4:	e011      	b.n	aca <FIH_LABEL_FIH_CALL_END_453+0x62>
    erased_val = flash_area_erased_val(fap);
     aa6:	9807      	ldr	r0, [sp, #28]
     aa8:	f005 fa08 	bl	5ebc <flash_area_erased_val>
     aac:	4607      	mov	r7, r0
    flash_area_close(fap);
     aae:	9807      	ldr	r0, [sp, #28]
     ab0:	f005 f98e 	bl	5dd0 <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     ab4:	1e63      	subs	r3, r4, #1
     ab6:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     ab8:	4293      	cmp	r3, r2
     aba:	d10d      	bne.n	ad8 <FIH_LABEL_FIH_CALL_END_453+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     abc:	2d00      	cmp	r5, #0
     abe:	d0f0      	beq.n	aa2 <FIH_LABEL_FIH_CALL_END_453+0x3a>
            swap_erase_trailer_sectors(state, fap);
     ac0:	4630      	mov	r0, r6
     ac2:	9906      	ldr	r1, [sp, #24]
     ac4:	f004 fe76 	bl	57b4 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     ac8:	462c      	mov	r4, r5
        fih_rc = fih_int_encode(1);
        goto out;
    }

out:
    flash_area_close(fap);
     aca:	9806      	ldr	r0, [sp, #24]
     acc:	f005 f980 	bl	5dd0 <flash_area_close>

    FIH_RET(fih_rc);
}
     ad0:	4620      	mov	r0, r4
     ad2:	b008      	add	sp, #32
     ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     ad8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     adc:	42b9      	cmp	r1, r7
     ade:	d0eb      	beq.n	ab8 <FIH_LABEL_FIH_CALL_END_453+0x50>
     ae0:	e7aa      	b.n	a38 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     ae2:	4a07      	ldr	r2, [pc, #28]	; (b00 <FIH_LABEL_FIH_CALL_END_453+0x98>)
     ae4:	e7d9      	b.n	a9a <FIH_LABEL_FIH_CALL_END_453+0x32>
     ae6:	bf00      	nop
     ae8:	20000000 	.word	0x20000000
     aec:	20002d88 	.word	0x20002d88
     af0:	96f3b83d 	.word	0x96f3b83d
     af4:	2000022c 	.word	0x2000022c
     af8:	000089ba 	.word	0x000089ba
     afc:	000089cc 	.word	0x000089cc
     b00:	000089c4 	.word	0x000089c4

00000b04 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
     b06:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     b08:	2100      	movs	r1, #0
{
     b0a:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     b0c:	4628      	mov	r0, r5
    size = copy_size = 0;
     b0e:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     b12:	f004 fe0e 	bl	5732 <boot_status_is_reset>
     b16:	b330      	cbz	r0, b66 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b18:	4e16      	ldr	r6, [pc, #88]	; (b74 <boot_swap_image+0x70>)
     b1a:	6822      	ldr	r2, [r4, #0]
     b1c:	42b2      	cmp	r2, r6
     b1e:	d103      	bne.n	b28 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     b20:	4620      	mov	r0, r4
     b22:	aa01      	add	r2, sp, #4
     b24:	f004 fd7d 	bl	5622 <boot_read_image_size>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b2a:	42b3      	cmp	r3, r6
     b2c:	d104      	bne.n	b38 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     b2e:	466a      	mov	r2, sp
     b30:	2101      	movs	r1, #1
     b32:	4620      	mov	r0, r4
     b34:	f004 fd75 	bl	5622 <boot_read_image_size>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     b38:	e9dd 3200 	ldrd	r3, r2, [sp]
     b3c:	4293      	cmp	r3, r2
            copy_size = size;
     b3e:	bf88      	it	hi
     b40:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     b42:	9b01      	ldr	r3, [sp, #4]
     b44:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     b46:	9a01      	ldr	r2, [sp, #4]
     b48:	4629      	mov	r1, r5
     b4a:	4620      	mov	r0, r4
     b4c:	f000 fb34 	bl	11b8 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     b50:	4b09      	ldr	r3, [pc, #36]	; (b78 <boot_swap_image+0x74>)
     b52:	681a      	ldr	r2, [r3, #0]
     b54:	2a00      	cmp	r2, #0
     b56:	dd03      	ble.n	b60 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     b58:	2157      	movs	r1, #87	; 0x57
     b5a:	4808      	ldr	r0, [pc, #32]	; (b7c <boot_swap_image+0x78>)
     b5c:	f004 ff1f 	bl	599e <printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     b60:	2000      	movs	r0, #0
     b62:	b002      	add	sp, #8
     b64:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     b66:	f105 0108 	add.w	r1, r5, #8
     b6a:	f7ff ff09 	bl	980 <boot_read_swap_size>
        copy_size = bs->swap_size;
     b6e:	68ab      	ldr	r3, [r5, #8]
     b70:	9301      	str	r3, [sp, #4]
     b72:	e7e8      	b.n	b46 <boot_swap_image+0x42>
     b74:	96f3b83d 	.word	0x96f3b83d
     b78:	20000a90 	.word	0x20000a90
     b7c:	000089f4 	.word	0x000089f4

00000b80 <boot_copy_region>:
{
     b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b84:	4688      	mov	r8, r1
     b86:	4691      	mov	r9, r2
     b88:	469a      	mov	sl, r3
    bytes_copied = 0;
     b8a:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b8c:	f8df b094 	ldr.w	fp, [pc, #148]	; c24 <boot_copy_region+0xa4>
     b90:	4d22      	ldr	r5, [pc, #136]	; (c1c <boot_copy_region+0x9c>)
     b92:	4c23      	ldr	r4, [pc, #140]	; (c20 <boot_copy_region+0xa0>)
    while (bytes_copied < sz) {
     b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b96:	429e      	cmp	r6, r3
     b98:	d301      	bcc.n	b9e <boot_copy_region+0x1e>
    return 0;
     b9a:	2000      	movs	r0, #0
     b9c:	e00f      	b.n	bbe <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     ba0:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     ba2:	1b9f      	subs	r7, r3, r6
     ba4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     ba8:	bf28      	it	cs
     baa:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     bae:	4a1d      	ldr	r2, [pc, #116]	; (c24 <boot_copy_region+0xa4>)
     bb0:	463b      	mov	r3, r7
     bb2:	eb06 010a 	add.w	r1, r6, sl
     bb6:	f005 f90c 	bl	5dd2 <flash_area_read>
        if (rc != 0) {
     bba:	b110      	cbz	r0, bc2 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     bbc:	2001      	movs	r0, #1
}
     bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     bc2:	990a      	ldr	r1, [sp, #40]	; 0x28
     bc4:	463b      	mov	r3, r7
     bc6:	465a      	mov	r2, fp
     bc8:	4648      	mov	r0, r9
     bca:	1871      	adds	r1, r6, r1
     bcc:	f005 f91e 	bl	5e0c <flash_area_write>
        if (rc != 0) {
     bd0:	2800      	cmp	r0, #0
     bd2:	d1f3      	bne.n	bbc <boot_copy_region+0x3c>
     bd4:	4b14      	ldr	r3, [pc, #80]	; (c28 <boot_copy_region+0xa8>)
     bd6:	f8c5 4600 	str.w	r4, [r5, #1536]	; 0x600
        bytes_copied += chunk_sz;
     bda:	443e      	add	r6, r7
     bdc:	f8c5 4604 	str.w	r4, [r5, #1540]	; 0x604
     be0:	f8c5 4608 	str.w	r4, [r5, #1544]	; 0x608
     be4:	f8c5 460c 	str.w	r4, [r5, #1548]	; 0x60c
     be8:	f8c5 4610 	str.w	r4, [r5, #1552]	; 0x610
     bec:	f8c5 4614 	str.w	r4, [r5, #1556]	; 0x614
     bf0:	f8c5 4618 	str.w	r4, [r5, #1560]	; 0x618
     bf4:	f8c5 461c 	str.w	r4, [r5, #1564]	; 0x61c
     bf8:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
     bfc:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
     c00:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
     c04:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
     c08:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
     c0c:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
     c10:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
     c14:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     c18:	e7bc      	b.n	b94 <boot_copy_region+0x14>
     c1a:	bf00      	nop
     c1c:	50018000 	.word	0x50018000
     c20:	6e524635 	.word	0x6e524635
     c24:	20002988 	.word	0x20002988
     c28:	50019000 	.word	0x50019000

00000c2c <context_boot_go>:
    }
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     c30:	4b88      	ldr	r3, [pc, #544]	; (e54 <FIH_LABEL_FIH_CALL_END_2601+0x40>)
{
     c32:	4604      	mov	r4, r0
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     c34:	2260      	movs	r2, #96	; 0x60
{
     c36:	b085      	sub	sp, #20
     c38:	460f      	mov	r7, r1
    memset(state, 0, sizeof(struct boot_loader_state));
     c3a:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     c3c:	681e      	ldr	r6, [r3, #0]
    memset(state, 0, sizeof(struct boot_loader_state));
     c3e:	f005 fa51 	bl	60e4 <memset>

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c42:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c44:	4b84      	ldr	r3, [pc, #528]	; (e58 <FIH_LABEL_FIH_CALL_END_2601+0x44>)
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c46:	4608      	mov	r0, r1
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c48:	6263      	str	r3, [r4, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     c4a:	4b84      	ldr	r3, [pc, #528]	; (e5c <FIH_LABEL_FIH_CALL_END_2601+0x48>)
     c4c:	6523      	str	r3, [r4, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c4e:	f004 fbe1 	bl	5414 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c52:	f104 0120 	add.w	r1, r4, #32
     c56:	b2c0      	uxtb	r0, r0
     c58:	f000 fed0 	bl	19fc <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c5c:	2101      	movs	r1, #1
     c5e:	2000      	movs	r0, #0
     c60:	f004 fbd8 	bl	5414 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c64:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     c68:	b2c0      	uxtb	r0, r0
     c6a:	f000 fec7 	bl	19fc <flash_area_open>
     c6e:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c70:	4620      	mov	r0, r4
     c72:	f004 fd36 	bl	56e2 <boot_read_sectors>
    if (rc != 0) {
     c76:	4602      	mov	r2, r0
     c78:	b130      	cbz	r0, c88 <context_boot_go+0x5c>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     c7a:	2280      	movs	r2, #128	; 0x80
     c7c:	2157      	movs	r1, #87	; 0x57
     c7e:	4878      	ldr	r0, [pc, #480]	; (e60 <FIH_LABEL_FIH_CALL_END_2601+0x4c>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c80:	f004 fe8d 	bl	599e <printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c84:	2301      	movs	r3, #1
     c86:	e08d      	b.n	da4 <FIH_LABEL_FIH_CALL_END_2379+0xe>
    rc = boot_read_image_headers(state, false, NULL);
     c88:	4601      	mov	r1, r0
     c8a:	4620      	mov	r0, r4
     c8c:	f004 fd11 	bl	56b2 <boot_read_image_headers>
    if (rc != 0) {
     c90:	4680      	mov	r8, r0
     c92:	b118      	cbz	r0, c9c <context_boot_go+0x70>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     c94:	2200      	movs	r2, #0
     c96:	2157      	movs	r1, #87	; 0x57
     c98:	4872      	ldr	r0, [pc, #456]	; (e64 <FIH_LABEL_FIH_CALL_END_2601+0x50>)
     c9a:	e7f1      	b.n	c80 <context_boot_go+0x54>
    if (boot_slots_compatible(state)) {
     c9c:	4620      	mov	r0, r4
     c9e:	f000 f9a3 	bl	fe8 <boot_slots_compatible>
     ca2:	2800      	cmp	r0, #0
     ca4:	d0ee      	beq.n	c84 <context_boot_go+0x58>
        boot_status_reset(bs);
     ca6:	4668      	mov	r0, sp
     ca8:	f004 fd3a 	bl	5720 <boot_status_reset>
        rc = swap_read_status(state, bs);
     cac:	4669      	mov	r1, sp
     cae:	4620      	mov	r0, r4
     cb0:	f004 fdd4 	bl	585c <swap_read_status>
        if (rc != 0) {
     cb4:	b118      	cbz	r0, cbe <context_boot_go+0x92>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     cb6:	4642      	mov	r2, r8
     cb8:	2157      	movs	r1, #87	; 0x57
     cba:	486b      	ldr	r0, [pc, #428]	; (e68 <FIH_LABEL_FIH_CALL_END_2601+0x54>)
     cbc:	e7e0      	b.n	c80 <context_boot_go+0x54>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     cbe:	4668      	mov	r0, sp
     cc0:	f004 fd37 	bl	5732 <boot_status_is_reset>
     cc4:	f080 0101 	eor.w	r1, r0, #1
     cc8:	466a      	mov	r2, sp
     cca:	4620      	mov	r0, r4
     ccc:	b2c9      	uxtb	r1, r1
     cce:	f004 fcf0 	bl	56b2 <boot_read_image_headers>
        if (rc != 0) {
     cd2:	4602      	mov	r2, r0
     cd4:	2800      	cmp	r0, #0
     cd6:	d1dd      	bne.n	c94 <context_boot_go+0x68>
        if (!boot_status_is_reset(bs)) {
     cd8:	4668      	mov	r0, sp
     cda:	f004 fd2a 	bl	5732 <boot_status_is_reset>
     cde:	4680      	mov	r8, r0
     ce0:	bb60      	cbnz	r0, d3c <context_boot_go+0x110>
    rc = boot_swap_image(state, bs);
     ce2:	4669      	mov	r1, sp
     ce4:	4620      	mov	r0, r4
     ce6:	f7ff ff0d 	bl	b04 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cee:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     cf2:	3b03      	subs	r3, #3
     cf4:	2b01      	cmp	r3, #1
     cf6:	d806      	bhi.n	d06 <context_boot_go+0xda>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cf8:	4640      	mov	r0, r8
     cfa:	f004 fdfc 	bl	58f6 <swap_set_image_ok>
        if (rc != 0) {
     cfe:	b110      	cbz	r0, d06 <context_boot_go+0xda>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d00:	23ff      	movs	r3, #255	; 0xff
     d02:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     d06:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d0a:	3b02      	subs	r3, #2
     d0c:	2b02      	cmp	r3, #2
     d0e:	d80b      	bhi.n	d28 <context_boot_go+0xfc>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d10:	2000      	movs	r0, #0
     d12:	f004 fdde 	bl	58d2 <swap_set_copy_done>
        if (rc != 0) {
     d16:	b138      	cbz	r0, d28 <context_boot_go+0xfc>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d18:	23ff      	movs	r3, #255	; 0xff
     d1a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     d1e:	2145      	movs	r1, #69	; 0x45
     d20:	4852      	ldr	r0, [pc, #328]	; (e6c <FIH_LABEL_FIH_CALL_END_2601+0x58>)
     d22:	f004 fe3c 	bl	599e <printk>
        while (1) {}
     d26:	e7fe      	b.n	d26 <context_boot_go+0xfa>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d28:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d2c:	2bff      	cmp	r3, #255	; 0xff
     d2e:	d0f6      	beq.n	d1e <context_boot_go+0xf2>
            rc = boot_read_image_headers(state, false, bs);
     d30:	466a      	mov	r2, sp
     d32:	2100      	movs	r1, #0
     d34:	4620      	mov	r0, r4
     d36:	f004 fcbc 	bl	56b2 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d3a:	e7a3      	b.n	c84 <context_boot_go+0x58>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d3c:	f89d 9007 	ldrb.w	r9, [sp, #7]
     d40:	f1b9 0f01 	cmp.w	r9, #1
     d44:	d123      	bne.n	d8e <FIH_LABEL_FIH_CALL_START_2359>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d46:	4610      	mov	r0, r2
     d48:	f002 fb7e 	bl	3448 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d4c:	1e83      	subs	r3, r0, #2
     d4e:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d50:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d52:	d80d      	bhi.n	d70 <FIH_LABEL_FIH_CALL_END_2254+0x14>

00000d54 <FIH_LABEL_FIH_CALL_START_2230>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d54:	4649      	mov	r1, r9
     d56:	4620      	mov	r0, r4
     d58:	f7ff fe52 	bl	a00 <boot_validate_slot.isra.0>

00000d5c <FIH_LABEL_FIH_CALL_END_2254>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d5c:	4b44      	ldr	r3, [pc, #272]	; (e70 <FIH_LABEL_FIH_CALL_END_2601+0x5c>)
     d5e:	681b      	ldr	r3, [r3, #0]
     d60:	4298      	cmp	r0, r3
     d62:	d005      	beq.n	d70 <FIH_LABEL_FIH_CALL_END_2254+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     d64:	2801      	cmp	r0, #1
     d66:	bf0c      	ite	eq
     d68:	f04f 0801 	moveq.w	r8, #1
     d6c:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d70:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     d74:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     d78:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     d7a:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     d7e:	d814      	bhi.n	daa <FIH_LABEL_FIH_CALL_END_2379+0x14>
     d80:	2b01      	cmp	r3, #1
     d82:	d818      	bhi.n	db6 <FIH_LABEL_FIH_CALL_END_2379+0x20>
     d84:	d02f      	beq.n	de6 <FIH_LABEL_FIH_CALL_END_2379+0x50>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d86:	23ff      	movs	r3, #255	; 0xff
     d88:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d8c:	e02b      	b.n	de6 <FIH_LABEL_FIH_CALL_END_2379+0x50>

00000d8e <FIH_LABEL_FIH_CALL_START_2359>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d8e:	2101      	movs	r1, #1
     d90:	4620      	mov	r0, r4
     d92:	f7ff fe35 	bl	a00 <boot_validate_slot.isra.0>

00000d96 <FIH_LABEL_FIH_CALL_END_2379>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d96:	4b36      	ldr	r3, [pc, #216]	; (e70 <FIH_LABEL_FIH_CALL_END_2601+0x5c>)
     d98:	681b      	ldr	r3, [r3, #0]
     d9a:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d9c:	bf14      	ite	ne
     d9e:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     da0:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     da4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     da8:	e7e4      	b.n	d74 <FIH_LABEL_FIH_CALL_END_2254+0x18>
        switch (BOOT_SWAP_TYPE(state)) {
     daa:	2b05      	cmp	r3, #5
     dac:	d1eb      	bne.n	d86 <FIH_LABEL_FIH_CALL_END_2254+0x2a>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     dae:	2000      	movs	r0, #0
     db0:	f004 fda1 	bl	58f6 <swap_set_image_ok>
     db4:	e012      	b.n	ddc <FIH_LABEL_FIH_CALL_END_2379+0x46>
        rc = boot_swap_image(state, bs);
     db6:	4669      	mov	r1, sp
     db8:	4620      	mov	r0, r4
     dba:	f7ff fea3 	bl	b04 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     dbe:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     dc2:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     dc4:	1eda      	subs	r2, r3, #3
     dc6:	2a01      	cmp	r2, #1
     dc8:	d80b      	bhi.n	de2 <FIH_LABEL_FIH_CALL_END_2379+0x4c>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     dca:	2000      	movs	r0, #0
     dcc:	f004 fd93 	bl	58f6 <swap_set_image_ok>
        if (rc != 0) {
     dd0:	4605      	mov	r5, r0
     dd2:	2800      	cmp	r0, #0
     dd4:	d1d7      	bne.n	d86 <FIH_LABEL_FIH_CALL_END_2254+0x2a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     dd6:	2000      	movs	r0, #0
     dd8:	f004 fd7b 	bl	58d2 <swap_set_copy_done>
            if (rc != 0) {
     ddc:	4605      	mov	r5, r0
     dde:	b110      	cbz	r0, de6 <FIH_LABEL_FIH_CALL_END_2379+0x50>
     de0:	e7d1      	b.n	d86 <FIH_LABEL_FIH_CALL_END_2254+0x2a>
    if (BOOT_IS_UPGRADE(swap_type)) {
     de2:	2b02      	cmp	r3, #2
     de4:	d0f7      	beq.n	dd6 <FIH_LABEL_FIH_CALL_END_2379+0x40>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     de6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     dea:	2bff      	cmp	r3, #255	; 0xff
     dec:	d104      	bne.n	df8 <FIH_LABEL_FIH_CALL_END_2379+0x62>
            BOOT_LOG_ERR("panic!");
     dee:	2145      	movs	r1, #69	; 0x45
     df0:	481e      	ldr	r0, [pc, #120]	; (e6c <FIH_LABEL_FIH_CALL_END_2601+0x58>)
     df2:	f004 fdd4 	bl	599e <printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     df6:	e7fe      	b.n	df6 <FIH_LABEL_FIH_CALL_END_2379+0x60>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     df8:	2b01      	cmp	r3, #1
     dfa:	d006      	beq.n	e0a <FIH_LABEL_FIH_CALL_START_2585>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     dfc:	466a      	mov	r2, sp
     dfe:	2100      	movs	r1, #0
     e00:	4620      	mov	r0, r4
     e02:	f004 fc56 	bl	56b2 <boot_read_image_headers>
            if (rc != 0) {
     e06:	4605      	mov	r5, r0
     e08:	b9b8      	cbnz	r0, e3a <FIH_LABEL_FIH_CALL_END_2601+0x26>

00000e0a <FIH_LABEL_FIH_CALL_START_2585>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     e0a:	2100      	movs	r1, #0
     e0c:	4620      	mov	r0, r4
     e0e:	f7ff fdf7 	bl	a00 <boot_validate_slot.isra.0>
     e12:	4606      	mov	r6, r0

00000e14 <FIH_LABEL_FIH_CALL_END_2601>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     e14:	f8df 8058 	ldr.w	r8, [pc, #88]	; e70 <FIH_LABEL_FIH_CALL_END_2601+0x5c>
     e18:	f8d8 3000 	ldr.w	r3, [r8]
     e1c:	4283      	cmp	r3, r0
     e1e:	d10c      	bne.n	e3a <FIH_LABEL_FIH_CALL_END_2601+0x26>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     e20:	2210      	movs	r2, #16
     e22:	2100      	movs	r1, #0
     e24:	4668      	mov	r0, sp
     e26:	f005 f95d 	bl	60e4 <memset>

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     e2a:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);

    fih_rc = FIH_SUCCESS;
     e2c:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     e30:	785a      	ldrb	r2, [r3, #1]
     e32:	713a      	strb	r2, [r7, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     e34:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
     e36:	603c      	str	r4, [r7, #0]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     e38:	60bb      	str	r3, [r7, #8]
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     e3a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     e3c:	f004 ffc8 	bl	5dd0 <flash_area_close>
     e40:	6a20      	ldr	r0, [r4, #32]
     e42:	f004 ffc5 	bl	5dd0 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     e46:	2d00      	cmp	r5, #0
     e48:	bf14      	ite	ne
     e4a:	4628      	movne	r0, r5
     e4c:	4630      	moveq	r0, r6
     e4e:	b005      	add	sp, #20
     e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e54:	20000000 	.word	0x20000000
     e58:	20000290 	.word	0x20000290
     e5c:	20000690 	.word	0x20000690
     e60:	00008a23 	.word	0x00008a23
     e64:	00008a65 	.word	0x00008a65
     e68:	00008a91 	.word	0x00008a91
     e6c:	00008abb 	.word	0x00008abb
     e70:	2000022c 	.word	0x2000022c

00000e74 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     e74:	b508      	push	{r3, lr}
     e76:	4601      	mov	r1, r0

00000e78 <FIH_LABEL_FIH_CALL_START_3162>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     e78:	4801      	ldr	r0, [pc, #4]	; (e80 <FIH_LABEL_FIH_CALL_END_3178+0x2>)
     e7a:	f7ff fed7 	bl	c2c <context_boot_go>

00000e7e <FIH_LABEL_FIH_CALL_END_3178>:
    FIH_RET(fih_rc);
}
     e7e:	bd08      	pop	{r3, pc}
     e80:	20000230 	.word	0x20000230

00000e84 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
     e86:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     e88:	461c      	mov	r4, r3
     e8a:	b333      	cbz	r3, eda <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     e8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
     e8e:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     e90:	7963      	ldrb	r3, [r4, #5]
     e92:	2b01      	cmp	r3, #1
     e94:	d115      	bne.n	ec2 <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     e96:	bb01      	cbnz	r1, eda <boot_read_image_header+0x56>
     e98:	4b1f      	ldr	r3, [pc, #124]	; (f18 <boot_read_image_header+0x94>)
     e9a:	6822      	ldr	r2, [r4, #0]
     e9c:	681b      	ldr	r3, [r3, #0]
    off = 0;
     e9e:	429a      	cmp	r2, r3
     ea0:	bf98      	it	ls
     ea2:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     ea4:	2000      	movs	r0, #0
     ea6:	f004 fab5 	bl	5414 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     eaa:	a901      	add	r1, sp, #4
     eac:	b2c0      	uxtb	r0, r0
     eae:	f000 fda5 	bl	19fc <flash_area_open>
    if (rc != 0) {
     eb2:	b1f0      	cbz	r0, ef2 <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     eb4:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     eb6:	9801      	ldr	r0, [sp, #4]
     eb8:	f004 ff8a 	bl	5dd0 <flash_area_close>
    return rc;
}
     ebc:	4628      	mov	r0, r5
     ebe:	b002      	add	sp, #8
     ec0:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     ec2:	2b02      	cmp	r3, #2
     ec4:	d109      	bne.n	eda <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     ec6:	6823      	ldr	r3, [r4, #0]
     ec8:	2b01      	cmp	r3, #1
     eca:	d908      	bls.n	ede <boot_read_image_header+0x5a>
     ecc:	4a12      	ldr	r2, [pc, #72]	; (f18 <boot_read_image_header+0x94>)
     ece:	6812      	ldr	r2, [r2, #0]
     ed0:	4293      	cmp	r3, r2
     ed2:	d802      	bhi.n	eda <boot_read_image_header+0x56>
                if (slot == 0) {
     ed4:	fab1 f181 	clz	r1, r1
     ed8:	0949      	lsrs	r1, r1, #5
    off = 0;
     eda:	2500      	movs	r5, #0
     edc:	e7e2      	b.n	ea4 <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     ede:	d1fc      	bne.n	eda <boot_read_image_header+0x56>
                if (slot == 0) {
     ee0:	2900      	cmp	r1, #0
     ee2:	d0df      	beq.n	ea4 <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     ee4:	2901      	cmp	r1, #1
     ee6:	d1f8      	bne.n	eda <boot_read_image_header+0x56>
     ee8:	7921      	ldrb	r1, [r4, #4]
     eea:	3902      	subs	r1, #2
     eec:	bf18      	it	ne
     eee:	2101      	movne	r1, #1
     ef0:	e7f3      	b.n	eda <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     ef2:	4629      	mov	r1, r5
     ef4:	2320      	movs	r3, #32
     ef6:	4632      	mov	r2, r6
     ef8:	9801      	ldr	r0, [sp, #4]
     efa:	f004 ff6a 	bl	5dd2 <flash_area_read>
    if (rc != 0) {
     efe:	4605      	mov	r5, r0
     f00:	2800      	cmp	r0, #0
     f02:	d1d7      	bne.n	eb4 <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     f04:	2c00      	cmp	r4, #0
     f06:	d0d6      	beq.n	eb6 <boot_read_image_header+0x32>
     f08:	6835      	ldr	r5, [r6, #0]
     f0a:	4804      	ldr	r0, [pc, #16]	; (f1c <boot_read_image_header+0x98>)
     f0c:	1a2d      	subs	r5, r5, r0
     f0e:	bf18      	it	ne
     f10:	f04f 35ff 	movne.w	r5, #4294967295
     f14:	e7cf      	b.n	eb6 <boot_read_image_header+0x32>
     f16:	bf00      	nop
     f18:	20000004 	.word	0x20000004
     f1c:	96f3b83d 	.word	0x96f3b83d

00000f20 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f24:	4607      	mov	r7, r0
     f26:	460c      	mov	r4, r1
     f28:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f2a:	4601      	mov	r1, r0
     f2c:	2000      	movs	r0, #0
{
     f2e:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f30:	f004 fb44 	bl	55bc <boot_status_entries>
    if (max_entries < 0) {
     f34:	1e05      	subs	r5, r0, #0
     f36:	db51      	blt.n	fdc <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     f38:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     f3a:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     f3c:	f004 fb4b 	bl	55d6 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     f40:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     f44:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     f48:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     f4c:	f04f 34ff 	mov.w	r4, #4294967295
     f50:	f105 38ff 	add.w	r8, r5, #4294967295
     f54:	fb09 0808 	mla	r8, r9, r8, r0
    for (i = max_entries; i > 0; i--) {
     f58:	b99d      	cbnz	r5, f82 <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     f5a:	f1ba 0f01 	cmp.w	sl, #1
     f5e:	dd03      	ble.n	f68 <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     f60:	2145      	movs	r1, #69	; 0x45
     f62:	4820      	ldr	r0, [pc, #128]	; (fe4 <swap_read_status_bytes+0xc4>)
     f64:	f004 fd1b 	bl	599e <printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     f68:	1c63      	adds	r3, r4, #1
     f6a:	d006      	beq.n	f7a <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     f6c:	2c7f      	cmp	r4, #127	; 0x7f
     f6e:	dc2a      	bgt.n	fc6 <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f70:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f74:	3401      	adds	r4, #1
     f76:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f78:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     f7a:	4628      	mov	r0, r5
     f7c:	b005      	add	sp, #20
     f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     f82:	1e6b      	subs	r3, r5, #1
     f84:	9300      	str	r3, [sp, #0]
     f86:	4641      	mov	r1, r8
     f88:	2301      	movs	r3, #1
     f8a:	4638      	mov	r0, r7
     f8c:	f10d 020f 	add.w	r2, sp, #15
     f90:	f004 ff1f 	bl	5dd2 <flash_area_read>
        if (rc < 0) {
     f94:	1e03      	subs	r3, r0, #0
     f96:	9301      	str	r3, [sp, #4]
     f98:	db22      	blt.n	fe0 <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     f9a:	2201      	movs	r2, #1
     f9c:	4638      	mov	r0, r7
     f9e:	f10d 010f 	add.w	r1, sp, #15
     fa2:	f005 fb4c 	bl	663e <bootutil_buffer_is_erased>
     fa6:	9b01      	ldr	r3, [sp, #4]
     fa8:	b140      	cbz	r0, fbc <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     faa:	459b      	cmp	fp, r3
     fac:	d001      	beq.n	fb2 <swap_read_status_bytes+0x92>
                erased_sections++;
     fae:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     fb2:	469b      	mov	fp, r3
     fb4:	9d00      	ldr	r5, [sp, #0]
     fb6:	eba8 0809 	sub.w	r8, r8, r9
     fba:	e7cd      	b.n	f58 <swap_read_status_bytes+0x38>
     fbc:	f1b4 3fff 	cmp.w	r4, #4294967295
     fc0:	bf08      	it	eq
     fc2:	462c      	moveq	r4, r5
     fc4:	e7f5      	b.n	fb2 <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     fc6:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fc8:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     fca:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fcc:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fce:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fd2:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fd4:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fd6:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fd8:	7134      	strb	r4, [r6, #4]
     fda:	e7ce      	b.n	f7a <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     fdc:	2507      	movs	r5, #7
     fde:	e7cc      	b.n	f7a <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     fe0:	2501      	movs	r5, #1
     fe2:	e7ca      	b.n	f7a <swap_read_status_bytes+0x5a>
     fe4:	00008ac7 	.word	0x00008ac7

00000fe8 <boot_slots_compatible>:
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     fe8:	b538      	push	{r3, r4, r5, lr}
    return BOOT_IMG(state, slot).num_sectors;
     fea:	6a82      	ldr	r2, [r0, #40]	; 0x28
     fec:	6d44      	ldr	r4, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     fee:	42a2      	cmp	r2, r4
     ff0:	d008      	beq.n	1004 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     ff2:	1c63      	adds	r3, r4, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     ff4:	4293      	cmp	r3, r2
     ff6:	d005      	beq.n	1004 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     ff8:	2157      	movs	r1, #87	; 0x57
     ffa:	4813      	ldr	r0, [pc, #76]	; (1048 <boot_slots_compatible+0x60>)

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     ffc:	f004 fccf 	bl	599e <printk>
            return 0;
    1000:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
    1002:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    1004:	2a80      	cmp	r2, #128	; 0x80
    1006:	d91c      	bls.n	1042 <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    1008:	2157      	movs	r1, #87	; 0x57
    100a:	4810      	ldr	r0, [pc, #64]	; (104c <boot_slots_compatible+0x64>)
    100c:	e7f6      	b.n	ffc <boot_slots_compatible+0x14>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    100e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1010:	6d05      	ldr	r5, [r0, #80]	; 0x50
    1012:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    1016:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    101a:	6849      	ldr	r1, [r1, #4]
        if (sector_sz_pri != sector_sz_sec) {
    101c:	686d      	ldr	r5, [r5, #4]
    101e:	428d      	cmp	r5, r1
    1020:	d002      	beq.n	1028 <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1022:	2157      	movs	r1, #87	; 0x57
    1024:	480a      	ldr	r0, [pc, #40]	; (1050 <boot_slots_compatible+0x68>)
    1026:	e7e9      	b.n	ffc <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
    1028:	3301      	adds	r3, #1
    102a:	42a3      	cmp	r3, r4
    102c:	d1ef      	bne.n	100e <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
    102e:	429a      	cmp	r2, r3
    1030:	d905      	bls.n	103e <boot_slots_compatible+0x56>
    1032:	6a42      	ldr	r2, [r0, #36]	; 0x24
    1034:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    1038:	685b      	ldr	r3, [r3, #4]
    103a:	4299      	cmp	r1, r3
    103c:	d1f1      	bne.n	1022 <boot_slots_compatible+0x3a>
    return 1;
    103e:	2001      	movs	r0, #1
    1040:	e7df      	b.n	1002 <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
    1042:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    1044:	4619      	mov	r1, r3
    1046:	e7f0      	b.n	102a <boot_slots_compatible+0x42>
    1048:	00008aea 	.word	0x00008aea
    104c:	00008b22 	.word	0x00008b22
    1050:	00008b51 	.word	0x00008b51

00001054 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
    1054:	b500      	push	{lr}
    1056:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1058:	2002      	movs	r0, #2
    105a:	a904      	add	r1, sp, #16
    105c:	f005 fb22 	bl	66a4 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1060:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1064:	2a01      	cmp	r2, #1
    1066:	d041      	beq.n	10ec <swap_status_source+0x98>
    1068:	4b25      	ldr	r3, [pc, #148]	; (1100 <swap_status_source+0xac>)
    106a:	4926      	ldr	r1, [pc, #152]	; (1104 <swap_status_source+0xb0>)
    106c:	2a03      	cmp	r2, #3
    106e:	bf18      	it	ne
    1070:	460b      	movne	r3, r1
    1072:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1076:	2149      	movs	r1, #73	; 0x49
    1078:	9202      	str	r2, [sp, #8]
    107a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    107e:	4822      	ldr	r0, [pc, #136]	; (1108 <swap_status_source+0xb4>)
    1080:	9201      	str	r2, [sp, #4]
    1082:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1086:	9200      	str	r2, [sp, #0]
    1088:	4a20      	ldr	r2, [pc, #128]	; (110c <swap_status_source+0xb8>)
    108a:	f004 fc88 	bl	599e <printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    108e:	2005      	movs	r0, #5
    1090:	a906      	add	r1, sp, #24
    1092:	f005 fb07 	bl	66a4 <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    1096:	f89d 2018 	ldrb.w	r2, [sp, #24]
    109a:	2a01      	cmp	r2, #1
    109c:	d028      	beq.n	10f0 <swap_status_source+0x9c>
    109e:	4b18      	ldr	r3, [pc, #96]	; (1100 <swap_status_source+0xac>)
    10a0:	4918      	ldr	r1, [pc, #96]	; (1104 <swap_status_source+0xb0>)
    10a2:	2a03      	cmp	r2, #3
    10a4:	bf18      	it	ne
    10a6:	460b      	movne	r3, r1
    10a8:	f89d 201b 	ldrb.w	r2, [sp, #27]
    10ac:	2149      	movs	r1, #73	; 0x49
    10ae:	9202      	str	r2, [sp, #8]
    10b0:	f89d 201a 	ldrb.w	r2, [sp, #26]
    10b4:	4814      	ldr	r0, [pc, #80]	; (1108 <swap_status_source+0xb4>)
    10b6:	9201      	str	r2, [sp, #4]
    10b8:	f89d 2019 	ldrb.w	r2, [sp, #25]
    10bc:	9200      	str	r2, [sp, #0]
    10be:	4a14      	ldr	r2, [pc, #80]	; (1110 <swap_status_source+0xbc>)
    10c0:	f004 fc6d 	bl	599e <printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    10c4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    10c8:	2b01      	cmp	r3, #1
    10ca:	d113      	bne.n	10f4 <swap_status_source+0xa0>
    10cc:	f89d 3012 	ldrb.w	r3, [sp, #18]
    10d0:	2b03      	cmp	r3, #3
    10d2:	d10f      	bne.n	10f4 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    10d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    10d8:	2b01      	cmp	r3, #1
    10da:	d00b      	beq.n	10f4 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    10dc:	480d      	ldr	r0, [pc, #52]	; (1114 <swap_status_source+0xc0>)
    10de:	2149      	movs	r1, #73	; 0x49
    10e0:	f004 fc5d 	bl	599e <printk>
        return source;
    10e4:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    10e6:	b009      	add	sp, #36	; 0x24
    10e8:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    10ec:	4b0a      	ldr	r3, [pc, #40]	; (1118 <swap_status_source+0xc4>)
    10ee:	e7c0      	b.n	1072 <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    10f0:	4b09      	ldr	r3, [pc, #36]	; (1118 <swap_status_source+0xc4>)
    10f2:	e7d9      	b.n	10a8 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    10f4:	4809      	ldr	r0, [pc, #36]	; (111c <swap_status_source+0xc8>)
    10f6:	2149      	movs	r1, #73	; 0x49
    10f8:	f004 fc51 	bl	599e <printk>
    return BOOT_STATUS_SOURCE_NONE;
    10fc:	2000      	movs	r0, #0
    10fe:	e7f2      	b.n	10e6 <swap_status_source+0x92>
    1100:	00008b82 	.word	0x00008b82
    1104:	00008b88 	.word	0x00008b88
    1108:	00008b9a 	.word	0x00008b9a
    110c:	00008b8c 	.word	0x00008b8c
    1110:	00008bdb 	.word	0x00008bdb
    1114:	00008beb 	.word	0x00008beb
    1118:	00008b7d 	.word	0x00008b7d
    111c:	00008c0a 	.word	0x00008c0a

00001120 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec, uint8_t sec_id)
{
    1120:	b570      	push	{r4, r5, r6, lr}
    1122:	4606      	mov	r6, r0
    1124:	4618      	mov	r0, r3
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1126:	684b      	ldr	r3, [r1, #4]
{
    1128:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    112a:	4a1d      	ldr	r2, [pc, #116]	; (11a0 <fixup_revert+0x80>)
    112c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1130:	4293      	cmp	r3, r2
{
    1132:	460d      	mov	r5, r1
    1134:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1136:	d12e      	bne.n	1196 <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    1138:	680b      	ldr	r3, [r1, #0]
    113a:	2b01      	cmp	r3, #1
    113c:	d12b      	bne.n	1196 <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state_by_id(sec_id, &swap_state);
    113e:	a904      	add	r1, sp, #16
    1140:	f005 fab0 	bl	66a4 <boot_read_swap_state_by_id>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1144:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1148:	2a01      	cmp	r2, #1
    114a:	d026      	beq.n	119a <fixup_revert+0x7a>
    114c:	4b15      	ldr	r3, [pc, #84]	; (11a4 <fixup_revert+0x84>)
    114e:	4916      	ldr	r1, [pc, #88]	; (11a8 <fixup_revert+0x88>)
    1150:	2a03      	cmp	r2, #3
    1152:	bf18      	it	ne
    1154:	460b      	movne	r3, r1
    1156:	f89d 2013 	ldrb.w	r2, [sp, #19]
    115a:	2149      	movs	r1, #73	; 0x49
    115c:	9202      	str	r2, [sp, #8]
    115e:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1162:	4812      	ldr	r0, [pc, #72]	; (11ac <fixup_revert+0x8c>)
    1164:	9201      	str	r2, [sp, #4]
    1166:	f89d 2011 	ldrb.w	r2, [sp, #17]
    116a:	9200      	str	r2, [sp, #0]
    116c:	4a10      	ldr	r2, [pc, #64]	; (11b0 <fixup_revert+0x90>)
    116e:	f004 fc16 	bl	599e <printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    1172:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1176:	2b03      	cmp	r3, #3
    1178:	d10d      	bne.n	1196 <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    117a:	4621      	mov	r1, r4
    117c:	4630      	mov	r0, r6
    117e:	f004 fb19 	bl	57b4 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    1182:	4620      	mov	r0, r4
    1184:	f005 fa7e 	bl	6684 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1188:	4620      	mov	r0, r4
    118a:	68a9      	ldr	r1, [r5, #8]
    118c:	f004 fa3a 	bl	5604 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    1190:	4620      	mov	r0, r4
    1192:	f002 f8fb 	bl	338c <boot_write_magic>
        assert(rc == 0);
    }
}
    1196:	b006      	add	sp, #24
    1198:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    119a:	4b06      	ldr	r3, [pc, #24]	; (11b4 <fixup_revert+0x94>)
    119c:	e7db      	b.n	1156 <fixup_revert+0x36>
    119e:	bf00      	nop
    11a0:	04000100 	.word	0x04000100
    11a4:	00008b82 	.word	0x00008b82
    11a8:	00008b88 	.word	0x00008b88
    11ac:	00008b9a 	.word	0x00008b9a
    11b0:	00008bdb 	.word	0x00008bdb
    11b4:	00008b7d 	.word	0x00008b7d

000011b8 <swap_run>:
    11b8:	6a43      	ldr	r3, [r0, #36]	; 0x24

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    11ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11be:	460c      	mov	r4, r1
    11c0:	685e      	ldr	r6, [r3, #4]
    11c2:	4605      	mov	r5, r0
    11c4:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    11c6:	2300      	movs	r3, #0
{
    11c8:	b08b      	sub	sp, #44	; 0x2c
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    11ca:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    11cc:	4293      	cmp	r3, r2
    11ce:	4608      	mov	r0, r1
    11d0:	f101 0101 	add.w	r1, r1, #1
    11d4:	d3f9      	bcc.n	11ca <swap_run+0x12>
    11d6:	4f73      	ldr	r7, [pc, #460]	; (13a4 <swap_run+0x1ec>)
    11d8:	6038      	str	r0, [r7, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    11da:	4620      	mov	r0, r4
    11dc:	f004 faa9 	bl	5732 <boot_status_is_reset>
    11e0:	9703      	str	r7, [sp, #12]
    11e2:	b1b8      	cbz	r0, 1214 <swap_run+0x5c>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    11e4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    11e6:	f004 f9e4 	bl	55b2 <boot_trailer_sz>
        sz = 0;
    11ea:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    11ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    11ee:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    11f0:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    11f2:	4290      	cmp	r0, r2
    11f4:	d901      	bls.n	11fa <swap_run+0x42>
                break;
            }
            first_trailer_idx--;
    11f6:	3b01      	subs	r3, #1
            sz += sector_sz;
    11f8:	e7fa      	b.n	11f0 <swap_run+0x38>
        }

        if (g_last_idx >= first_trailer_idx) {
    11fa:	9a03      	ldr	r2, [sp, #12]
    11fc:	6812      	ldr	r2, [r2, #0]
    11fe:	429a      	cmp	r2, r3
    1200:	d308      	bcc.n	1214 <swap_run+0x5c>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    1202:	2157      	movs	r1, #87	; 0x57
    1204:	4868      	ldr	r0, [pc, #416]	; (13a8 <swap_run+0x1f0>)
    1206:	f004 fbca 	bl	599e <printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    120a:	2301      	movs	r3, #1
    120c:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    120e:	b00b      	add	sp, #44	; 0x2c
    1210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1214:	a908      	add	r1, sp, #32
    1216:	2002      	movs	r0, #2
    1218:	f000 fbf0 	bl	19fc <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    121c:	a909      	add	r1, sp, #36	; 0x24
    121e:	2005      	movs	r0, #5
    1220:	f000 fbec 	bl	19fc <flash_area_open>
    fixup_revert(state, bs, fap_sec, FLASH_AREA_IMAGE_SECONDARY(image_index));
    1224:	2305      	movs	r3, #5
    1226:	4621      	mov	r1, r4
    1228:	4628      	mov	r0, r5
    122a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    122c:	f7ff ff78 	bl	1120 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1230:	7963      	ldrb	r3, [r4, #5]
    1232:	2b01      	cmp	r3, #1
    1234:	d108      	bne.n	1248 <swap_run+0x90>
        idx = g_last_idx;
    1236:	9b03      	ldr	r3, [sp, #12]
    BOOT_STATUS_ASSERT(rc == 0);
    1238:	f8df b170 	ldr.w	fp, [pc, #368]	; 13ac <swap_run+0x1f4>
        idx = g_last_idx;
    123c:	681f      	ldr	r7, [r3, #0]
        while (idx > 0) {
    123e:	9b03      	ldr	r3, [sp, #12]
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	b9a7      	cbnz	r7, 126e <swap_run+0xb6>
        bs->idx = BOOT_STATUS_IDX_0;
    1244:	2301      	movs	r3, #1
    1246:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1248:	2302      	movs	r3, #2
    idx = 1;
    124a:	2701      	movs	r7, #1
        BOOT_STATUS_ASSERT(rc == 0);
    124c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 13ac <swap_run+0x1f4>
    bs->op = BOOT_STATUS_OP_SWAP;
    1250:	7163      	strb	r3, [r4, #5]
        bs->state = BOOT_STATUS_STATE_1;
    1252:	9306      	str	r3, [sp, #24]
    while (idx <= g_last_idx) {
    1254:	9b03      	ldr	r3, [sp, #12]
    1256:	f8dd 9020 	ldr.w	r9, [sp, #32]
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	429f      	cmp	r7, r3
    125e:	d94a      	bls.n	12f6 <swap_run+0x13e>
    flash_area_close(fap_pri);
    1260:	4648      	mov	r0, r9
    1262:	f004 fdb5 	bl	5dd0 <flash_area_close>
    flash_area_close(fap_sec);
    1266:	9809      	ldr	r0, [sp, #36]	; 0x24
    1268:	f004 fdb2 	bl	5dd0 <flash_area_close>
    126c:	e7cf      	b.n	120e <swap_run+0x56>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    126e:	6822      	ldr	r2, [r4, #0]
    1270:	3301      	adds	r3, #1
    1272:	1a9b      	subs	r3, r3, r2
    1274:	429f      	cmp	r7, r3
    1276:	d83c      	bhi.n	12f2 <swap_run+0x13a>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1278:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    127a:	2a01      	cmp	r2, #1
           BOOT_IMG(state, slot).sectors[0].fs_off;
    127c:	6819      	ldr	r1, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    127e:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    1282:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    1286:	f853 3c08 	ldr.w	r3, [r3, #-8]
    128a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    128e:	eba0 0901 	sub.w	r9, r0, r1
    1292:	eba3 0a01 	sub.w	sl, r3, r1
    1296:	d112      	bne.n	12be <swap_run+0x106>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    1298:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    129a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    129c:	2a02      	cmp	r2, #2
    129e:	d00a      	beq.n	12b6 <swap_run+0xfe>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    12a0:	4641      	mov	r1, r8
    12a2:	4628      	mov	r0, r5
    12a4:	9304      	str	r3, [sp, #16]
    12a6:	f004 fa85 	bl	57b4 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    12aa:	4622      	mov	r2, r4
    12ac:	4641      	mov	r1, r8
    12ae:	4628      	mov	r0, r5
    12b0:	f004 fab5 	bl	581e <swap_status_init>
    12b4:	9b04      	ldr	r3, [sp, #16]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    12b6:	4619      	mov	r1, r3
    12b8:	4628      	mov	r0, r5
    12ba:	f004 fa7b 	bl	57b4 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    12be:	4632      	mov	r2, r6
    12c0:	4649      	mov	r1, r9
    12c2:	4640      	mov	r0, r8
    12c4:	f004 fa74 	bl	57b0 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    12c8:	4653      	mov	r3, sl
    12ca:	4642      	mov	r2, r8
    12cc:	4641      	mov	r1, r8
    12ce:	4628      	mov	r0, r5
    12d0:	e9cd 9600 	strd	r9, r6, [sp]
    12d4:	f7ff fc54 	bl	b80 <boot_copy_region>
    rc = boot_write_status(state, bs);
    12d8:	4621      	mov	r1, r4
    12da:	4628      	mov	r0, r5
    12dc:	f004 fa36 	bl	574c <boot_write_status>
    bs->idx++;
    12e0:	6823      	ldr	r3, [r4, #0]
    12e2:	3301      	adds	r3, #1
    12e4:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    12e6:	b120      	cbz	r0, 12f2 <swap_run+0x13a>
    12e8:	f8db 3000 	ldr.w	r3, [fp]
    12ec:	3301      	adds	r3, #1
    12ee:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    12f2:	3f01      	subs	r7, #1
    12f4:	e7a3      	b.n	123e <swap_run+0x86>
        if (idx >= bs->idx) {
    12f6:	6823      	ldr	r3, [r4, #0]
    12f8:	429f      	cmp	r7, r3
    12fa:	d350      	bcc.n	139e <swap_run+0x1e6>
    12fc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12fe:	00fb      	lsls	r3, r7, #3
    1300:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
    1304:	3b08      	subs	r3, #8
    1306:	9105      	str	r1, [sp, #20]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    1308:	6811      	ldr	r1, [r2, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    130a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    130e:	9104      	str	r1, [sp, #16]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1310:	6d29      	ldr	r1, [r5, #80]	; 0x50
    1312:	58c8      	ldr	r0, [r1, r3]
    1314:	6809      	ldr	r1, [r1, #0]
    1316:	eba0 0b01 	sub.w	fp, r0, r1
    if (bs->state == BOOT_STATUS_STATE_0) {
    131a:	7921      	ldrb	r1, [r4, #4]
    131c:	2901      	cmp	r1, #1
    131e:	d13c      	bne.n	139a <swap_run+0x1e2>
    1320:	58d1      	ldr	r1, [r2, r3]
    1322:	9b04      	ldr	r3, [sp, #16]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1324:	4632      	mov	r2, r6
    1326:	1ac9      	subs	r1, r1, r3
    1328:	4648      	mov	r0, r9
    132a:	9107      	str	r1, [sp, #28]
    132c:	f004 fa40 	bl	57b0 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    1330:	9907      	ldr	r1, [sp, #28]
    1332:	465b      	mov	r3, fp
    1334:	464a      	mov	r2, r9
    1336:	9100      	str	r1, [sp, #0]
    1338:	4628      	mov	r0, r5
    133a:	4651      	mov	r1, sl
    133c:	9601      	str	r6, [sp, #4]
    133e:	f7ff fc1f 	bl	b80 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1342:	4621      	mov	r1, r4
    1344:	4628      	mov	r0, r5
    1346:	f004 fa01 	bl	574c <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    134a:	9b06      	ldr	r3, [sp, #24]
    134c:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    134e:	b120      	cbz	r0, 135a <swap_run+0x1a2>
    1350:	f8d8 3000 	ldr.w	r3, [r8]
    1354:	3301      	adds	r3, #1
    1356:	f8c8 3000 	str.w	r3, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    135a:	4632      	mov	r2, r6
    135c:	4659      	mov	r1, fp
    135e:	4650      	mov	r0, sl
    1360:	f004 fa26 	bl	57b0 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1368:	4649      	mov	r1, r9
    136a:	1a9b      	subs	r3, r3, r2
    136c:	4628      	mov	r0, r5
    136e:	4652      	mov	r2, sl
    1370:	e9cd b600 	strd	fp, r6, [sp]
    1374:	f7ff fc04 	bl	b80 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1378:	4621      	mov	r1, r4
    137a:	4628      	mov	r0, r5
    137c:	f004 f9e6 	bl	574c <boot_write_status>
        bs->idx++;
    1380:	6823      	ldr	r3, [r4, #0]
    1382:	3301      	adds	r3, #1
    1384:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1386:	f04f 0301 	mov.w	r3, #1
    138a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    138c:	b138      	cbz	r0, 139e <swap_run+0x1e6>
    138e:	f8d8 3000 	ldr.w	r3, [r8]
    1392:	3301      	adds	r3, #1
    1394:	f8c8 3000 	str.w	r3, [r8]
    1398:	e001      	b.n	139e <swap_run+0x1e6>
    if (bs->state == BOOT_STATUS_STATE_1) {
    139a:	2902      	cmp	r1, #2
    139c:	d0dd      	beq.n	135a <swap_run+0x1a2>
        idx++;
    139e:	3701      	adds	r7, #1
    13a0:	e758      	b.n	1254 <swap_run+0x9c>
    13a2:	bf00      	nop
    13a4:	20000004 	.word	0x20000004
    13a8:	00008c21 	.word	0x00008c21
    13ac:	20000a90 	.word	0x20000a90

000013b0 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13b0:	2201      	movs	r2, #1
    13b2:	4b12      	ldr	r3, [pc, #72]	; (13fc <nrf_cleanup_peripheral+0x4c>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    13b4:	4912      	ldr	r1, [pc, #72]	; (1400 <nrf_cleanup_peripheral+0x50>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13b6:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    13b8:	f04f 33ff 	mov.w	r3, #4294967295
    13bc:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    p_reg->INTENCLR = mask;
    13c0:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13c4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    13c8:	604a      	str	r2, [r1, #4]
    13ca:	3104      	adds	r1, #4
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    13cc:	2100      	movs	r1, #0
    p_reg->EVTENCLR = mask;
    13ce:	4a0d      	ldr	r2, [pc, #52]	; (1404 <nrf_cleanup_peripheral+0x54>)
    13d0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    13d4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    13d8:	f5a2 4250 	sub.w	r2, r2, #53248	; 0xd000
    13dc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    13e0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    13e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    13e8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    13ec:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    13f0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    13f4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
}
    13f8:	4770      	bx	lr
    13fa:	bf00      	nop
    13fc:	50014004 	.word	0x50014004
    1400:	50014000 	.word	0x50014000
    1404:	50015000 	.word	0x50015000

00001408 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1408:	680b      	ldr	r3, [r1, #0]
    140a:	3301      	adds	r3, #1
    140c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    140e:	4b01      	ldr	r3, [pc, #4]	; (1414 <char_out+0xc>)
    1410:	681b      	ldr	r3, [r3, #0]
    1412:	4718      	bx	r3
    1414:	20000008 	.word	0x20000008

00001418 <__printk_hook_install>:
	_char_out = fn;
    1418:	4b01      	ldr	r3, [pc, #4]	; (1420 <__printk_hook_install+0x8>)
    141a:	6018      	str	r0, [r3, #0]
}
    141c:	4770      	bx	lr
    141e:	bf00      	nop
    1420:	20000008 	.word	0x20000008

00001424 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1424:	b507      	push	{r0, r1, r2, lr}
    1426:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1428:	2100      	movs	r1, #0
{
    142a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    142c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    142e:	4803      	ldr	r0, [pc, #12]	; (143c <vprintk+0x18>)
    1430:	a901      	add	r1, sp, #4
    1432:	f000 f8eb 	bl	160c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1436:	b003      	add	sp, #12
    1438:	f85d fb04 	ldr.w	pc, [sp], #4
    143c:	00001409 	.word	0x00001409

00001440 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1444:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    1448:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    144a:	f019 0808 	ands.w	r8, r9, #8
{
    144e:	4693      	mov	fp, r2
	if (processing) {
    1450:	d00d      	beq.n	146e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1452:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1454:	bf0c      	ite	eq
    1456:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    145a:	f049 0920 	orrne.w	r9, r9, #32
    145e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1462:	f38b 8811 	msr	BASEPRI, fp
    1466:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    146a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    146e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1472:	2902      	cmp	r1, #2
    1474:	d107      	bne.n	1486 <process_event+0x46>
			evt = process_recheck(mgr);
    1476:	4620      	mov	r0, r4
    1478:	f004 fa9e 	bl	59b8 <process_recheck>
		if (evt == EVT_NOP) {
    147c:	2800      	cmp	r0, #0
    147e:	d0f0      	beq.n	1462 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1480:	2801      	cmp	r0, #1
    1482:	8b23      	ldrh	r3, [r4, #24]
    1484:	d150      	bne.n	1528 <process_event+0xe8>
			res = mgr->last_res;
    1486:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1488:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    148a:	2f00      	cmp	r7, #0
    148c:	da15      	bge.n	14ba <process_event+0x7a>
		*clients = mgr->clients;
    148e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1490:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1494:	e9c4 8800 	strd	r8, r8, [r4]
    1498:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    149c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    149e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14a0:	8b21      	ldrh	r1, [r4, #24]
    14a2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    14a6:	45ca      	cmp	sl, r9
    14a8:	d002      	beq.n	14b0 <process_event+0x70>
		if (do_monitors
    14aa:	68a3      	ldr	r3, [r4, #8]
    14ac:	2b00      	cmp	r3, #0
    14ae:	d15c      	bne.n	156a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    14b0:	b90d      	cbnz	r5, 14b6 <process_event+0x76>
		    || (transit != NULL)) {
    14b2:	2e00      	cmp	r6, #0
    14b4:	d074      	beq.n	15a0 <process_event+0x160>
    14b6:	2300      	movs	r3, #0
    14b8:	e058      	b.n	156c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14ba:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    14be:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    14c0:	2a01      	cmp	r2, #1
    14c2:	d820      	bhi.n	1506 <process_event+0xc6>
		*clients = mgr->clients;
    14c4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    14c8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    14ca:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    14cc:	b289      	uxth	r1, r1
	list->tail = NULL;
    14ce:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    14d2:	d10c      	bne.n	14ee <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    14d4:	2d00      	cmp	r5, #0
    14d6:	462b      	mov	r3, r5
    14d8:	bf38      	it	cc
    14da:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    14dc:	b12b      	cbz	r3, 14ea <process_event+0xaa>
				mgr->refs += 1U;
    14de:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    14e0:	681b      	ldr	r3, [r3, #0]
    14e2:	3201      	adds	r2, #1
    14e4:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    14e6:	2b00      	cmp	r3, #0
    14e8:	d1f8      	bne.n	14dc <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14ea:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    14ee:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    14f0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14f2:	f004 fa61 	bl	59b8 <process_recheck>
    14f6:	4606      	mov	r6, r0
    14f8:	2800      	cmp	r0, #0
    14fa:	d0d1      	beq.n	14a0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14fc:	8b23      	ldrh	r3, [r4, #24]
    14fe:	f043 0320 	orr.w	r3, r3, #32
    1502:	8323      	strh	r3, [r4, #24]
    1504:	e7cb      	b.n	149e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1506:	2b04      	cmp	r3, #4
    1508:	d10c      	bne.n	1524 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    150a:	f021 0107 	bic.w	r1, r1, #7
    150e:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    1510:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1512:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1514:	f004 fa50 	bl	59b8 <process_recheck>
    1518:	4605      	mov	r5, r0
    151a:	2800      	cmp	r0, #0
    151c:	d0bf      	beq.n	149e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    151e:	f041 0120 	orr.w	r1, r1, #32
    1522:	8321      	strh	r1, [r4, #24]
    1524:	2500      	movs	r5, #0
    1526:	e7ba      	b.n	149e <process_event+0x5e>
		} else if (evt == EVT_START) {
    1528:	2803      	cmp	r0, #3
    152a:	d109      	bne.n	1540 <process_event+0x100>
			transit = mgr->transitions->start;
    152c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    152e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1532:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1534:	f043 0306 	orr.w	r3, r3, #6
}
    1538:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    153a:	8323      	strh	r3, [r4, #24]
		res = 0;
    153c:	462f      	mov	r7, r5
    153e:	e7af      	b.n	14a0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1540:	2804      	cmp	r0, #4
    1542:	d106      	bne.n	1552 <process_event+0x112>
			transit = mgr->transitions->stop;
    1544:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1546:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    154a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    154c:	f043 0304 	orr.w	r3, r3, #4
    1550:	e7f2      	b.n	1538 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    1552:	2805      	cmp	r0, #5
    1554:	d106      	bne.n	1564 <process_event+0x124>
			transit = mgr->transitions->reset;
    1556:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1558:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    155c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    155e:	f043 0305 	orr.w	r3, r3, #5
    1562:	e7e9      	b.n	1538 <process_event+0xf8>
    1564:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1566:	462e      	mov	r6, r5
    1568:	e7e8      	b.n	153c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    156a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    156c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1570:	8321      	strh	r1, [r4, #24]
    1572:	f38b 8811 	msr	BASEPRI, fp
    1576:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    157a:	bb03      	cbnz	r3, 15be <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    157c:	2d00      	cmp	r5, #0
    157e:	d133      	bne.n	15e8 <process_event+0x1a8>
			if (transit != NULL) {
    1580:	b116      	cbz	r6, 1588 <process_event+0x148>
				transit(mgr, transition_complete);
    1582:	4620      	mov	r0, r4
    1584:	4920      	ldr	r1, [pc, #128]	; (1608 <process_event+0x1c8>)
    1586:	47b0      	blx	r6
	__asm__ volatile(
    1588:	f04f 0320 	mov.w	r3, #32
    158c:	f3ef 8b11 	mrs	fp, BASEPRI
    1590:	f383 8811 	msr	BASEPRI, r3
    1594:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1598:	8b23      	ldrh	r3, [r4, #24]
    159a:	f023 0308 	bic.w	r3, r3, #8
    159e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    15a0:	8b23      	ldrh	r3, [r4, #24]
    15a2:	06da      	lsls	r2, r3, #27
    15a4:	d528      	bpl.n	15f8 <process_event+0x1b8>
			evt = EVT_COMPLETE;
    15a6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    15a8:	f023 0310 	bic.w	r3, r3, #16
    15ac:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    15ae:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    15b2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    15b6:	2900      	cmp	r1, #0
    15b8:	f47f af5b 	bne.w	1472 <process_event+0x32>
out:
    15bc:	e751      	b.n	1462 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15be:	68a1      	ldr	r1, [r4, #8]
    15c0:	2900      	cmp	r1, #0
    15c2:	d0db      	beq.n	157c <process_event+0x13c>
	return node->next;
    15c4:	680b      	ldr	r3, [r1, #0]
    15c6:	2b00      	cmp	r3, #0
    15c8:	bf38      	it	cc
    15ca:	2300      	movcc	r3, #0
    15cc:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    15ce:	4652      	mov	r2, sl
    15d0:	463b      	mov	r3, r7
    15d2:	4620      	mov	r0, r4
    15d4:	f8d1 b004 	ldr.w	fp, [r1, #4]
    15d8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15da:	f1b9 0f00 	cmp.w	r9, #0
    15de:	d0cd      	beq.n	157c <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    15e0:	4649      	mov	r1, r9
    15e2:	f8d9 3000 	ldr.w	r3, [r9]
    15e6:	e7ee      	b.n	15c6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    15e8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    15ea:	463b      	mov	r3, r7
    15ec:	4652      	mov	r2, sl
    15ee:	4620      	mov	r0, r4
    15f0:	682d      	ldr	r5, [r5, #0]
    15f2:	f004 f9fd 	bl	59f0 <notify_one>
    15f6:	e7c1      	b.n	157c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    15f8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15fc:	bf1e      	ittt	ne
    15fe:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    1602:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1604:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1606:	e7d2      	b.n	15ae <process_event+0x16e>
    1608:	00005a1d 	.word	0x00005a1d

0000160c <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t count = 0;
    1610:	2400      	movs	r4, #0
{
    1612:	4606      	mov	r6, r0
    1614:	468b      	mov	fp, r1
    1616:	469a      	mov	sl, r3
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int padlen, min_width = -1;
    1618:	f04f 35ff 	mov.w	r5, #4294967295
	enum pad_type padding = PAD_NONE;
    161c:	4627      	mov	r7, r4
{
    161e:	b08d      	sub	sp, #52	; 0x34
	size_t count = 0;
    1620:	940b      	str	r4, [sp, #44]	; 0x2c
	char length_mod = 0;

	/* fmt has already been adjusted if needed */
	while (*fmt) {
    1622:	f102 39ff 	add.w	r9, r2, #4294967295
			default:
				OUTC('%');
				OUTC(*fmt);
				break;
			}
			might_format = 0;
    1626:	f04f 0800 	mov.w	r8, #0
		}
still_might_format:
		++fmt;
    162a:	e00a      	b.n	1642 <cbvprintf+0x36>
		if (!might_format) {
    162c:	f1b8 0f00 	cmp.w	r8, #0
    1630:	d10f      	bne.n	1652 <cbvprintf+0x46>
			if (*fmt != '%') {
    1632:	2825      	cmp	r0, #37	; 0x25
    1634:	f000 813a 	beq.w	18ac <cbvprintf+0x2a0>
				OUTC(*fmt);
    1638:	4659      	mov	r1, fp
    163a:	47b0      	blx	r6
    163c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    163e:	3201      	adds	r2, #1
    1640:	920b      	str	r2, [sp, #44]	; 0x2c
	while (*fmt) {
    1642:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    1646:	2800      	cmp	r0, #0
    1648:	d1f0      	bne.n	162c <cbvprintf+0x20>
	}

	return count;
}
    164a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    164c:	b00d      	add	sp, #52	; 0x34
    164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    1652:	287a      	cmp	r0, #122	; 0x7a
    1654:	d80a      	bhi.n	166c <cbvprintf+0x60>
    1656:	2862      	cmp	r0, #98	; 0x62
    1658:	d812      	bhi.n	1680 <cbvprintf+0x74>
    165a:	2830      	cmp	r0, #48	; 0x30
    165c:	d053      	beq.n	1706 <cbvprintf+0xfa>
    165e:	d847      	bhi.n	16f0 <cbvprintf+0xe4>
    1660:	2825      	cmp	r0, #37	; 0x25
    1662:	f000 811d 	beq.w	18a0 <cbvprintf+0x294>
    1666:	282d      	cmp	r0, #45	; 0x2d
    1668:	f000 8127 	beq.w	18ba <cbvprintf+0x2ae>
				OUTC('%');
    166c:	4659      	mov	r1, fp
    166e:	2025      	movs	r0, #37	; 0x25
    1670:	47b0      	blx	r6
    1672:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				OUTC(*fmt);
    1674:	4659      	mov	r1, fp
				OUTC('%');
    1676:	3201      	adds	r2, #1
				OUTC(*fmt);
    1678:	f899 0000 	ldrb.w	r0, [r9]
				OUTC('%');
    167c:	920b      	str	r2, [sp, #44]	; 0x2c
				OUTC(*fmt);
    167e:	e110      	b.n	18a2 <cbvprintf+0x296>
    1680:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
    1684:	2a17      	cmp	r2, #23
    1686:	d8f1      	bhi.n	166c <cbvprintf+0x60>
    1688:	a301      	add	r3, pc, #4	; (adr r3, 1690 <cbvprintf+0x84>)
    168a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    168e:	bf00      	nop
    1690:	00001891 	.word	0x00001891
    1694:	00001743 	.word	0x00001743
    1698:	0000166d 	.word	0x0000166d
    169c:	0000166d 	.word	0x0000166d
    16a0:	0000166d 	.word	0x0000166d
    16a4:	00001725 	.word	0x00001725
    16a8:	00001743 	.word	0x00001743
    16ac:	0000166d 	.word	0x0000166d
    16b0:	0000166d 	.word	0x0000166d
    16b4:	00001725 	.word	0x00001725
    16b8:	0000166d 	.word	0x0000166d
    16bc:	0000166d 	.word	0x0000166d
    16c0:	0000166d 	.word	0x0000166d
    16c4:	000017cd 	.word	0x000017cd
    16c8:	0000166d 	.word	0x0000166d
    16cc:	0000166d 	.word	0x0000166d
    16d0:	0000186b 	.word	0x0000186b
    16d4:	0000166d 	.word	0x0000166d
    16d8:	00001743 	.word	0x00001743
    16dc:	0000166d 	.word	0x0000166d
    16e0:	0000166d 	.word	0x0000166d
    16e4:	000017cd 	.word	0x000017cd
    16e8:	0000166d 	.word	0x0000166d
    16ec:	00001725 	.word	0x00001725
			switch (*fmt) {
    16f0:	2839      	cmp	r0, #57	; 0x39
    16f2:	d90d      	bls.n	1710 <cbvprintf+0x104>
    16f4:	2858      	cmp	r0, #88	; 0x58
    16f6:	d1b9      	bne.n	166c <cbvprintf+0x60>
				} else if (length_mod == 'l') {
    16f8:	2c6c      	cmp	r4, #108	; 0x6c
    16fa:	f040 80aa 	bne.w	1852 <cbvprintf+0x246>
					x = va_arg(ap, unsigned int);
    16fe:	2300      	movs	r3, #0
    1700:	f85a 2b04 	ldr.w	r2, [sl], #4
    1704:	e091      	b.n	182a <cbvprintf+0x21e>
				if (min_width < 0 && padding == PAD_NONE) {
    1706:	2d00      	cmp	r5, #0
    1708:	da02      	bge.n	1710 <cbvprintf+0x104>
    170a:	2f00      	cmp	r7, #0
    170c:	f000 80d7 	beq.w	18be <cbvprintf+0x2b2>
				min_width = 10 * min_width + *fmt - '0';
    1710:	220a      	movs	r2, #10
    1712:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    1716:	fb02 0505 	mla	r5, r2, r5, r0
					padding = PAD_SPACE_BEFORE;
    171a:	2f00      	cmp	r7, #0
    171c:	bf08      	it	eq
    171e:	2702      	moveq	r7, #2
				min_width = 10 * min_width + *fmt - '0';
    1720:	3d30      	subs	r5, #48	; 0x30
				if (padding == PAD_NONE) {
    1722:	e78e      	b.n	1642 <cbvprintf+0x36>
				if (*fmt == 'h' && length_mod == 'h') {
    1724:	2868      	cmp	r0, #104	; 0x68
    1726:	d103      	bne.n	1730 <cbvprintf+0x124>
    1728:	2c68      	cmp	r4, #104	; 0x68
    172a:	d106      	bne.n	173a <cbvprintf+0x12e>
					length_mod = 'H';
    172c:	2448      	movs	r4, #72	; 0x48
    172e:	e788      	b.n	1642 <cbvprintf+0x36>
				} else if (*fmt == 'l' && length_mod == 'l') {
    1730:	286c      	cmp	r0, #108	; 0x6c
    1732:	d102      	bne.n	173a <cbvprintf+0x12e>
    1734:	2c6c      	cmp	r4, #108	; 0x6c
    1736:	f000 80c4 	beq.w	18c2 <cbvprintf+0x2b6>
				} else if (length_mod == 0) {
    173a:	2c00      	cmp	r4, #0
    173c:	d196      	bne.n	166c <cbvprintf+0x60>
    173e:	4604      	mov	r4, r0
    1740:	e77f      	b.n	1642 <cbvprintf+0x36>
				if (length_mod == 'z') {
    1742:	2c7a      	cmp	r4, #122	; 0x7a
    1744:	d106      	bne.n	1754 <cbvprintf+0x148>
					d = va_arg(ap, long);
    1746:	46d0      	mov	r8, sl
    1748:	f858 2b04 	ldr.w	r2, [r8], #4
    174c:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    174e:	2875      	cmp	r0, #117	; 0x75
    1750:	d128      	bne.n	17a4 <cbvprintf+0x198>
    1752:	e011      	b.n	1778 <cbvprintf+0x16c>
				} else if (length_mod == 'l') {
    1754:	2c6c      	cmp	r4, #108	; 0x6c
    1756:	d0f6      	beq.n	1746 <cbvprintf+0x13a>
				} else if (length_mod == 'L') {
    1758:	2c4c      	cmp	r4, #76	; 0x4c
    175a:	d106      	bne.n	176a <cbvprintf+0x15e>
					long long lld = va_arg(ap,
    175c:	f10a 0307 	add.w	r3, sl, #7
    1760:	f023 0807 	bic.w	r8, r3, #7
					d = (uint_value_type) lld;
    1764:	e8f8 2302 	ldrd	r2, r3, [r8], #8
    1768:	e7f1      	b.n	174e <cbvprintf+0x142>
				} else if (*fmt == 'u') {
    176a:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
    176c:	f8da 2000 	ldr.w	r2, [sl]
    1770:	f10a 0804 	add.w	r8, sl, #4
				} else if (*fmt == 'u') {
    1774:	d115      	bne.n	17a2 <cbvprintf+0x196>
					d = va_arg(ap, unsigned int);
    1776:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10U, padding != PAD_SPACE_AFTER,
    1778:	1ef8      	subs	r0, r7, #3
    177a:	bf18      	it	ne
    177c:	2001      	movne	r0, #1
    177e:	2f01      	cmp	r7, #1
    1780:	bf0c      	ite	eq
    1782:	2130      	moveq	r1, #48	; 0x30
    1784:	2120      	movne	r1, #32
    1786:	e9cd 0101 	strd	r0, r1, [sp, #4]
    178a:	200a      	movs	r0, #10
    178c:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
    1790:	9000      	str	r0, [sp, #0]
    1792:	4659      	mov	r1, fp
    1794:	4630      	mov	r0, r6
    1796:	e9cd 5e03 	strd	r5, lr, [sp, #12]
    179a:	f004 fa94 	bl	5cc6 <print_digits>
}
    179e:	46c2      	mov	sl, r8
    17a0:	e741      	b.n	1626 <cbvprintf+0x1a>
					d = va_arg(ap, int);
    17a2:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    17a4:	2a00      	cmp	r2, #0
    17a6:	f173 0100 	sbcs.w	r1, r3, #0
    17aa:	dae5      	bge.n	1778 <cbvprintf+0x16c>
					OUTC('-');
    17ac:	4659      	mov	r1, fp
    17ae:	202d      	movs	r0, #45	; 0x2d
    17b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    17b4:	47b0      	blx	r6
					d = -d;
    17b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
					OUTC('-');
    17ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
					d = -d;
    17bc:	4252      	negs	r2, r2
					OUTC('-');
    17be:	f100 0001 	add.w	r0, r0, #1
    17c2:	900b      	str	r0, [sp, #44]	; 0x2c
					d = -d;
    17c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    17c8:	3d01      	subs	r5, #1
    17ca:	e7d5      	b.n	1778 <cbvprintf+0x16c>
				if (*fmt == 'p') {
    17cc:	2870      	cmp	r0, #112	; 0x70
    17ce:	d193      	bne.n	16f8 <cbvprintf+0xec>
					x = (uintptr_t)va_arg(ap, void *);
    17d0:	f85a 8b04 	ldr.w	r8, [sl], #4
						cp = "0x";
    17d4:	4b3c      	ldr	r3, [pc, #240]	; (18c8 <cbvprintf+0x2bc>)
    17d6:	4a3d      	ldr	r2, [pc, #244]	; (18cc <cbvprintf+0x2c0>)
    17d8:	f1b8 0f00 	cmp.w	r8, #0
    17dc:	bf18      	it	ne
    17de:	4613      	movne	r3, r2
						OUTC(*cp++);
    17e0:	f813 0b01 	ldrb.w	r0, [r3], #1
    17e4:	4659      	mov	r1, fp
    17e6:	9306      	str	r3, [sp, #24]
    17e8:	9309      	str	r3, [sp, #36]	; 0x24
    17ea:	47b0      	blx	r6
    17ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
					} while (*cp);
    17ee:	9b06      	ldr	r3, [sp, #24]
						OUTC(*cp++);
    17f0:	3001      	adds	r0, #1
    17f2:	900b      	str	r0, [sp, #44]	; 0x2c
					} while (*cp);
    17f4:	7818      	ldrb	r0, [r3, #0]
    17f6:	2800      	cmp	r0, #0
    17f8:	d1f2      	bne.n	17e0 <cbvprintf+0x1d4>
					if (x == 0) {
    17fa:	f1b8 0f00 	cmp.w	r8, #0
    17fe:	d111      	bne.n	1824 <cbvprintf+0x218>
						padlen = min_width - 5;
    1800:	1f6a      	subs	r2, r5, #5
				if (padding == PAD_SPACE_AFTER) {
    1802:	2f03      	cmp	r7, #3
    1804:	f47f af0f 	bne.w	1626 <cbvprintf+0x1a>
    1808:	4690      	mov	r8, r2
					while (padlen-- > 0) {
    180a:	f1b8 0f00 	cmp.w	r8, #0
    180e:	f77f af0a 	ble.w	1626 <cbvprintf+0x1a>
						OUTC(' ');
    1812:	4659      	mov	r1, fp
    1814:	2020      	movs	r0, #32
    1816:	47b0      	blx	r6
    1818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    181a:	f108 38ff 	add.w	r8, r8, #4294967295
    181e:	3201      	adds	r2, #1
    1820:	920b      	str	r2, [sp, #44]	; 0x2c
    1822:	e7f2      	b.n	180a <cbvprintf+0x1fe>
					x = (uintptr_t)va_arg(ap, void *);
    1824:	4642      	mov	r2, r8
    1826:	4603      	mov	r3, r0
					min_width -= 2;
    1828:	3d02      	subs	r5, #2
	print_digits(out, ctx, num, 16U, padding != PAD_SPACE_AFTER,
    182a:	1ef8      	subs	r0, r7, #3
    182c:	bf18      	it	ne
    182e:	2001      	movne	r0, #1
    1830:	2f01      	cmp	r7, #1
    1832:	bf0c      	ite	eq
    1834:	2130      	moveq	r1, #48	; 0x30
    1836:	2120      	movne	r1, #32
    1838:	e9cd 0101 	strd	r0, r1, [sp, #4]
    183c:	2010      	movs	r0, #16
    183e:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
    1842:	9000      	str	r0, [sp, #0]
    1844:	4659      	mov	r1, fp
    1846:	4630      	mov	r0, r6
    1848:	e9cd 5e03 	strd	r5, lr, [sp, #12]
    184c:	f004 fa3b 	bl	5cc6 <print_digits>
    1850:	e6e9      	b.n	1626 <cbvprintf+0x1a>
				} else if (length_mod == 'L') {
    1852:	2c4c      	cmp	r4, #76	; 0x4c
    1854:	f47f af53 	bne.w	16fe <cbvprintf+0xf2>
					x = va_arg(ap, unsigned long long);
    1858:	f10a 0307 	add.w	r3, sl, #7
    185c:	f023 0307 	bic.w	r3, r3, #7
    1860:	469a      	mov	sl, r3
    1862:	685b      	ldr	r3, [r3, #4]
    1864:	f85a 2b08 	ldr.w	r2, [sl], #8
    1868:	e7df      	b.n	182a <cbvprintf+0x21e>
				char *s = va_arg(ap, char *);
    186a:	f85a 8b04 	ldr.w	r8, [sl], #4
				while (*s) {
    186e:	4643      	mov	r3, r8
    1870:	469c      	mov	ip, r3
    1872:	f813 0b01 	ldrb.w	r0, [r3], #1
    1876:	b918      	cbnz	r0, 1880 <cbvprintf+0x274>
				padlen = min_width - (s - start);
    1878:	ebac 0208 	sub.w	r2, ip, r8
    187c:	1aaa      	subs	r2, r5, r2
    187e:	e7c0      	b.n	1802 <cbvprintf+0x1f6>
					OUTC(*s++);
    1880:	4659      	mov	r1, fp
    1882:	9306      	str	r3, [sp, #24]
    1884:	47b0      	blx	r6
    1886:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1888:	9b06      	ldr	r3, [sp, #24]
    188a:	3001      	adds	r0, #1
    188c:	900b      	str	r0, [sp, #44]	; 0x2c
    188e:	e7ef      	b.n	1870 <cbvprintf+0x264>
				OUTC(c);
    1890:	4659      	mov	r1, fp
    1892:	f85a 0b04 	ldr.w	r0, [sl], #4
    1896:	47b0      	blx	r6
    1898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    189a:	3301      	adds	r3, #1
    189c:	930b      	str	r3, [sp, #44]	; 0x2c
    189e:	e6c2      	b.n	1626 <cbvprintf+0x1a>
				OUTC('%');
    18a0:	4659      	mov	r1, fp
				OUTC(*fmt);
    18a2:	47b0      	blx	r6
    18a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    18a6:	3201      	adds	r2, #1
    18a8:	920b      	str	r2, [sp, #44]	; 0x2c
    18aa:	e6bc      	b.n	1626 <cbvprintf+0x1a>
				length_mod = 0;
    18ac:	4644      	mov	r4, r8
				padding = PAD_NONE;
    18ae:	4647      	mov	r7, r8
				min_width = -1;
    18b0:	f04f 35ff 	mov.w	r5, #4294967295
				might_format = 1;
    18b4:	f04f 0801 	mov.w	r8, #1
    18b8:	e6c3      	b.n	1642 <cbvprintf+0x36>
			switch (*fmt) {
    18ba:	2703      	movs	r7, #3
    18bc:	e6c1      	b.n	1642 <cbvprintf+0x36>
					padding = PAD_ZERO_BEFORE;
    18be:	2701      	movs	r7, #1
    18c0:	e6bf      	b.n	1642 <cbvprintf+0x36>
					length_mod = 'L';
    18c2:	244c      	movs	r4, #76	; 0x4c
    18c4:	e6bd      	b.n	1642 <cbvprintf+0x36>
    18c6:	bf00      	nop
    18c8:	00008d5e 	.word	0x00008d5e
    18cc:	00008d64 	.word	0x00008d64

000018d0 <check_erratum19>:
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE) && \
	!defined(CONFIG_NRF5340_CPUAPP_ERRATUM19)

static int check_erratum19(const struct device *arg)
{
    18d0:	b508      	push	{r3, lr}
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    18d2:	4b10      	ldr	r3, [pc, #64]	; (1914 <check_erratum19+0x44>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    18d4:	681b      	ldr	r3, [r3, #0]
    18d6:	2b07      	cmp	r3, #7
    18d8:	d119      	bne.n	190e <check_erratum19+0x3e>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    18da:	4b0f      	ldr	r3, [pc, #60]	; (1918 <check_erratum19+0x48>)
    18dc:	681b      	ldr	r3, [r3, #0]
    18de:	3b02      	subs	r3, #2
    18e0:	2b03      	cmp	r3, #3
    18e2:	d814      	bhi.n	190e <check_erratum19+0x3e>
	ARG_UNUSED(arg);
	if (nrf53_errata_19()) {
    18e4:	4a0d      	ldr	r2, [pc, #52]	; (191c <check_erratum19+0x4c>)
    18e6:	5cd3      	ldrb	r3, [r2, r3]
    18e8:	b18b      	cbz	r3, 190e <check_erratum19+0x3e>
		LOG_ERR("This device is affected by nRF53 Erratum 19,");
    18ea:	2145      	movs	r1, #69	; 0x45
    18ec:	480c      	ldr	r0, [pc, #48]	; (1920 <check_erratum19+0x50>)
    18ee:	f004 f856 	bl	599e <printk>
		LOG_ERR("but workarounds have not been enabled.");
    18f2:	2145      	movs	r1, #69	; 0x45
    18f4:	480b      	ldr	r0, [pc, #44]	; (1924 <check_erratum19+0x54>)
    18f6:	f004 f852 	bl	599e <printk>
		LOG_ERR("See CONFIG_NRF5340_CPUAPP_ERRATUM19.");
    18fa:	2145      	movs	r1, #69	; 0x45
    18fc:	480a      	ldr	r0, [pc, #40]	; (1928 <check_erratum19+0x58>)
    18fe:	f004 f84e 	bl	599e <printk>
		k_panic();
    1902:	4040      	eors	r0, r0
    1904:	f380 8811 	msr	BASEPRI, r0
    1908:	f04f 0004 	mov.w	r0, #4
    190c:	df02      	svc	2
	}

	return 0;
}
    190e:	2000      	movs	r0, #0
    1910:	bd08      	pop	{r3, pc}
    1912:	bf00      	nop
    1914:	00ff0130 	.word	0x00ff0130
    1918:	00ff0134 	.word	0x00ff0134
    191c:	00008df3 	.word	0x00008df3
    1920:	00008d67 	.word	0x00008d67
    1924:	00008d99 	.word	0x00008d99
    1928:	00008dc5 	.word	0x00008dc5

0000192c <nrf_gpio_pin_mcu_select.constprop.0>:
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
    192c:	4b09      	ldr	r3, [pc, #36]	; (1954 <nrf_gpio_pin_mcu_select.constprop.0+0x28>)
    192e:	490a      	ldr	r1, [pc, #40]	; (1958 <nrf_gpio_pin_mcu_select.constprop.0+0x2c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1930:	f000 021f 	and.w	r2, r0, #31

    return pin_number >> 5;
    1934:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    1936:	2801      	cmp	r0, #1
    1938:	bf08      	it	eq
    193a:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    193c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1940:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1944:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    1948:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    194c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    1950:	4770      	bx	lr
    1952:	bf00      	nop
    1954:	50842500 	.word	0x50842500
    1958:	50842800 	.word	0x50842800

0000195c <nordicsemi_nrf53_init>:
{
    195c:	b570      	push	{r4, r5, r6, lr}
    195e:	f04f 0320 	mov.w	r3, #32
    1962:	f3ef 8611 	mrs	r6, BASEPRI
    1966:	f383 8811 	msr	BASEPRI, r3
    196a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    196e:	2401      	movs	r4, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1970:	4d0b      	ldr	r5, [pc, #44]	; (19a0 <nordicsemi_nrf53_init+0x44>)
    1972:	4b0c      	ldr	r3, [pc, #48]	; (19a4 <nordicsemi_nrf53_init+0x48>)
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    1974:	2000      	movs	r0, #0
    1976:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    197a:	f8c5 46d0 	str.w	r4, [r5, #1744]	; 0x6d0
    197e:	f7ff ffd5 	bl	192c <nrf_gpio_pin_mcu_select.constprop.0>
	nrf_gpio_pin_mcu_select(PIN_XL2, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    1982:	4620      	mov	r0, r4
    1984:	f7ff ffd2 	bl	192c <nrf_gpio_pin_mcu_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1988:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    198c:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1990:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
    1994:	f386 8811 	msr	BASEPRI, r6
    1998:	f3bf 8f6f 	isb	sy
}
    199c:	2000      	movs	r0, #0
    199e:	bd70      	pop	{r4, r5, r6, pc}
    19a0:	50004000 	.word	0x50004000
    19a4:	50001000 	.word	0x50001000

000019a8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    19a8:	b148      	cbz	r0, 19be <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    19aa:	4b05      	ldr	r3, [pc, #20]	; (19c0 <arch_busy_wait+0x18>)
    19ac:	681a      	ldr	r2, [r3, #0]
    19ae:	4b05      	ldr	r3, [pc, #20]	; (19c4 <arch_busy_wait+0x1c>)
    19b0:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    19b4:	4b04      	ldr	r3, [pc, #16]	; (19c8 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    19b6:	4350      	muls	r0, r2
    19b8:	f043 0301 	orr.w	r3, r3, #1
    19bc:	4718      	bx	r3
}
    19be:	4770      	bx	lr
    19c0:	20000060 	.word	0x20000060
    19c4:	000f4240 	.word	0x000f4240
    19c8:	000084c0 	.word	0x000084c0

000019cc <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    19cc:	4b09      	ldr	r3, [pc, #36]	; (19f4 <get_flash_area_from_id+0x28>)
{
    19ce:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    19d0:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    19d2:	4b09      	ldr	r3, [pc, #36]	; (19f8 <get_flash_area_from_id+0x2c>)
{
    19d4:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    19d6:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    19d8:	2300      	movs	r3, #0
    19da:	429d      	cmp	r5, r3
    19dc:	dc01      	bgt.n	19e2 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    19de:	2000      	movs	r0, #0
}
    19e0:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    19e2:	0119      	lsls	r1, r3, #4
    19e4:	5c61      	ldrb	r1, [r4, r1]
    19e6:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    19ea:	4291      	cmp	r1, r2
    19ec:	d0f8      	beq.n	19e0 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    19ee:	3301      	adds	r3, #1
    19f0:	e7f3      	b.n	19da <get_flash_area_from_id+0xe>
    19f2:	bf00      	nop
    19f4:	00008548 	.word	0x00008548
    19f8:	2000000c 	.word	0x2000000c

000019fc <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    19fc:	4b08      	ldr	r3, [pc, #32]	; (1a20 <flash_area_open+0x24>)
{
    19fe:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    1a00:	681b      	ldr	r3, [r3, #0]
{
    1a02:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    1a04:	b12b      	cbz	r3, 1a12 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1a06:	f7ff ffe1 	bl	19cc <get_flash_area_from_id>
	if (area == NULL) {
    1a0a:	b128      	cbz	r0, 1a18 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1a0c:	6020      	str	r0, [r4, #0]
	return 0;
    1a0e:	2000      	movs	r0, #0
}
    1a10:	bd10      	pop	{r4, pc}
		return -EACCES;
    1a12:	f06f 000c 	mvn.w	r0, #12
    1a16:	e7fb      	b.n	1a10 <flash_area_open+0x14>
		return -ENOENT;
    1a18:	f06f 0001 	mvn.w	r0, #1
    1a1c:	e7f8      	b.n	1a10 <flash_area_open+0x14>
    1a1e:	bf00      	nop
    1a20:	2000000c 	.word	0x2000000c

00001a24 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1a24:	b530      	push	{r4, r5, lr}
    1a26:	b089      	sub	sp, #36	; 0x24
    1a28:	460c      	mov	r4, r1
    1a2a:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    1a2c:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    1a2e:	f7ff ffcd 	bl	19cc <get_flash_area_from_id>
	if (fa == NULL) {
    1a32:	b1b8      	cbz	r0, 1a64 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    1a34:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1a36:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1a38:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1a3a:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1a3c:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    1a3e:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    1a42:	2300      	movs	r3, #0
	cb_data->status = 0;
    1a44:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1a48:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1a4a:	f004 f9a1 	bl	5d90 <device_get_binding>
	if (flash_dev == NULL) {
    1a4e:	b160      	cbz	r0, 1a6a <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    1a50:	4907      	ldr	r1, [pc, #28]	; (1a70 <flash_area_get_sectors+0x4c>)
    1a52:	aa01      	add	r2, sp, #4
    1a54:	f004 fc32 	bl	62bc <flash_page_foreach>
	if (cb_data->status == 0) {
    1a58:	9807      	ldr	r0, [sp, #28]
    1a5a:	b908      	cbnz	r0, 1a60 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    1a5c:	9b05      	ldr	r3, [sp, #20]
    1a5e:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1a60:	b009      	add	sp, #36	; 0x24
    1a62:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    1a64:	f06f 0015 	mvn.w	r0, #21
    1a68:	e7fa      	b.n	1a60 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    1a6a:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1a6e:	e7f7      	b.n	1a60 <flash_area_get_sectors+0x3c>
    1a70:	00005d95 	.word	0x00005d95

00001a74 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1a74:	4604      	mov	r4, r0
    1a76:	b508      	push	{r3, lr}
	__asm__ volatile(
    1a78:	f04f 0220 	mov.w	r2, #32
    1a7c:	f3ef 8311 	mrs	r3, BASEPRI
    1a80:	f382 8811 	msr	BASEPRI, r2
    1a84:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1a88:	f004 fac5 	bl	6016 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1a8c:	4620      	mov	r0, r4
    1a8e:	f000 fea7 	bl	27e0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1a92:	4803      	ldr	r0, [pc, #12]	; (1aa0 <sys_reboot+0x2c>)
    1a94:	f003 ff83 	bl	599e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1a98:	f000 fc30 	bl	22fc <arch_cpu_idle>
    1a9c:	e7fc      	b.n	1a98 <sys_reboot+0x24>
    1a9e:	bf00      	nop
    1aa0:	00008dfd 	.word	0x00008dfd

00001aa4 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1aa4:	280a      	cmp	r0, #10
{
    1aa6:	b538      	push	{r3, r4, r5, lr}
    1aa8:	4604      	mov	r4, r0
    1aaa:	4d06      	ldr	r5, [pc, #24]	; (1ac4 <console_out+0x20>)
	if ('\n' == c) {
    1aac:	d103      	bne.n	1ab6 <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
    1aae:	210d      	movs	r1, #13
    1ab0:	6828      	ldr	r0, [r5, #0]
    1ab2:	f004 fa0c 	bl	5ece <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    1ab6:	6828      	ldr	r0, [r5, #0]
    1ab8:	b2e1      	uxtb	r1, r4
    1aba:	f004 fa08 	bl	5ece <uart_poll_out>

	return c;
}
    1abe:	4620      	mov	r0, r4
    1ac0:	bd38      	pop	{r3, r4, r5, pc}
    1ac2:	bf00      	nop
    1ac4:	20000a94 	.word	0x20000a94

00001ac8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1ac8:	b510      	push	{r4, lr}
    1aca:	4807      	ldr	r0, [pc, #28]	; (1ae8 <uart_console_init+0x20>)
    1acc:	f002 fdf6 	bl	46bc <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    1ad0:	4c06      	ldr	r4, [pc, #24]	; (1aec <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1ad2:	4b07      	ldr	r3, [pc, #28]	; (1af0 <uart_console_init+0x28>)
    1ad4:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1ad6:	4620      	mov	r0, r4
    1ad8:	f001 f804 	bl	2ae4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1adc:	4620      	mov	r0, r4
    1ade:	f7ff fc9b 	bl	1418 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    1ae2:	2000      	movs	r0, #0
    1ae4:	bd10      	pop	{r4, pc}
    1ae6:	bf00      	nop
    1ae8:	00008e26 	.word	0x00008e26
    1aec:	00001aa5 	.word	0x00001aa5
    1af0:	20000a94 	.word	0x20000a94

00001af4 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1af4:	b570      	push	{r4, r5, r6, lr}
    1af6:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    1af8:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    1afa:	480d      	ldr	r0, [pc, #52]	; (1b30 <onoff_stop+0x3c>)
{
    1afc:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    1afe:	1a23      	subs	r3, r4, r0
    1b00:	109a      	asrs	r2, r3, #2
    1b02:	4b0c      	ldr	r3, [pc, #48]	; (1b34 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    1b04:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1b06:	4353      	muls	r3, r2
    1b08:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    1b0a:	435d      	muls	r5, r3
    1b0c:	f105 0378 	add.w	r3, r5, #120	; 0x78
    1b10:	4418      	add	r0, r3
    1b12:	f004 f9e8 	bl	5ee6 <set_off_state>
	if (err < 0) {
    1b16:	1e01      	subs	r1, r0, #0
    1b18:	db04      	blt.n	1b24 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    1b1a:	4b07      	ldr	r3, [pc, #28]	; (1b38 <onoff_stop+0x44>)
    1b1c:	442b      	add	r3, r5
    1b1e:	685b      	ldr	r3, [r3, #4]
    1b20:	4798      	blx	r3
	return 0;
    1b22:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    1b24:	4620      	mov	r0, r4
    1b26:	4633      	mov	r3, r6
}
    1b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1b2c:	4718      	bx	r3
    1b2e:	bf00      	nop
    1b30:	20000aa8 	.word	0x20000aa8
    1b34:	b6db6db7 	.word	0xb6db6db7
    1b38:	00008560 	.word	0x00008560

00001b3c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1b40:	4c0f      	ldr	r4, [pc, #60]	; (1b80 <onoff_start+0x44>)
    1b42:	4d10      	ldr	r5, [pc, #64]	; (1b84 <onoff_start+0x48>)
    1b44:	1b03      	subs	r3, r0, r4
    1b46:	109b      	asrs	r3, r3, #2
    1b48:	435d      	muls	r5, r3
    1b4a:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    1b4c:	250c      	movs	r5, #12
    1b4e:	435d      	muls	r5, r3
{
    1b50:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    1b52:	f105 0078 	add.w	r0, r5, #120	; 0x78
{
    1b56:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    1b58:	4420      	add	r0, r4
    1b5a:	2140      	movs	r1, #64	; 0x40
    1b5c:	f004 f9dc 	bl	5f18 <set_starting_state>
	if (err < 0) {
    1b60:	1e01      	subs	r1, r0, #0
    1b62:	db08      	blt.n	1b76 <onoff_start+0x3a>
	subdata->cb = cb;
    1b64:	4b08      	ldr	r3, [pc, #32]	; (1b88 <onoff_start+0x4c>)
    1b66:	442c      	add	r4, r5
	subdata->user_data = user_data;
    1b68:	e9c4 361c 	strd	r3, r6, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    1b6c:	4b07      	ldr	r3, [pc, #28]	; (1b8c <onoff_start+0x50>)
    1b6e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1b74:	4718      	bx	r3
		notify(mgr, err);
    1b76:	4638      	mov	r0, r7
    1b78:	4633      	mov	r3, r6
}
    1b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1b7e:	4718      	bx	r3
    1b80:	20000aa8 	.word	0x20000aa8
    1b84:	b6db6db7 	.word	0xb6db6db7
    1b88:	00005f81 	.word	0x00005f81
    1b8c:	00008560 	.word	0x00008560

00001b90 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    1b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1b94:	2200      	movs	r2, #0
    1b96:	2101      	movs	r1, #1
{
    1b98:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1b9a:	2005      	movs	r0, #5
    1b9c:	f000 fb6e 	bl	227c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1ba0:	2005      	movs	r0, #5
    1ba2:	f000 fb4d 	bl	2240 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1ba6:	4811      	ldr	r0, [pc, #68]	; (1bec <clk_init+0x5c>)
    1ba8:	f001 fd5c 	bl	3664 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1bac:	4b10      	ldr	r3, [pc, #64]	; (1bf0 <clk_init+0x60>)
    1bae:	4298      	cmp	r0, r3
    1bb0:	d119      	bne.n	1be6 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1bb2:	f004 fd9c 	bl	66ee <nrfx_clock_enable>
    1bb6:	2400      	movs	r4, #0
	return &data->mgr[type];
    1bb8:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1bbc:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1bbe:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1bf4 <clk_init+0x64>
						get_sub_data(dev, i);
    1bc2:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1bc4:	4649      	mov	r1, r9
    1bc6:	fb08 5004 	mla	r0, r8, r4, r5
    1bca:	f003 ff44 	bl	5a56 <onoff_manager_init>
		if (err < 0) {
    1bce:	2800      	cmp	r0, #0
    1bd0:	db07      	blt.n	1be2 <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1bd2:	2301      	movs	r3, #1
    1bd4:	fb07 5504 	mla	r5, r7, r4, r5
    1bd8:	441c      	add	r4, r3
	for (enum clock_control_nrf_type i = 0;
    1bda:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1bdc:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    1bde:	d1f0      	bne.n	1bc2 <clk_init+0x32>
	}

	return 0;
    1be0:	2000      	movs	r0, #0
}
    1be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1be6:	f06f 0004 	mvn.w	r0, #4
    1bea:	e7fa      	b.n	1be2 <clk_init+0x52>
    1bec:	00001c2d 	.word	0x00001c2d
    1bf0:	0bad0000 	.word	0x0bad0000
    1bf4:	00008590 	.word	0x00008590

00001bf8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1bf8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1bfa:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1bfc:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    1bfe:	434b      	muls	r3, r1
    1c00:	4808      	ldr	r0, [pc, #32]	; (1c24 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    1c02:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1c04:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1c06:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    1c08:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1c0c:	4418      	add	r0, r3
	sub_data->cb = NULL;
    1c0e:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1c10:	f004 f9a0 	bl	5f54 <set_on_state>
	if (callback) {
    1c14:	b12d      	cbz	r5, 1c22 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1c16:	4632      	mov	r2, r6
    1c18:	462b      	mov	r3, r5
}
    1c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1c1e:	4802      	ldr	r0, [pc, #8]	; (1c28 <clkstarted_handle.constprop.0+0x30>)
    1c20:	4718      	bx	r3
}
    1c22:	bd70      	pop	{r4, r5, r6, pc}
    1c24:	20000aa8 	.word	0x20000aa8
    1c28:	200000dc 	.word	0x200000dc

00001c2c <clock_event_handler>:
	switch (event) {
    1c2c:	2805      	cmp	r0, #5
    1c2e:	d811      	bhi.n	1c54 <clock_event_handler+0x28>
    1c30:	e8df f000 	tbb	[pc, r0]
    1c34:	10100e03 	.word	0x10100e03
    1c38:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1c3a:	4b07      	ldr	r3, [pc, #28]	; (1c58 <clock_event_handler+0x2c>)
    1c3c:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1c3e:	f010 0007 	ands.w	r0, r0, #7
    1c42:	d107      	bne.n	1c54 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1c44:	f7ff bfd8 	b.w	1bf8 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1c48:	2002      	movs	r0, #2
    1c4a:	e7fb      	b.n	1c44 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1c4c:	2003      	movs	r0, #3
    1c4e:	e7f9      	b.n	1c44 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1c50:	2001      	movs	r0, #1
    1c52:	e7f7      	b.n	1c44 <clock_event_handler+0x18>
}
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop
    1c58:	20000aa8 	.word	0x20000aa8

00001c5c <generic_hfclk_start>:
{
    1c5c:	b508      	push	{r3, lr}
    1c5e:	f04f 0320 	mov.w	r3, #32
    1c62:	f3ef 8111 	mrs	r1, BASEPRI
    1c66:	f383 8811 	msr	BASEPRI, r3
    1c6a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1c6e:	4a12      	ldr	r2, [pc, #72]	; (1cb8 <generic_hfclk_start+0x5c>)
    1c70:	6813      	ldr	r3, [r2, #0]
    1c72:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1c76:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1c7a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1c7c:	d00c      	beq.n	1c98 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1c7e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1c82:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1c86:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1c8a:	f013 0301 	ands.w	r3, r3, #1
    1c8e:	d003      	beq.n	1c98 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1c90:	480a      	ldr	r0, [pc, #40]	; (1cbc <generic_hfclk_start+0x60>)
    1c92:	f004 f95f 	bl	5f54 <set_on_state>
			already_started = true;
    1c96:	2301      	movs	r3, #1
	__asm__ volatile(
    1c98:	f381 8811 	msr	BASEPRI, r1
    1c9c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1ca0:	b123      	cbz	r3, 1cac <generic_hfclk_start+0x50>
}
    1ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1ca6:	2000      	movs	r0, #0
    1ca8:	f7ff bfa6 	b.w	1bf8 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1cac:	2001      	movs	r0, #1
}
    1cae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1cb2:	f001 bce7 	b.w	3684 <nrfx_clock_start>
    1cb6:	bf00      	nop
    1cb8:	20000b48 	.word	0x20000b48
    1cbc:	20000b20 	.word	0x20000b20

00001cc0 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1cc0:	4b07      	ldr	r3, [pc, #28]	; (1ce0 <generic_hfclk_stop+0x20>)
    1cc2:	e8d3 2fef 	ldaex	r2, [r3]
    1cc6:	f022 0102 	bic.w	r1, r2, #2
    1cca:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1cce:	2800      	cmp	r0, #0
    1cd0:	d1f7      	bne.n	1cc2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1cd2:	07d3      	lsls	r3, r2, #31
    1cd4:	d402      	bmi.n	1cdc <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1cd6:	2001      	movs	r0, #1
    1cd8:	f001 bd28 	b.w	372c <nrfx_clock_stop>
}
    1cdc:	4770      	bx	lr
    1cde:	bf00      	nop
    1ce0:	20000b48 	.word	0x20000b48

00001ce4 <z_nrf_clock_control_lf_on>:
{
    1ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1ce8:	2201      	movs	r2, #1
    1cea:	4606      	mov	r6, r0
    1cec:	4939      	ldr	r1, [pc, #228]	; (1dd4 <z_nrf_clock_control_lf_on+0xf0>)
    1cee:	e8d1 3fef 	ldaex	r3, [r1]
    1cf2:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1cf6:	2800      	cmp	r0, #0
    1cf8:	d1f9      	bne.n	1cee <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1cfa:	b933      	cbnz	r3, 1d0a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1cfc:	4936      	ldr	r1, [pc, #216]	; (1dd8 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    1cfe:	4837      	ldr	r0, [pc, #220]	; (1ddc <z_nrf_clock_control_lf_on+0xf8>)
    1d00:	604b      	str	r3, [r1, #4]
    1d02:	60cb      	str	r3, [r1, #12]
    1d04:	608a      	str	r2, [r1, #8]
    1d06:	f003 feb9 	bl	5a7c <onoff_request>
	switch (start_mode) {
    1d0a:	1e73      	subs	r3, r6, #1
    1d0c:	2b01      	cmp	r3, #1
    1d0e:	d832      	bhi.n	1d76 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1d10:	2e01      	cmp	r6, #1
    1d12:	d107      	bne.n	1d24 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1d14:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d18:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1d1c:	f003 0303 	and.w	r3, r3, #3
    1d20:	2b02      	cmp	r3, #2
    1d22:	d028      	beq.n	1d76 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1d24:	f006 fa2d 	bl	8182 <k_is_in_isr>
    1d28:	4604      	mov	r4, r0
    1d2a:	b918      	cbnz	r0, 1d34 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    1d2c:	4b2c      	ldr	r3, [pc, #176]	; (1de0 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    1d2e:	781b      	ldrb	r3, [r3, #0]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d147      	bne.n	1dc4 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
    1d34:	f04f 0320 	mov.w	r3, #32
    1d38:	f3ef 8511 	mrs	r5, BASEPRI
    1d3c:	f383 8811 	msr	BASEPRI, r3
    1d40:	f3bf 8f6f 	isb	sy
    1d44:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1d46:	4f27      	ldr	r7, [pc, #156]	; (1de4 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d48:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1de8 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d4c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1dec <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1d50:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1d54:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1d58:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1d5c:	03d2      	lsls	r2, r2, #15
    1d5e:	d50c      	bpl.n	1d7a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1d60:	f003 0303 	and.w	r3, r3, #3
    1d64:	2b02      	cmp	r3, #2
    1d66:	d001      	beq.n	1d6c <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1d68:	2e01      	cmp	r6, #1
    1d6a:	d106      	bne.n	1d7a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    1d6c:	b324      	cbz	r4, 1db8 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    1d6e:	f385 8811 	msr	BASEPRI, r5
    1d72:	f3bf 8f6f 	isb	sy
}
    1d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    1d7a:	b1c4      	cbz	r4, 1dae <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1d7c:	4628      	mov	r0, r5
    1d7e:	f000 facb 	bl	2318 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1d82:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1d86:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1d8a:	b2db      	uxtb	r3, r3
    1d8c:	2b01      	cmp	r3, #1
    1d8e:	d1df      	bne.n	1d50 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1d90:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1d92:	2900      	cmp	r1, #0
    1d94:	d0dc      	beq.n	1d50 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d96:	2100      	movs	r1, #0
    1d98:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1d9a:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1d9c:	2102      	movs	r1, #2
    1d9e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    1da2:	2220      	movs	r2, #32
    1da4:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1da8:	f8c9 3000 	str.w	r3, [r9]
}
    1dac:	e7d0      	b.n	1d50 <z_nrf_clock_control_lf_on+0x6c>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    1dae:	2100      	movs	r1, #0
    1db0:	2021      	movs	r0, #33	; 0x21
    1db2:	f003 f847 	bl	4e44 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1db6:	e7e4      	b.n	1d82 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    1db8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1dbc:	2202      	movs	r2, #2
    1dbe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1dc2:	e7d8      	b.n	1d76 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    1dc4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1dc8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1dca:	4605      	mov	r5, r0
    1dcc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1dd0:	e7b9      	b.n	1d46 <z_nrf_clock_control_lf_on+0x62>
    1dd2:	bf00      	nop
    1dd4:	20000b4c 	.word	0x20000b4c
    1dd8:	20000a98 	.word	0x20000a98
    1ddc:	20000ac4 	.word	0x20000ac4
    1de0:	20002eaa 	.word	0x20002eaa
    1de4:	50005104 	.word	0x50005104
    1de8:	e000e100 	.word	0xe000e100
    1dec:	50005008 	.word	0x50005008

00001df0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    1df0:	4a04      	ldr	r2, [pc, #16]	; (1e04 <sys_clock_timeout_handler+0x14>)
    1df2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1df4:	1ac8      	subs	r0, r1, r3
    1df6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1dfa:	4403      	add	r3, r0
    1dfc:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    1dfe:	f003 b943 	b.w	5088 <z_clock_announce>
    1e02:	bf00      	nop
    1e04:	20000b5c 	.word	0x20000b5c

00001e08 <set_absolute_alarm>:
{
    1e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1e0c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1e10:	f04f 0900 	mov.w	r9, #0
    1e14:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    1e16:	f100 0450 	add.w	r4, r0, #80	; 0x50
    1e1a:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    1e1e:	00a4      	lsls	r4, r4, #2
    1e20:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    1e24:	b2a4      	uxth	r4, r4
    1e26:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    1e2a:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1e2e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1e9c <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    1e32:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1e36:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1e3a:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    1e3c:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1e40:	eba3 030a 	sub.w	r3, r3, sl
    1e44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1e48:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1e4c:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    1e4e:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    1e52:	d102      	bne.n	1e5a <set_absolute_alarm+0x52>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    1e54:	2013      	movs	r0, #19
    1e56:	f006 f99a 	bl	818e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1e5a:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1e5e:	1aab      	subs	r3, r5, r2
    1e60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1e68:	bf88      	it	hi
    1e6a:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1e6c:	f8c4 9000 	str.w	r9, [r4]
    1e70:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1e72:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
    1e76:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    1e7a:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1e7e:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1e82:	459a      	cmp	sl, r3
    1e84:	d006      	beq.n	1e94 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    1e86:	1aeb      	subs	r3, r5, r3
    1e88:	3b02      	subs	r3, #2
    1e8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1e92:	d801      	bhi.n	1e98 <set_absolute_alarm+0x90>
}
    1e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    1e98:	462b      	mov	r3, r5
    1e9a:	e7cf      	b.n	1e3c <set_absolute_alarm+0x34>
    1e9c:	50015000 	.word	0x50015000

00001ea0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1ea2:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1ea4:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1ea6:	4e0f      	ldr	r6, [pc, #60]	; (1ee4 <rtc_nrf_isr+0x44>)
    1ea8:	4b0f      	ldr	r3, [pc, #60]	; (1ee8 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    1eaa:	4a10      	ldr	r2, [pc, #64]	; (1eec <rtc_nrf_isr+0x4c>)
    1eac:	4618      	mov	r0, r3
    1eae:	681d      	ldr	r5, [r3, #0]
    1eb0:	b104      	cbz	r4, 1eb4 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    1eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1eb4:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    1eb8:	03c9      	lsls	r1, r1, #15
    1eba:	d5fa      	bpl.n	1eb2 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1ebc:	6831      	ldr	r1, [r6, #0]
    1ebe:	2900      	cmp	r1, #0
    1ec0:	d0f7      	beq.n	1eb2 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1ec2:	6034      	str	r4, [r6, #0]
    1ec4:	6831      	ldr	r1, [r6, #0]
    p_reg->EVTENCLR = mask;
    1ec6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1eca:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1ece:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    1ed0:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    1ed4:	b125      	cbz	r5, 1ee0 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    1ed6:	2000      	movs	r0, #0
    1ed8:	685a      	ldr	r2, [r3, #4]
    1eda:	601f      	str	r7, [r3, #0]
    1edc:	47a8      	blx	r5
    1ede:	e7e3      	b.n	1ea8 <rtc_nrf_isr+0x8>
    1ee0:	6005      	str	r5, [r0, #0]
}
    1ee2:	e7e6      	b.n	1eb2 <rtc_nrf_isr+0x12>
    1ee4:	50015140 	.word	0x50015140
    1ee8:	20000b50 	.word	0x20000b50
    1eec:	50015000 	.word	0x50015000

00001ef0 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    1ef0:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    1ef2:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    1ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1ef8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    1efc:	4d0d      	ldr	r5, [pc, #52]	; (1f34 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    1efe:	2101      	movs	r1, #1
    1f00:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    1f04:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1f08:	4b0b      	ldr	r3, [pc, #44]	; (1f38 <z_clock_driver_init+0x48>)
    1f0a:	2015      	movs	r0, #21
    1f0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1f10:	4622      	mov	r2, r4
    1f12:	f000 f9b3 	bl	227c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    1f16:	2015      	movs	r0, #21
    1f18:	f000 f992 	bl	2240 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1f1c:	2301      	movs	r3, #1
    1f1e:	4a07      	ldr	r2, [pc, #28]	; (1f3c <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1f20:	2002      	movs	r0, #2
    1f22:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    1f24:	4a06      	ldr	r2, [pc, #24]	; (1f40 <z_clock_driver_init+0x50>)
    1f26:	602b      	str	r3, [r5, #0]
    1f28:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1f2a:	f7ff fedb 	bl	1ce4 <z_nrf_clock_control_lf_on>

	return 0;
}
    1f2e:	4620      	mov	r0, r4
    1f30:	bd38      	pop	{r3, r4, r5, pc}
    1f32:	bf00      	nop
    1f34:	50015000 	.word	0x50015000
    1f38:	e000e100 	.word	0xe000e100
    1f3c:	50015008 	.word	0x50015008
    1f40:	20000b58 	.word	0x20000b58

00001f44 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1f44:	4b13      	ldr	r3, [pc, #76]	; (1f94 <z_clock_set_timeout+0x50>)
    1f46:	f1b0 3fff 	cmp.w	r0, #4294967295
    1f4a:	bf08      	it	eq
    1f4c:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1f4e:	3801      	subs	r0, #1
    1f50:	2800      	cmp	r0, #0
    1f52:	dd1c      	ble.n	1f8e <z_clock_set_timeout+0x4a>
    1f54:	4298      	cmp	r0, r3
    1f56:	bfa8      	it	ge
    1f58:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1f5a:	4b0f      	ldr	r3, [pc, #60]	; (1f98 <z_clock_set_timeout+0x54>)
    1f5c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1f60:	4b0e      	ldr	r3, [pc, #56]	; (1f9c <z_clock_set_timeout+0x58>)
    1f62:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1f64:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1f66:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    1f6a:	bf18      	it	ne
    1f6c:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    1f6e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1f72:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    1f74:	4a0a      	ldr	r2, [pc, #40]	; (1fa0 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1f76:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1f78:	480a      	ldr	r0, [pc, #40]	; (1fa4 <z_clock_set_timeout+0x60>)
    1f7a:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    1f7c:	2000      	movs	r0, #0
    1f7e:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1f80:	4a04      	ldr	r2, [pc, #16]	; (1f94 <z_clock_set_timeout+0x50>)
    1f82:	4293      	cmp	r3, r2
    1f84:	bf94      	ite	ls
    1f86:	18c9      	addls	r1, r1, r3
    1f88:	1889      	addhi	r1, r1, r2
    1f8a:	f7ff bf3d 	b.w	1e08 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1f8e:	2000      	movs	r0, #0
    1f90:	e7e3      	b.n	1f5a <z_clock_set_timeout+0x16>
    1f92:	bf00      	nop
    1f94:	007fffff 	.word	0x007fffff
    1f98:	50015000 	.word	0x50015000
    1f9c:	20000b5c 	.word	0x20000b5c
    1fa0:	20000b50 	.word	0x20000b50
    1fa4:	00001df1 	.word	0x00001df1

00001fa8 <z_clock_elapsed>:
	__asm__ volatile(
    1fa8:	f04f 0220 	mov.w	r2, #32
    1fac:	f3ef 8311 	mrs	r3, BASEPRI
    1fb0:	f382 8811 	msr	BASEPRI, r2
    1fb4:	f3bf 8f6f 	isb	sy
    1fb8:	4a06      	ldr	r2, [pc, #24]	; (1fd4 <z_clock_elapsed+0x2c>)
    1fba:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1fbe:	4a06      	ldr	r2, [pc, #24]	; (1fd8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1fc0:	6812      	ldr	r2, [r2, #0]
    1fc2:	1a80      	subs	r0, r0, r2
    1fc4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1fc8:	f383 8811 	msr	BASEPRI, r3
    1fcc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1fd0:	4770      	bx	lr
    1fd2:	bf00      	nop
    1fd4:	50015000 	.word	0x50015000
    1fd8:	20000b5c 	.word	0x20000b5c

00001fdc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1fdc:	4801      	ldr	r0, [pc, #4]	; (1fe4 <nrf_cc3xx_platform_abort_init+0x8>)
    1fde:	f003 b919 	b.w	5214 <nrf_cc3xx_platform_set_abort>
    1fe2:	bf00      	nop
    1fe4:	0000859c 	.word	0x0000859c

00001fe8 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fe8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1fea:	b308      	cbz	r0, 2030 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1fec:	6843      	ldr	r3, [r0, #4]
    1fee:	2b04      	cmp	r3, #4
    1ff0:	d007      	beq.n	2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
    1ff2:	2b08      	cmp	r3, #8
    1ff4:	d013      	beq.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1ff6:	b1f3      	cbz	r3, 2036 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x36>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1ff8:	6800      	ldr	r0, [r0, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1ffa:	f002 fd1d 	bl	4a38 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1ffe:	2000      	movs	r0, #0
    2000:	e00c      	b.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2002:	2200      	movs	r2, #0
    2004:	6803      	ldr	r3, [r0, #0]
    2006:	e8d3 1fef 	ldaex	r1, [r3]
    200a:	2901      	cmp	r1, #1
    200c:	d103      	bne.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
    200e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2012:	2800      	cmp	r0, #0
    2014:	d1f7      	bne.n	2006 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2016:	4809      	ldr	r0, [pc, #36]	; (203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>)
    2018:	bf08      	it	eq
    201a:	4610      	moveq	r0, r2
    }
}
    201c:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    201e:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    2020:	2000      	movs	r0, #0
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	4a06      	ldr	r2, [pc, #24]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    2026:	f503 7380 	add.w	r3, r3, #256	; 0x100
    202a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    202e:	e7f5      	b.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2030:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2034:	e7f2      	b.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2036:	4803      	ldr	r0, [pc, #12]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    2038:	e7f0      	b.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
    203a:	bf00      	nop
    203c:	ffff8fe9 	.word	0xffff8fe9
    2040:	50030000 	.word	0x50030000
    2044:	ffff8fea 	.word	0xffff8fea

00002048 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2048:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    204a:	4604      	mov	r4, r0
    204c:	b918      	cbnz	r0, 2056 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    204e:	4b0d      	ldr	r3, [pc, #52]	; (2084 <mutex_free_platform+0x3c>)
    2050:	480d      	ldr	r0, [pc, #52]	; (2088 <mutex_free_platform+0x40>)
    2052:	685b      	ldr	r3, [r3, #4]
    2054:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2056:	6861      	ldr	r1, [r4, #4]
    2058:	2908      	cmp	r1, #8
    205a:	d00d      	beq.n	2078 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    205c:	f031 0304 	bics.w	r3, r1, #4
    2060:	d00a      	beq.n	2078 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2062:	f011 0102 	ands.w	r1, r1, #2
    2066:	d008      	beq.n	207a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2068:	4621      	mov	r1, r4
    206a:	4808      	ldr	r0, [pc, #32]	; (208c <mutex_free_platform+0x44>)
    206c:	f002 fc42 	bl	48f4 <k_mem_slab_free>
        mutex->mutex = NULL;
    2070:	2300      	movs	r3, #0
    2072:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2074:	2300      	movs	r3, #0
    2076:	6063      	str	r3, [r4, #4]
}
    2078:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    207a:	2214      	movs	r2, #20
    207c:	6820      	ldr	r0, [r4, #0]
    207e:	f004 f831 	bl	60e4 <memset>
    2082:	e7f7      	b.n	2074 <mutex_free_platform+0x2c>
    2084:	2000007c 	.word	0x2000007c
    2088:	00008e6c 	.word	0x00008e6c
    208c:	20000b60 	.word	0x20000b60

00002090 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2090:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2092:	4604      	mov	r4, r0
    2094:	b918      	cbnz	r0, 209e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2096:	4b16      	ldr	r3, [pc, #88]	; (20f0 <mutex_init_platform+0x60>)
    2098:	4816      	ldr	r0, [pc, #88]	; (20f4 <mutex_init_platform+0x64>)
    209a:	685b      	ldr	r3, [r3, #4]
    209c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    209e:	6863      	ldr	r3, [r4, #4]
    20a0:	2b04      	cmp	r3, #4
    20a2:	d023      	beq.n	20ec <mutex_init_platform+0x5c>
    20a4:	2b08      	cmp	r3, #8
    20a6:	d021      	beq.n	20ec <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    20a8:	b9cb      	cbnz	r3, 20de <mutex_init_platform+0x4e>
    20aa:	6823      	ldr	r3, [r4, #0]
    20ac:	b9bb      	cbnz	r3, 20de <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    20ae:	f04f 32ff 	mov.w	r2, #4294967295
    20b2:	f04f 33ff 	mov.w	r3, #4294967295
    20b6:	4621      	mov	r1, r4
    20b8:	480f      	ldr	r0, [pc, #60]	; (20f8 <mutex_init_platform+0x68>)
    20ba:	f002 fbe9 	bl	4890 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    20be:	b908      	cbnz	r0, 20c4 <mutex_init_platform+0x34>
    20c0:	6823      	ldr	r3, [r4, #0]
    20c2:	b91b      	cbnz	r3, 20cc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    20c4:	4b0a      	ldr	r3, [pc, #40]	; (20f0 <mutex_init_platform+0x60>)
    20c6:	480d      	ldr	r0, [pc, #52]	; (20fc <mutex_init_platform+0x6c>)
    20c8:	685b      	ldr	r3, [r3, #4]
    20ca:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    20cc:	2214      	movs	r2, #20
    20ce:	2100      	movs	r1, #0
    20d0:	6820      	ldr	r0, [r4, #0]
    20d2:	f004 f807 	bl	60e4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    20d6:	6863      	ldr	r3, [r4, #4]
    20d8:	f043 0302 	orr.w	r3, r3, #2
    20dc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    20de:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    20e0:	f005 ff9b 	bl	801a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    20e4:	6863      	ldr	r3, [r4, #4]
    20e6:	f043 0301 	orr.w	r3, r3, #1
    20ea:	6063      	str	r3, [r4, #4]
}
    20ec:	bd10      	pop	{r4, pc}
    20ee:	bf00      	nop
    20f0:	2000007c 	.word	0x2000007c
    20f4:	00008e6c 	.word	0x00008e6c
    20f8:	20000b60 	.word	0x20000b60
    20fc:	00008e92 	.word	0x00008e92

00002100 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2100:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2102:	b340      	cbz	r0, 2156 <mutex_lock_platform+0x56>
    switch (mutex->flags) {
    2104:	6843      	ldr	r3, [r0, #4]
    2106:	2b04      	cmp	r3, #4
    2108:	d00b      	beq.n	2122 <mutex_lock_platform+0x22>
    210a:	2b08      	cmp	r3, #8
    210c:	d016      	beq.n	213c <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    210e:	b303      	cbz	r3, 2152 <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2110:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2112:	f04f 32ff 	mov.w	r2, #4294967295
    2116:	f04f 33ff 	mov.w	r3, #4294967295
    211a:	f002 fc15 	bl	4948 <z_impl_k_mutex_lock>
        if (ret == 0) {
    211e:	b158      	cbz	r0, 2138 <mutex_lock_platform+0x38>
    2120:	e015      	b.n	214e <mutex_lock_platform+0x4e>
    2122:	2201      	movs	r2, #1
    2124:	6803      	ldr	r3, [r0, #0]
    2126:	e8d3 1fef 	ldaex	r1, [r3]
    212a:	2900      	cmp	r1, #0
    212c:	d103      	bne.n	2136 <mutex_lock_platform+0x36>
    212e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2132:	2800      	cmp	r0, #0
    2134:	d1f7      	bne.n	2126 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2136:	d10a      	bne.n	214e <mutex_lock_platform+0x4e>
    2138:	2000      	movs	r0, #0
}
    213a:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    213c:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    213e:	4a07      	ldr	r2, [pc, #28]	; (215c <mutex_lock_platform+0x5c>)
    2140:	781b      	ldrb	r3, [r3, #0]
    2142:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    214a:	2b00      	cmp	r3, #0
    214c:	d0f4      	beq.n	2138 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    214e:	4804      	ldr	r0, [pc, #16]	; (2160 <mutex_lock_platform+0x60>)
    2150:	e7f3      	b.n	213a <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2152:	4804      	ldr	r0, [pc, #16]	; (2164 <mutex_lock_platform+0x64>)
    2154:	e7f1      	b.n	213a <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2156:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    215a:	e7ee      	b.n	213a <mutex_lock_platform+0x3a>
    215c:	50030000 	.word	0x50030000
    2160:	ffff8fe9 	.word	0xffff8fe9
    2164:	ffff8fea 	.word	0xffff8fea

00002168 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2168:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    216a:	4906      	ldr	r1, [pc, #24]	; (2184 <nrf_cc3xx_platform_mutex_init+0x1c>)
    216c:	2340      	movs	r3, #64	; 0x40
    216e:	2214      	movs	r2, #20
    2170:	4805      	ldr	r0, [pc, #20]	; (2188 <nrf_cc3xx_platform_mutex_init+0x20>)
    2172:	f005 ff37 	bl	7fe4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    217a:	4904      	ldr	r1, [pc, #16]	; (218c <nrf_cc3xx_platform_mutex_init+0x24>)
    217c:	4804      	ldr	r0, [pc, #16]	; (2190 <nrf_cc3xx_platform_mutex_init+0x28>)
    217e:	f003 b89b 	b.w	52b8 <nrf_cc3xx_platform_set_mutexes>
    2182:	bf00      	nop
    2184:	20000b7c 	.word	0x20000b7c
    2188:	20000b60 	.word	0x20000b60
    218c:	000085b4 	.word	0x000085b4
    2190:	000085a4 	.word	0x000085a4

00002194 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2194:	4a09      	ldr	r2, [pc, #36]	; (21bc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2196:	490a      	ldr	r1, [pc, #40]	; (21c0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2198:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    219a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    219c:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    219e:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    21a0:	4908      	ldr	r1, [pc, #32]	; (21c4 <arch_swap+0x30>)
    21a2:	684b      	ldr	r3, [r1, #4]
    21a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    21a8:	604b      	str	r3, [r1, #4]
    21aa:	2300      	movs	r3, #0
    21ac:	f383 8811 	msr	BASEPRI, r3
    21b0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    21b4:	6893      	ldr	r3, [r2, #8]
}
    21b6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop
    21bc:	2000113c 	.word	0x2000113c
    21c0:	000087d0 	.word	0x000087d0
    21c4:	e000ed00 	.word	0xe000ed00

000021c8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    21c8:	4913      	ldr	r1, [pc, #76]	; (2218 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    21ca:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    21cc:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    21d0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    21d2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    21d6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    21da:	2020      	movs	r0, #32
    msr BASEPRI, r0
    21dc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    21e0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    21e4:	4f0d      	ldr	r7, [pc, #52]	; (221c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    21e6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    21ea:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    21ec:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    21ee:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    21f0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    21f2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    21f4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    21f6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    21fa:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    21fe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2202:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    2206:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    220a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    220c:	f003 ff0b 	bl	6026 <configure_builtin_stack_guard>
    pop {r2, lr}
    2210:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2214:	4770      	bx	lr
    2216:	0000      	.short	0x0000
    ldr r1, =_kernel
    2218:	2000113c 	.word	0x2000113c
    ldr v4, =_SCS_ICSR
    221c:	e000ed04 	.word	0xe000ed04

00002220 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2220:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2224:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2226:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    222a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    222e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2230:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2234:	2902      	cmp	r1, #2
    beq _oops
    2236:	d0ff      	beq.n	2238 <_oops>

00002238 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2238:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    223a:	f003 fef8 	bl	602e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    223e:	bd01      	pop	{r0, pc}

00002240 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2240:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2242:	2b00      	cmp	r3, #0
    2244:	db08      	blt.n	2258 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2246:	2201      	movs	r2, #1
    2248:	f000 001f 	and.w	r0, r0, #31
    224c:	fa02 f000 	lsl.w	r0, r2, r0
    2250:	4a02      	ldr	r2, [pc, #8]	; (225c <arch_irq_enable+0x1c>)
    2252:	095b      	lsrs	r3, r3, #5
    2254:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2258:	4770      	bx	lr
    225a:	bf00      	nop
    225c:	e000e100 	.word	0xe000e100

00002260 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2260:	4b05      	ldr	r3, [pc, #20]	; (2278 <arch_irq_is_enabled+0x18>)
    2262:	0942      	lsrs	r2, r0, #5
    2264:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2268:	2301      	movs	r3, #1
    226a:	f000 001f 	and.w	r0, r0, #31
    226e:	fa03 f000 	lsl.w	r0, r3, r0
}
    2272:	4010      	ands	r0, r2
    2274:	4770      	bx	lr
    2276:	bf00      	nop
    2278:	e000e100 	.word	0xe000e100

0000227c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    227c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    227e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    2280:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2284:	bfac      	ite	ge
    2286:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    228a:	4b06      	ldrlt	r3, [pc, #24]	; (22a4 <z_arm_irq_priority_set+0x28>)
    228c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2290:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2292:	bfab      	itete	ge
    2294:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2298:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    229c:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22a0:	5419      	strblt	r1, [r3, r0]
}
    22a2:	4770      	bx	lr
    22a4:	e000ed14 	.word	0xe000ed14

000022a8 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    22a8:	b580      	push	{r7, lr}
    22aa:	461d      	mov	r5, r3
    22ac:	4604      	mov	r4, r0
    22ae:	460f      	mov	r7, r1
    22b0:	4616      	mov	r6, r2
	z_arm_configure_static_mpu_regions();
    22b2:	f000 fad5 	bl	2860 <z_arm_configure_static_mpu_regions>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    22b6:	2300      	movs	r3, #0
    22b8:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    22bc:	4b0b      	ldr	r3, [pc, #44]	; (22ec <loop+0x2>)
	register void *p2_inreg __asm__("r1") = p2;
    22be:	4631      	mov	r1, r6
	register void *p3_inreg __asm__("r2") = p3;
    22c0:	462a      	mov	r2, r5
	register void *p1_inreg __asm__("r0") = p1;
    22c2:	4638      	mov	r0, r7
	__asm__ volatile (
    22c4:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    22c8:	2520      	movs	r5, #32
    22ca:	f386 880b 	msr	PSPLIM, r6
    22ce:	f383 8809 	msr	PSP, r3
    22d2:	b663      	cpsie	if
    22d4:	f04f 0300 	mov.w	r3, #0
    22d8:	f383 8811 	msr	BASEPRI, r3
    22dc:	f3bf 8f6f 	isb	sy
    22e0:	47a0      	blx	r4
    22e2:	f385 8811 	msr	BASEPRI, r5
    22e6:	f3bf 8f6f 	isb	sy

000022ea <loop>:
    22ea:	e7fe      	b.n	22ea <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    22ec:	200056b0 	.word	0x200056b0

000022f0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    22f0:	4901      	ldr	r1, [pc, #4]	; (22f8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    22f2:	2210      	movs	r2, #16
	str	r2, [r1]
    22f4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    22f6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    22f8:	e000ed10 	.word	0xe000ed10

000022fc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    22fc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    22fe:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2300:	f380 8811 	msr	BASEPRI, r0
	isb
    2304:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2308:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    230c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    230e:	b662      	cpsie	i
	isb
    2310:	f3bf 8f6f 	isb	sy

	bx	lr
    2314:	4770      	bx	lr
    2316:	bf00      	nop

00002318 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2318:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    231a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    231c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2320:	bf20      	wfe

	msr	BASEPRI, r0
    2322:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2326:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2328:	4770      	bx	lr
    232a:	bf00      	nop

0000232c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    232c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    232e:	4605      	mov	r5, r0

	if (esf != NULL) {
    2330:	460c      	mov	r4, r1
    2332:	b1c9      	cbz	r1, 2368 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2334:	688b      	ldr	r3, [r1, #8]
    2336:	4810      	ldr	r0, [pc, #64]	; (2378 <z_arm_fatal_error+0x4c>)
    2338:	9300      	str	r3, [sp, #0]
    233a:	e9d1 2300 	ldrd	r2, r3, [r1]
    233e:	2145      	movs	r1, #69	; 0x45
    2340:	f003 fb2d 	bl	599e <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2344:	6963      	ldr	r3, [r4, #20]
    2346:	2145      	movs	r1, #69	; 0x45
    2348:	9300      	str	r3, [sp, #0]
    234a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    234e:	480b      	ldr	r0, [pc, #44]	; (237c <z_arm_fatal_error+0x50>)
    2350:	f003 fb25 	bl	599e <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2354:	2145      	movs	r1, #69	; 0x45
    2356:	69e2      	ldr	r2, [r4, #28]
    2358:	4809      	ldr	r0, [pc, #36]	; (2380 <z_arm_fatal_error+0x54>)
    235a:	f003 fb20 	bl	599e <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    235e:	2145      	movs	r1, #69	; 0x45
    2360:	69a2      	ldr	r2, [r4, #24]
    2362:	4808      	ldr	r0, [pc, #32]	; (2384 <z_arm_fatal_error+0x58>)
    2364:	f003 fb1b 	bl	599e <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2368:	4621      	mov	r1, r4
    236a:	4628      	mov	r0, r5
}
    236c:	b003      	add	sp, #12
    236e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    2372:	f002 b9cb 	b.w	470c <z_fatal_error>
    2376:	bf00      	nop
    2378:	00008ebf 	.word	0x00008ebf
    237c:	00008ef3 	.word	0x00008ef3
    2380:	00008f27 	.word	0x00008f27
    2384:	00008f3b 	.word	0x00008f3b

00002388 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2388:	bf30      	wfi
    b z_SysNmiOnReset
    238a:	f7ff bffd 	b.w	2388 <z_SysNmiOnReset>
    238e:	bf00      	nop

00002390 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2390:	4a0e      	ldr	r2, [pc, #56]	; (23cc <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2392:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2394:	4b0e      	ldr	r3, [pc, #56]	; (23d0 <z_arm_prep_c+0x40>)
    2396:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    239a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    239c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23a0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    23a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    23a8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    23ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    23b0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    23b4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    23b8:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    23bc:	f002 f9f4 	bl	47a8 <z_bss_zero>
	z_data_copy();
    23c0:	f002 fd78 	bl	4eb4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    23c4:	f000 fa1e 	bl	2804 <z_arm_interrupt_init>
	z_cstart();
    23c8:	f002 fa10 	bl	47ec <z_cstart>
    23cc:	00000000 	.word	0x00000000
    23d0:	e000ed00 	.word	0xe000ed00

000023d4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    23d4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    23d6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    23d8:	4a0b      	ldr	r2, [pc, #44]	; (2408 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    23da:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    23dc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    23de:	bf1e      	ittt	ne
	movne	r1, #0
    23e0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    23e2:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    23e4:	f005 fdfc 	blne	7fe0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    23e8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    23ea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    23ee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    23f2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    23f6:	4905      	ldr	r1, [pc, #20]	; (240c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    23f8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    23fa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    23fc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    23fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2402:	4903      	ldr	r1, [pc, #12]	; (2410 <_isr_wrapper+0x3c>)
	bx r1
    2404:	4708      	bx	r1
    2406:	0000      	.short	0x0000
	ldr r2, =_kernel
    2408:	2000113c 	.word	0x2000113c
	ldr r1, =_sw_isr_table
    240c:	00008250 	.word	0x00008250
	ldr r1, =z_arm_int_exit
    2410:	000027dd 	.word	0x000027dd

00002414 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    2414:	f003 fcb7 	bl	5d86 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2418:	2020      	movs	r0, #32
    msr BASEPRI, r0
    241a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    241e:	4808      	ldr	r0, [pc, #32]	; (2440 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2420:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2424:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2426:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    242a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    242e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2430:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2432:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2436:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    243a:	f7ff ffa9 	bl	2390 <z_arm_prep_c>
    243e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2440:	200056b0 	.word	0x200056b0

00002444 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2444:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2448:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    244c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    244e:	4672      	mov	r2, lr
	bl z_arm_fault
    2450:	f000 f908 	bl	2664 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2454:	bd01      	pop	{r0, pc}
    2456:	bf00      	nop

00002458 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2458:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    245a:	4c22      	ldr	r4, [pc, #136]	; (24e4 <mem_manage_fault.isra.0+0x8c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    245c:	4606      	mov	r6, r0
    245e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2460:	4821      	ldr	r0, [pc, #132]	; (24e8 <mem_manage_fault.isra.0+0x90>)
    2462:	2145      	movs	r1, #69	; 0x45
    2464:	f003 fa9b 	bl	599e <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2468:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    246a:	06d0      	lsls	r0, r2, #27
    246c:	d503      	bpl.n	2476 <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    246e:	2145      	movs	r1, #69	; 0x45
    2470:	481e      	ldr	r0, [pc, #120]	; (24ec <mem_manage_fault.isra.0+0x94>)
    2472:	f003 fa94 	bl	599e <printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2476:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2478:	0719      	lsls	r1, r3, #28
    247a:	d503      	bpl.n	2484 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    247c:	2145      	movs	r1, #69	; 0x45
    247e:	481c      	ldr	r0, [pc, #112]	; (24f0 <mem_manage_fault.isra.0+0x98>)
    2480:	f003 fa8d 	bl	599e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2484:	4c17      	ldr	r4, [pc, #92]	; (24e4 <mem_manage_fault.isra.0+0x8c>)
    2486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2488:	079a      	lsls	r2, r3, #30
    248a:	d510      	bpl.n	24ae <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    248c:	2145      	movs	r1, #69	; 0x45
    248e:	4819      	ldr	r0, [pc, #100]	; (24f4 <mem_manage_fault.isra.0+0x9c>)
    2490:	f003 fa85 	bl	599e <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2494:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2498:	061b      	lsls	r3, r3, #24
    249a:	d508      	bpl.n	24ae <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    249c:	2145      	movs	r1, #69	; 0x45
    249e:	4816      	ldr	r0, [pc, #88]	; (24f8 <mem_manage_fault.isra.0+0xa0>)
    24a0:	f003 fa7d 	bl	599e <printk>
			if (from_hard_fault) {
    24a4:	b11e      	cbz	r6, 24ae <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    24a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    24ac:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    24ae:	4c0d      	ldr	r4, [pc, #52]	; (24e4 <mem_manage_fault.isra.0+0x8c>)
    24b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    24b2:	07d0      	lsls	r0, r2, #31
    24b4:	d503      	bpl.n	24be <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    24b6:	2145      	movs	r1, #69	; 0x45
    24b8:	4810      	ldr	r0, [pc, #64]	; (24fc <mem_manage_fault.isra.0+0xa4>)
    24ba:	f003 fa70 	bl	599e <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    24be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24c0:	0699      	lsls	r1, r3, #26
    24c2:	d503      	bpl.n	24cc <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    24c4:	2145      	movs	r1, #69	; 0x45
    24c6:	480e      	ldr	r0, [pc, #56]	; (2500 <mem_manage_fault.isra.0+0xa8>)
    24c8:	f003 fa69 	bl	599e <printk>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    24cc:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24ce:	4b05      	ldr	r3, [pc, #20]	; (24e4 <mem_manage_fault.isra.0+0x8c>)
    24d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24d2:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    24d4:	bf58      	it	pl
    24d6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    24d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24da:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    24de:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    24e0:	7028      	strb	r0, [r5, #0]

	return reason;
}
    24e2:	bd70      	pop	{r4, r5, r6, pc}
    24e4:	e000ed00 	.word	0xe000ed00
    24e8:	00008f6e 	.word	0x00008f6e
    24ec:	00008f89 	.word	0x00008f89
    24f0:	00008fc1 	.word	0x00008fc1
    24f4:	00008fd9 	.word	0x00008fd9
    24f8:	00008ff6 	.word	0x00008ff6
    24fc:	00009011 	.word	0x00009011
    2500:	00009035 	.word	0x00009035

00002504 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2504:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2506:	4c23      	ldr	r4, [pc, #140]	; (2594 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2508:	4606      	mov	r6, r0
    250a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    250c:	4822      	ldr	r0, [pc, #136]	; (2598 <bus_fault.isra.0+0x94>)
    250e:	2145      	movs	r1, #69	; 0x45
    2510:	f003 fa45 	bl	599e <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2514:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2516:	04d1      	lsls	r1, r2, #19
    2518:	d503      	bpl.n	2522 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    251a:	2145      	movs	r1, #69	; 0x45
    251c:	481f      	ldr	r0, [pc, #124]	; (259c <bus_fault.isra.0+0x98>)
    251e:	f003 fa3e 	bl	599e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2524:	051a      	lsls	r2, r3, #20
    2526:	d503      	bpl.n	2530 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2528:	2145      	movs	r1, #69	; 0x45
    252a:	481d      	ldr	r0, [pc, #116]	; (25a0 <bus_fault.isra.0+0x9c>)
    252c:	f003 fa37 	bl	599e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2530:	4c18      	ldr	r4, [pc, #96]	; (2594 <bus_fault.isra.0+0x90>)
    2532:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2534:	059b      	lsls	r3, r3, #22
    2536:	d510      	bpl.n	255a <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2538:	481a      	ldr	r0, [pc, #104]	; (25a4 <bus_fault.isra.0+0xa0>)
    253a:	2145      	movs	r1, #69	; 0x45
    253c:	f003 fa2f 	bl	599e <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2540:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2542:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2544:	0418      	lsls	r0, r3, #16
    2546:	d508      	bpl.n	255a <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2548:	2145      	movs	r1, #69	; 0x45
    254a:	4817      	ldr	r0, [pc, #92]	; (25a8 <bus_fault.isra.0+0xa4>)
    254c:	f003 fa27 	bl	599e <printk>
			if (from_hard_fault) {
    2550:	b11e      	cbz	r6, 255a <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2552:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2554:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2558:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    255a:	4c0e      	ldr	r4, [pc, #56]	; (2594 <bus_fault.isra.0+0x90>)
    255c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    255e:	0559      	lsls	r1, r3, #21
    2560:	d503      	bpl.n	256a <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2562:	2145      	movs	r1, #69	; 0x45
    2564:	4811      	ldr	r0, [pc, #68]	; (25ac <bus_fault.isra.0+0xa8>)
    2566:	f003 fa1a 	bl	599e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    256a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    256c:	05da      	lsls	r2, r3, #23
    256e:	d50b      	bpl.n	2588 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2570:	2145      	movs	r1, #69	; 0x45
    2572:	480f      	ldr	r0, [pc, #60]	; (25b0 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2574:	f003 fa13 	bl	599e <printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    2578:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    257a:	4a06      	ldr	r2, [pc, #24]	; (2594 <bus_fault.isra.0+0x90>)
    257c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    257e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2582:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    2584:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2586:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2588:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    258a:	049b      	lsls	r3, r3, #18
    258c:	d5f4      	bpl.n	2578 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    258e:	2145      	movs	r1, #69	; 0x45
    2590:	4808      	ldr	r0, [pc, #32]	; (25b4 <bus_fault.isra.0+0xb0>)
    2592:	e7ef      	b.n	2574 <bus_fault.isra.0+0x70>
    2594:	e000ed00 	.word	0xe000ed00
    2598:	00009069 	.word	0x00009069
    259c:	00009084 	.word	0x00009084
    25a0:	00008fc1 	.word	0x00008fc1
    25a4:	0000909a 	.word	0x0000909a
    25a8:	000090b8 	.word	0x000090b8
    25ac:	000090d2 	.word	0x000090d2
    25b0:	000090f2 	.word	0x000090f2
    25b4:	00009035 	.word	0x00009035

000025b8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    25b8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25ba:	4c21      	ldr	r4, [pc, #132]	; (2640 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    25bc:	2145      	movs	r1, #69	; 0x45
    25be:	4821      	ldr	r0, [pc, #132]	; (2644 <usage_fault.isra.0+0x8c>)
    25c0:	f003 f9ed 	bl	599e <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    25c6:	0195      	lsls	r5, r2, #6
    25c8:	d503      	bpl.n	25d2 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    25ca:	2145      	movs	r1, #69	; 0x45
    25cc:	481e      	ldr	r0, [pc, #120]	; (2648 <usage_fault.isra.0+0x90>)
    25ce:	f003 f9e6 	bl	599e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    25d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25d4:	01dc      	lsls	r4, r3, #7
    25d6:	d503      	bpl.n	25e0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    25d8:	2145      	movs	r1, #69	; 0x45
    25da:	481c      	ldr	r0, [pc, #112]	; (264c <usage_fault.isra.0+0x94>)
    25dc:	f003 f9df 	bl	599e <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    25e0:	4d17      	ldr	r5, [pc, #92]	; (2640 <usage_fault.isra.0+0x88>)
    25e2:	6aac      	ldr	r4, [r5, #40]	; 0x28
    25e4:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    25e8:	d004      	beq.n	25f4 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    25ea:	2145      	movs	r1, #69	; 0x45
    25ec:	4818      	ldr	r0, [pc, #96]	; (2650 <usage_fault.isra.0+0x98>)
    25ee:	f003 f9d6 	bl	599e <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    25f2:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    25f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    25f6:	0318      	lsls	r0, r3, #12
    25f8:	d503      	bpl.n	2602 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    25fa:	2145      	movs	r1, #69	; 0x45
    25fc:	4815      	ldr	r0, [pc, #84]	; (2654 <usage_fault.isra.0+0x9c>)
    25fe:	f003 f9ce 	bl	599e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2602:	4d0f      	ldr	r5, [pc, #60]	; (2640 <usage_fault.isra.0+0x88>)
    2604:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2606:	0351      	lsls	r1, r2, #13
    2608:	d503      	bpl.n	2612 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    260a:	2145      	movs	r1, #69	; 0x45
    260c:	4812      	ldr	r0, [pc, #72]	; (2658 <usage_fault.isra.0+0xa0>)
    260e:	f003 f9c6 	bl	599e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2612:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2614:	039a      	lsls	r2, r3, #14
    2616:	d503      	bpl.n	2620 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2618:	2145      	movs	r1, #69	; 0x45
    261a:	4810      	ldr	r0, [pc, #64]	; (265c <usage_fault.isra.0+0xa4>)
    261c:	f003 f9bf 	bl	599e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2620:	4d07      	ldr	r5, [pc, #28]	; (2640 <usage_fault.isra.0+0x88>)
    2622:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2624:	03db      	lsls	r3, r3, #15
    2626:	d503      	bpl.n	2630 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2628:	2145      	movs	r1, #69	; 0x45
    262a:	480d      	ldr	r0, [pc, #52]	; (2660 <usage_fault.isra.0+0xa8>)
    262c:	f003 f9b7 	bl	599e <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2630:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2632:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2634:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2638:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    263c:	62ab      	str	r3, [r5, #40]	; 0x28
}
    263e:	bd38      	pop	{r3, r4, r5, pc}
    2640:	e000ed00 	.word	0xe000ed00
    2644:	0000910f 	.word	0x0000910f
    2648:	0000912c 	.word	0x0000912c
    264c:	00009144 	.word	0x00009144
    2650:	00009163 	.word	0x00009163
    2654:	00009192 	.word	0x00009192
    2658:	000091b5 	.word	0x000091b5
    265c:	000091df 	.word	0x000091df
    2660:	000091fe 	.word	0x000091fe

00002664 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2668:	4b4a      	ldr	r3, [pc, #296]	; (2794 <z_arm_fault+0x130>)
{
    266a:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    266c:	f8d3 9004 	ldr.w	r9, [r3, #4]
    2670:	2500      	movs	r5, #0
{
    2672:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2674:	f3c9 0808 	ubfx	r8, r9, #0, #9
    2678:	f385 8811 	msr	BASEPRI, r5
    267c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2680:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2684:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2688:	d107      	bne.n	269a <z_arm_fault+0x36>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    268a:	f002 030c 	and.w	r3, r2, #12
    268e:	2b08      	cmp	r3, #8
    2690:	d105      	bne.n	269e <z_arm_fault+0x3a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2692:	2145      	movs	r1, #69	; 0x45
    2694:	4840      	ldr	r0, [pc, #256]	; (2798 <z_arm_fault+0x134>)
    2696:	f003 f982 	bl	599e <printk>
		return NULL;
    269a:	462f      	mov	r7, r5
    269c:	e003      	b.n	26a6 <z_arm_fault+0x42>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    269e:	0712      	lsls	r2, r2, #28
    26a0:	d401      	bmi.n	26a6 <z_arm_fault+0x42>
			ptr_esf = (z_arch_esf_t *)msp;
    26a2:	4607      	mov	r7, r0
			*nested_exc = true;
    26a4:	2501      	movs	r5, #1
	*recoverable = false;
    26a6:	2200      	movs	r2, #0
    26a8:	f1a8 0603 	sub.w	r6, r8, #3
    26ac:	4614      	mov	r4, r2
    26ae:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    26b2:	2e09      	cmp	r6, #9
    26b4:	d85b      	bhi.n	276e <z_arm_fault+0x10a>
    26b6:	e8df f006 	tbb	[pc, r6]
    26ba:	4f05      	.short	0x4f05
    26bc:	5a5a3353 	.word	0x5a5a3353
    26c0:	575a5a5a 	.word	0x575a5a5a
	PR_FAULT_INFO("***** HARD FAULT *****");
    26c4:	2145      	movs	r1, #69	; 0x45
    26c6:	4835      	ldr	r0, [pc, #212]	; (279c <z_arm_fault+0x138>)
    26c8:	f003 f969 	bl	599e <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    26cc:	4b31      	ldr	r3, [pc, #196]	; (2794 <z_arm_fault+0x130>)
	*recoverable = false;
    26ce:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    26d2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    26d4:	f014 0402 	ands.w	r4, r4, #2
    26d8:	d005      	beq.n	26e6 <z_arm_fault+0x82>
		PR_EXC("  Bus fault on vector table read");
    26da:	2145      	movs	r1, #69	; 0x45
    26dc:	4830      	ldr	r0, [pc, #192]	; (27a0 <z_arm_fault+0x13c>)
	PR_FAULT_INFO(
    26de:	f003 f95e 	bl	599e <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    26e2:	2400      	movs	r4, #0
}
    26e4:	e01f      	b.n	2726 <z_arm_fault+0xc2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    26e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26e8:	005b      	lsls	r3, r3, #1
    26ea:	d51c      	bpl.n	2726 <z_arm_fault+0xc2>
		PR_EXC("  Fault escalation (see below)");
    26ec:	2145      	movs	r1, #69	; 0x45
    26ee:	482d      	ldr	r0, [pc, #180]	; (27a4 <z_arm_fault+0x140>)
    26f0:	f003 f955 	bl	599e <printk>
		if (SCB_MMFSR != 0) {
    26f4:	4b2c      	ldr	r3, [pc, #176]	; (27a8 <z_arm_fault+0x144>)
    26f6:	781b      	ldrb	r3, [r3, #0]
    26f8:	b12b      	cbz	r3, 2706 <z_arm_fault+0xa2>
			reason = mem_manage_fault(esf, 1, recoverable);
    26fa:	2001      	movs	r0, #1
    26fc:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2700:	f7ff feaa 	bl	2458 <mem_manage_fault.isra.0>
    2704:	e00e      	b.n	2724 <z_arm_fault+0xc0>
		} else if (SCB_BFSR != 0) {
    2706:	4b29      	ldr	r3, [pc, #164]	; (27ac <z_arm_fault+0x148>)
    2708:	781b      	ldrb	r3, [r3, #0]
    270a:	b12b      	cbz	r3, 2718 <z_arm_fault+0xb4>
			reason = bus_fault(esf, 1, recoverable);
    270c:	2001      	movs	r0, #1
    270e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2712:	f7ff fef7 	bl	2504 <bus_fault.isra.0>
    2716:	e005      	b.n	2724 <z_arm_fault+0xc0>
		} else if (SCB_UFSR != 0) {
    2718:	4b25      	ldr	r3, [pc, #148]	; (27b0 <z_arm_fault+0x14c>)
    271a:	881b      	ldrh	r3, [r3, #0]
    271c:	b29b      	uxth	r3, r3
    271e:	b113      	cbz	r3, 2726 <z_arm_fault+0xc2>
			reason = usage_fault(esf);
    2720:	f7ff ff4a 	bl	25b8 <usage_fault.isra.0>
    2724:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2726:	f89d 3007 	ldrb.w	r3, [sp, #7]
    272a:	b993      	cbnz	r3, 2752 <z_arm_fault+0xee>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    272c:	2220      	movs	r2, #32
    272e:	4639      	mov	r1, r7
    2730:	a802      	add	r0, sp, #8
    2732:	f003 fcac 	bl	608e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2736:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2738:	b335      	cbz	r5, 2788 <z_arm_fault+0x124>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    273a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    273e:	b922      	cbnz	r2, 274a <z_arm_fault+0xe6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2740:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2744:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2748:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    274a:	4620      	mov	r0, r4
    274c:	a902      	add	r1, sp, #8
    274e:	f7ff fded 	bl	232c <z_arm_fatal_error>
}
    2752:	b00b      	add	sp, #44	; 0x2c
    2754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    2758:	2000      	movs	r0, #0
    275a:	f10d 0107 	add.w	r1, sp, #7
    275e:	e7cf      	b.n	2700 <z_arm_fault+0x9c>
		reason = bus_fault(esf, 0, recoverable);
    2760:	2000      	movs	r0, #0
    2762:	f10d 0107 	add.w	r1, sp, #7
    2766:	e7d4      	b.n	2712 <z_arm_fault+0xae>
	PR_FAULT_INFO(
    2768:	2145      	movs	r1, #69	; 0x45
    276a:	4812      	ldr	r0, [pc, #72]	; (27b4 <z_arm_fault+0x150>)
    276c:	e7b7      	b.n	26de <z_arm_fault+0x7a>
	PR_FAULT_INFO("***** %s %d) *****",
    276e:	4912      	ldr	r1, [pc, #72]	; (27b8 <z_arm_fault+0x154>)
    2770:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    2774:	4a11      	ldr	r2, [pc, #68]	; (27bc <z_arm_fault+0x158>)
    2776:	4812      	ldr	r0, [pc, #72]	; (27c0 <z_arm_fault+0x15c>)
    2778:	bf08      	it	eq
    277a:	460a      	moveq	r2, r1
    277c:	f1a8 0310 	sub.w	r3, r8, #16
    2780:	2145      	movs	r1, #69	; 0x45
    2782:	f003 f90c 	bl	599e <printk>
    2786:	e7ac      	b.n	26e2 <z_arm_fault+0x7e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2788:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    278c:	f023 0301 	bic.w	r3, r3, #1
    2790:	e7da      	b.n	2748 <z_arm_fault+0xe4>
    2792:	bf00      	nop
    2794:	e000ed00 	.word	0xe000ed00
    2798:	0000925c 	.word	0x0000925c
    279c:	0000928c 	.word	0x0000928c
    27a0:	000092a8 	.word	0x000092a8
    27a4:	000092ce 	.word	0x000092ce
    27a8:	e000ed28 	.word	0xe000ed28
    27ac:	e000ed29 	.word	0xe000ed29
    27b0:	e000ed2a 	.word	0xe000ed2a
    27b4:	000092f2 	.word	0x000092f2
    27b8:	0000922e 	.word	0x0000922e
    27bc:	00009243 	.word	0x00009243
    27c0:	0000932d 	.word	0x0000932d

000027c4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    27c4:	4b04      	ldr	r3, [pc, #16]	; (27d8 <z_arm_fault_init+0x14>)
    27c6:	695a      	ldr	r2, [r3, #20]
    27c8:	f042 0210 	orr.w	r2, r2, #16
    27cc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    27ce:	695a      	ldr	r2, [r3, #20]
    27d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    27d4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    27d6:	4770      	bx	lr
    27d8:	e000ed00 	.word	0xe000ed00

000027dc <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    27dc:	4770      	bx	lr
    27de:	bf00      	nop

000027e0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    27e0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    27e4:	4905      	ldr	r1, [pc, #20]	; (27fc <sys_arch_reboot+0x1c>)
    27e6:	4b06      	ldr	r3, [pc, #24]	; (2800 <CONFIG_MAIN_STACK_SIZE>)
    27e8:	68ca      	ldr	r2, [r1, #12]
    27ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    27ee:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    27f0:	60cb      	str	r3, [r1, #12]
    27f2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    27f6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    27f8:	e7fd      	b.n	27f6 <sys_arch_reboot+0x16>
    27fa:	bf00      	nop
    27fc:	e000ed00 	.word	0xe000ed00
    2800:	05fa0004 	.word	0x05fa0004

00002804 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2804:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2806:	2120      	movs	r1, #32
    2808:	4803      	ldr	r0, [pc, #12]	; (2818 <z_arm_interrupt_init+0x14>)
    280a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    280c:	3301      	adds	r3, #1
    280e:	2b45      	cmp	r3, #69	; 0x45
    2810:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2814:	d1f9      	bne.n	280a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2816:	4770      	bx	lr
    2818:	e000e100 	.word	0xe000e100

0000281c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    281c:	b508      	push	{r3, lr}
	if (_current == thread) {
    281e:	4b0e      	ldr	r3, [pc, #56]	; (2858 <z_impl_k_thread_abort+0x3c>)
    2820:	689b      	ldr	r3, [r3, #8]
    2822:	4283      	cmp	r3, r0
    2824:	d107      	bne.n	2836 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2826:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    282a:	b193      	cbz	r3, 2852 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    282c:	4a0b      	ldr	r2, [pc, #44]	; (285c <z_impl_k_thread_abort+0x40>)
    282e:	6853      	ldr	r3, [r2, #4]
    2830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2834:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    2836:	f002 f9f9 	bl	4c2c <z_thread_single_abort>
	__asm__ volatile(
    283a:	f04f 0320 	mov.w	r3, #32
    283e:	f3ef 8011 	mrs	r0, BASEPRI
    2842:	f383 8811 	msr	BASEPRI, r3
    2846:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    284a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    284e:	f005 bbeb 	b.w	8028 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    2852:	f002 fb0f 	bl	4e74 <z_self_abort>
    2856:	bf00      	nop
    2858:	2000113c 	.word	0x2000113c
    285c:	e000ed00 	.word	0xe000ed00

00002860 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2860:	2101      	movs	r1, #1
    2862:	4b02      	ldr	r3, [pc, #8]	; (286c <z_arm_configure_static_mpu_regions+0xc>)
    2864:	4a02      	ldr	r2, [pc, #8]	; (2870 <z_arm_configure_static_mpu_regions+0x10>)
    2866:	4803      	ldr	r0, [pc, #12]	; (2874 <z_arm_configure_static_mpu_regions+0x14>)
    2868:	f000 b932 	b.w	2ad0 <arm_core_mpu_configure_static_mpu_regions>
    286c:	2007e000 	.word	0x2007e000
    2870:	20000000 	.word	0x20000000
    2874:	000085c8 	.word	0x000085c8

00002878 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2878:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    287a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    287c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    287e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2882:	f004 031f 	and.w	r3, r4, #31
    2886:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2888:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    288a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    288c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2890:	4904      	ldr	r1, [pc, #16]	; (28a4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2892:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2896:	f043 0301 	orr.w	r3, r3, #1
    289a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    289c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    289e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    28a0:	bd10      	pop	{r4, pc}
    28a2:	bf00      	nop
    28a4:	e000ed90 	.word	0xe000ed90

000028a8 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    28a8:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    28aa:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    28ac:	680c      	ldr	r4, [r1, #0]
{
    28ae:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    28b0:	890a      	ldrh	r2, [r1, #8]
    28b2:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    28b4:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    28b6:	3b01      	subs	r3, #1
    28b8:	f024 041f 	bic.w	r4, r4, #31
    28bc:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    28be:	f002 021f 	and.w	r2, r2, #31
    28c2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    28c6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    28ca:	2807      	cmp	r0, #7
    28cc:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    28ce:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    28d2:	9303      	str	r3, [sp, #12]
    28d4:	d909      	bls.n	28ea <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    28d6:	4602      	mov	r2, r0
    28d8:	2145      	movs	r1, #69	; 0x45
    28da:	4806      	ldr	r0, [pc, #24]	; (28f4 <mpu_configure_region+0x4c>)
    28dc:	f003 f85f 	bl	599e <printk>
    28e0:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    28e4:	4620      	mov	r0, r4
    28e6:	b005      	add	sp, #20
    28e8:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    28ea:	4669      	mov	r1, sp
    28ec:	f7ff ffc4 	bl	2878 <region_init>
	return region_allocate_and_init(index,
    28f0:	e7f8      	b.n	28e4 <mpu_configure_region+0x3c>
    28f2:	bf00      	nop
    28f4:	00009349 	.word	0x00009349

000028f8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    28f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28fc:	4689      	mov	r9, r1
    28fe:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2900:	4606      	mov	r6, r0
    2902:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2906:	4d52      	ldr	r5, [pc, #328]	; (2a50 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2908:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    290a:	45c8      	cmp	r8, r9
    290c:	da23      	bge.n	2956 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    290e:	6877      	ldr	r7, [r6, #4]
    2910:	2f00      	cmp	r7, #0
    2912:	d042      	beq.n	299a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    2914:	2f1f      	cmp	r7, #31
    2916:	d917      	bls.n	2948 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    2918:	06fb      	lsls	r3, r7, #27
    291a:	d115      	bne.n	2948 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    291c:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    2920:	f01a 0f1f 	tst.w	sl, #31
    2924:	d110      	bne.n	2948 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2926:	4650      	mov	r0, sl
    2928:	f003 fb8c 	bl	6044 <arm_cmse_mpu_region_get>
    292c:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    292e:	eb07 000a 	add.w	r0, r7, sl
    2932:	3801      	subs	r0, #1
    2934:	f003 fb86 	bl	6044 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2938:	4583      	cmp	fp, r0
    293a:	d010      	beq.n	295e <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    293c:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2940:	465a      	mov	r2, fp
    2942:	2145      	movs	r1, #69	; 0x45
    2944:	4843      	ldr	r0, [pc, #268]	; (2a54 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    2946:	e002      	b.n	294e <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2948:	4642      	mov	r2, r8
    294a:	2145      	movs	r1, #69	; 0x45
    294c:	4842      	ldr	r0, [pc, #264]	; (2a58 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    294e:	f003 f826 	bl	599e <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2952:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2956:	4620      	mov	r0, r4
    2958:	b005      	add	sp, #20
    295a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    295e:	f11b 0f16 	cmn.w	fp, #22
    2962:	d0ed      	beq.n	2940 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    2964:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2966:	455b      	cmp	r3, fp
    2968:	dbea      	blt.n	2940 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    296a:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    296e:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    2970:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2974:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2976:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    297a:	e9d6 3200 	ldrd	r3, r2, [r6]
    297e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2980:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2982:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2986:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    298a:	d11c      	bne.n	29c6 <mpu_configure_regions_and_partition.constprop.0+0xce>
    298c:	4557      	cmp	r7, sl
    298e:	d108      	bne.n	29a2 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    2990:	4631      	mov	r1, r6
    2992:	fa5f f08b 	uxtb.w	r0, fp
    2996:	f7ff ff87 	bl	28a8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    299a:	f108 0801 	add.w	r8, r8, #1
    299e:	360c      	adds	r6, #12
    29a0:	e7b3      	b.n	290a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    29a2:	4631      	mov	r1, r6
	MPU->RNR = index;
    29a4:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    29a8:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    29aa:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    29ae:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    29b2:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    29b4:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    29b6:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    29b8:	f7ff ff76 	bl	28a8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    29bc:	f110 0f16 	cmn.w	r0, #22
    29c0:	d0c7      	beq.n	2952 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    29c2:	1c44      	adds	r4, r0, #1
    29c4:	e7e9      	b.n	299a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    29c6:	3b01      	subs	r3, #1
    29c8:	4557      	cmp	r7, sl
    29ca:	b2e0      	uxtb	r0, r4
    29cc:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    29d0:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    29d4:	d106      	bne.n	29e4 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    29d6:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    29d8:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    29da:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    29de:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    29e0:	612b      	str	r3, [r5, #16]
			reg_index =
    29e2:	e7e9      	b.n	29b8 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    29e4:	6929      	ldr	r1, [r5, #16]
    29e6:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    29ea:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    29ec:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    29ee:	4631      	mov	r1, r6
    29f0:	f7ff ff5a 	bl	28a8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    29f4:	f110 0f16 	cmn.w	r0, #22
    29f8:	d0ab      	beq.n	2952 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    29fa:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    29fe:	68ea      	ldr	r2, [r5, #12]
    2a00:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    2a04:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    2a06:	f362 0304 	bfi	r3, r2, #0, #5
    2a0a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2a0e:	692b      	ldr	r3, [r5, #16]
    2a10:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2a14:	085b      	lsrs	r3, r3, #1
    2a16:	f363 1247 	bfi	r2, r3, #5, #3
    2a1a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    2a1e:	e9d6 3200 	ldrd	r3, r2, [r6]
    2a22:	4413      	add	r3, r2
    2a24:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    2a26:	f023 031f 	bic.w	r3, r3, #31
    2a2a:	443b      	add	r3, r7
			reg_index++;
    2a2c:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2a2e:	eba3 0a0a 	sub.w	sl, r3, sl
    2a32:	b2e0      	uxtb	r0, r4
    2a34:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    2a38:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    2a3a:	9303      	str	r3, [sp, #12]
    2a3c:	d903      	bls.n	2a46 <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2a3e:	4602      	mov	r2, r0
    2a40:	2145      	movs	r1, #69	; 0x45
    2a42:	4806      	ldr	r0, [pc, #24]	; (2a5c <mpu_configure_regions_and_partition.constprop.0+0x164>)
    2a44:	e783      	b.n	294e <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    2a46:	4669      	mov	r1, sp
    2a48:	f7ff ff16 	bl	2878 <region_init>
    2a4c:	e7b9      	b.n	29c2 <mpu_configure_regions_and_partition.constprop.0+0xca>
    2a4e:	bf00      	nop
    2a50:	e000ed90 	.word	0xe000ed90
    2a54:	0000939c 	.word	0x0000939c
    2a58:	00009374 	.word	0x00009374
    2a5c:	00009349 	.word	0x00009349

00002a60 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2a60:	2205      	movs	r2, #5
    2a62:	4b03      	ldr	r3, [pc, #12]	; (2a70 <arm_core_mpu_enable+0x10>)
    2a64:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2a66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a6a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2a6e:	4770      	bx	lr
    2a70:	e000ed90 	.word	0xe000ed90

00002a74 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2a74:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2a78:	2200      	movs	r2, #0
    2a7a:	4b01      	ldr	r3, [pc, #4]	; (2a80 <arm_core_mpu_disable+0xc>)
    2a7c:	605a      	str	r2, [r3, #4]
}
    2a7e:	4770      	bx	lr
    2a80:	e000ed90 	.word	0xe000ed90

00002a84 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    2a84:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2a86:	4c0e      	ldr	r4, [pc, #56]	; (2ac0 <arm_mpu_init+0x3c>)
    2a88:	6825      	ldr	r5, [r4, #0]
    2a8a:	2d08      	cmp	r5, #8
    2a8c:	d814      	bhi.n	2ab8 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2a8e:	f7ff fff1 	bl	2a74 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2a92:	2000      	movs	r0, #0
	MPU->MAIR0 =
    2a94:	4b0b      	ldr	r3, [pc, #44]	; (2ac4 <arm_mpu_init+0x40>)
    2a96:	4a0c      	ldr	r2, [pc, #48]	; (2ac8 <arm_mpu_init+0x44>)
    2a98:	631a      	str	r2, [r3, #48]	; 0x30
    2a9a:	4285      	cmp	r5, r0
    2a9c:	d105      	bne.n	2aaa <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2a9e:	4b0b      	ldr	r3, [pc, #44]	; (2acc <arm_mpu_init+0x48>)
    2aa0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    2aa2:	f7ff ffdd 	bl	2a60 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    2aa6:	2000      	movs	r0, #0
}
    2aa8:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2aaa:	6861      	ldr	r1, [r4, #4]
    2aac:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2ab0:	f7ff fee2 	bl	2878 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2ab4:	3001      	adds	r0, #1
    2ab6:	e7f0      	b.n	2a9a <arm_mpu_init+0x16>
		return -1;
    2ab8:	f04f 30ff 	mov.w	r0, #4294967295
    2abc:	e7f4      	b.n	2aa8 <arm_mpu_init+0x24>
    2abe:	bf00      	nop
    2ac0:	000085d4 	.word	0x000085d4
    2ac4:	e000ed90 	.word	0xe000ed90
    2ac8:	0044ffaa 	.word	0x0044ffaa
    2acc:	20002e88 	.word	0x20002e88

00002ad0 <arm_core_mpu_configure_static_mpu_regions>:
{
    2ad0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2ad2:	4c03      	ldr	r4, [pc, #12]	; (2ae0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2ad4:	7822      	ldrb	r2, [r4, #0]
    2ad6:	f7ff ff0f 	bl	28f8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2ada:	7020      	strb	r0, [r4, #0]
}
    2adc:	bd10      	pop	{r4, pc}
    2ade:	bf00      	nop
    2ae0:	20002e88 	.word	0x20002e88

00002ae4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2ae4:	4b01      	ldr	r3, [pc, #4]	; (2aec <__stdout_hook_install+0x8>)
    2ae6:	6018      	str	r0, [r3, #0]
}
    2ae8:	4770      	bx	lr
    2aea:	bf00      	nop
    2aec:	20000030 	.word	0x20000030

00002af0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2af0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    2af2:	4b09      	ldr	r3, [pc, #36]	; (2b18 <gpio_nrfx_init+0x28>)
    2af4:	781a      	ldrb	r2, [r3, #0]
    2af6:	b96a      	cbnz	r2, 2b14 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    2af8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2afa:	200d      	movs	r0, #13
		gpio_initialized = true;
    2afc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2afe:	2105      	movs	r1, #5
    2b00:	f7ff fbbc 	bl	227c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    2b04:	200d      	movs	r0, #13
    2b06:	f7ff fb9b 	bl	2240 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2b0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2b0e:	4b03      	ldr	r3, [pc, #12]	; (2b1c <gpio_nrfx_init+0x2c>)
    2b10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2b14:	2000      	movs	r0, #0
    2b16:	bd08      	pop	{r3, pc}
    2b18:	20002e89 	.word	0x20002e89
    2b1c:	5000d000 	.word	0x5000d000

00002b20 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b20:	4b2a      	ldr	r3, [pc, #168]	; (2bcc <gpio_nrfx_config+0xac>)
{
    2b22:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2b24:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b26:	482a      	ldr	r0, [pc, #168]	; (2bd0 <gpio_nrfx_config+0xb0>)
    2b28:	4013      	ands	r3, r2
    2b2a:	4283      	cmp	r3, r0
    2b2c:	d03f      	beq.n	2bae <gpio_nrfx_config+0x8e>
    2b2e:	d80d      	bhi.n	2b4c <gpio_nrfx_config+0x2c>
    2b30:	2b06      	cmp	r3, #6
    2b32:	d015      	beq.n	2b60 <gpio_nrfx_config+0x40>
    2b34:	d805      	bhi.n	2b42 <gpio_nrfx_config+0x22>
    2b36:	b19b      	cbz	r3, 2b60 <gpio_nrfx_config+0x40>
    2b38:	2b02      	cmp	r3, #2
    2b3a:	d03a      	beq.n	2bb2 <gpio_nrfx_config+0x92>
    2b3c:	f06f 0015 	mvn.w	r0, #21
    2b40:	e034      	b.n	2bac <gpio_nrfx_config+0x8c>
    2b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2b46:	d1f9      	bne.n	2b3c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    2b48:	2301      	movs	r3, #1
    2b4a:	e009      	b.n	2b60 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b4c:	4821      	ldr	r0, [pc, #132]	; (2bd4 <gpio_nrfx_config+0xb4>)
    2b4e:	4283      	cmp	r3, r0
    2b50:	d031      	beq.n	2bb6 <gpio_nrfx_config+0x96>
    2b52:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2b56:	d030      	beq.n	2bba <gpio_nrfx_config+0x9a>
    2b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2b5c:	d1ee      	bne.n	2b3c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    2b5e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    2b60:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    2b62:	bf4c      	ite	mi
    2b64:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    2b66:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2b6a:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    2b6e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    2b70:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2b74:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2b78:	d506      	bpl.n	2b88 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2b7a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2b7e:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2b80:	d01d      	beq.n	2bbe <gpio_nrfx_config+0x9e>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2b82:	2201      	movs	r2, #1
    2b84:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    2b86:	60ba      	str	r2, [r7, #8]
    return pin_number >> 5;
    2b88:	7a27      	ldrb	r7, [r4, #8]
        case 1: return NRF_P1;
    2b8a:	4a13      	ldr	r2, [pc, #76]	; (2bd8 <gpio_nrfx_config+0xb8>)
    2b8c:	4c13      	ldr	r4, [pc, #76]	; (2bdc <gpio_nrfx_config+0xbc>)
    *p_pin = pin_number & 0x1F;
    2b8e:	f001 011f 	and.w	r1, r1, #31
        case 1: return NRF_P1;
    2b92:	2f01      	cmp	r7, #1
    2b94:	bf08      	it	eq
    2b96:	4614      	moveq	r4, r2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2b98:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
	return 0;
    2b9c:	2000      	movs	r0, #0
    2b9e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    2ba2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2ba6:	3180      	adds	r1, #128	; 0x80
    2ba8:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
    2bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2bae:	2307      	movs	r3, #7
    2bb0:	e7d6      	b.n	2b60 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    2bb2:	2304      	movs	r3, #4
    2bb4:	e7d4      	b.n	2b60 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    2bb6:	2305      	movs	r3, #5
    2bb8:	e7d2      	b.n	2b60 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    2bba:	2303      	movs	r3, #3
    2bbc:	e7d0      	b.n	2b60 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2bbe:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2bc0:	bf42      	ittt	mi
    2bc2:	2201      	movmi	r2, #1
    2bc4:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    2bc6:	60fa      	strmi	r2, [r7, #12]
}
    2bc8:	e7de      	b.n	2b88 <gpio_nrfx_config+0x68>
    2bca:	bf00      	nop
    2bcc:	00f00006 	.word	0x00f00006
    2bd0:	00100006 	.word	0x00100006
    2bd4:	00400002 	.word	0x00400002
    2bd8:	50842800 	.word	0x50842800
    2bdc:	50842500 	.word	0x50842500

00002be0 <nrf_gpio_cfg_sense_set>:
{
    2be0:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
    2be2:	4b09      	ldr	r3, [pc, #36]	; (2c08 <nrf_gpio_cfg_sense_set+0x28>)
    2be4:	4c09      	ldr	r4, [pc, #36]	; (2c0c <nrf_gpio_cfg_sense_set+0x2c>)
    *p_pin = pin_number & 0x1F;
    2be6:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2bea:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    2bec:	2801      	cmp	r0, #1
    2bee:	bf08      	it	eq
    2bf0:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2bf2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2bf6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2bfa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2bfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    2c02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    2c06:	bd10      	pop	{r4, pc}
    2c08:	50842500 	.word	0x50842500
    2c0c:	50842800 	.word	0x50842800

00002c10 <gpio_nrfx_pin_interrupt_configure>:
{
    2c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c12:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2c14:	6841      	ldr	r1, [r0, #4]
    2c16:	f006 051f 	and.w	r5, r6, #31
    2c1a:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    2c1c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    2c20:	68c7      	ldr	r7, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    2c22:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    2c26:	d111      	bne.n	2c4c <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    2c28:	4c5f      	ldr	r4, [pc, #380]	; (2da8 <gpio_nrfx_pin_interrupt_configure+0x198>)
    2c2a:	f8df c188 	ldr.w	ip, [pc, #392]	; 2db4 <gpio_nrfx_pin_interrupt_configure+0x1a4>
    return pin_number >> 5;
    2c2e:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    2c30:	2801      	cmp	r0, #1
    2c32:	bf14      	ite	ne
    2c34:	4620      	movne	r0, r4
    2c36:	4660      	moveq	r0, ip
    *p_pin = pin_number & 0x1F;
    2c38:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2c3c:	3180      	adds	r1, #128	; 0x80
    2c3e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2c42:	07c8      	lsls	r0, r1, #31
    2c44:	d507      	bpl.n	2c56 <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
    2c46:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2c4a:	e093      	b.n	2d74 <gpio_nrfx_pin_interrupt_configure+0x164>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2c4c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2c50:	68f9      	ldr	r1, [r7, #12]
    2c52:	f000 8091 	beq.w	2d78 <gpio_nrfx_pin_interrupt_configure+0x168>
    2c56:	2101      	movs	r1, #1
    2c58:	68f8      	ldr	r0, [r7, #12]
    2c5a:	40b1      	lsls	r1, r6
    2c5c:	4301      	orrs	r1, r0
    2c5e:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2c60:	2101      	movs	r1, #1
    2c62:	6978      	ldr	r0, [r7, #20]
    2c64:	40b1      	lsls	r1, r6
    2c66:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2c6a:	bf0c      	ite	eq
    2c6c:	4308      	orreq	r0, r1
    2c6e:	4388      	bicne	r0, r1
    2c70:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2c72:	2000      	movs	r0, #0
    2c74:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2c76:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2c7a:	bf0c      	ite	eq
    2c7c:	430a      	orreq	r2, r1
    2c7e:	438a      	bicne	r2, r1
    2c80:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2c82:	693a      	ldr	r2, [r7, #16]
    2c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    2c88:	bf0c      	ite	eq
    2c8a:	4311      	orreq	r1, r2
    2c8c:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2c90:	4a46      	ldr	r2, [pc, #280]	; (2dac <gpio_nrfx_pin_interrupt_configure+0x19c>)
    2c92:	6139      	str	r1, [r7, #16]
    2c94:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2c98:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2c9a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    2c9e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2ca2:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2ca6:	428d      	cmp	r5, r1
    2ca8:	d16b      	bne.n	2d82 <gpio_nrfx_pin_interrupt_configure+0x172>
		    && (intenset & BIT(i))) {
    2caa:	fa23 f100 	lsr.w	r1, r3, r0
    2cae:	07c9      	lsls	r1, r1, #31
    2cb0:	d567      	bpl.n	2d82 <gpio_nrfx_pin_interrupt_configure+0x172>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2cb2:	0083      	lsls	r3, r0, #2
    2cb4:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2cb8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2cbc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    2cc0:	f021 0101 	bic.w	r1, r1, #1
    2cc4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    2cc8:	2301      	movs	r3, #1
    2cca:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    2ccc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    2cd0:	b2c0      	uxtb	r0, r0
    2cd2:	f000 fe0d 	bl	38f0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2cd6:	4628      	mov	r0, r5
    2cd8:	2100      	movs	r1, #0
    2cda:	f7ff ff81 	bl	2be0 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    2cde:	68f8      	ldr	r0, [r7, #12]
    2ce0:	40f0      	lsrs	r0, r6
    2ce2:	f010 0001 	ands.w	r0, r0, #1
    2ce6:	d045      	beq.n	2d74 <gpio_nrfx_pin_interrupt_configure+0x164>
		if (data->trig_edge & BIT(pin)) {
    2ce8:	6978      	ldr	r0, [r7, #20]
    2cea:	40f0      	lsrs	r0, r6
    2cec:	f010 0401 	ands.w	r4, r0, #1
    2cf0:	d04e      	beq.n	2d90 <gpio_nrfx_pin_interrupt_configure+0x180>
			if (data->double_edge & BIT(pin)) {
    2cf2:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2cf4:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
    2cf8:	40f3      	lsrs	r3, r6
    2cfa:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2cfc:	bf57      	itett	pl
    2cfe:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2d00:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2d02:	fa21 f606 	lsrpl.w	r6, r1, r6
    2d06:	f006 0601 	andpl.w	r6, r6, #1
    2d0a:	bf5c      	itt	pl
    2d0c:	f1c6 0602 	rsbpl	r6, r6, #2
    2d10:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2d12:	f000 fe0f 	bl	3934 <nrfx_gpiote_channel_alloc>
    2d16:	4b26      	ldr	r3, [pc, #152]	; (2db0 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    2d18:	4298      	cmp	r0, r3
    2d1a:	d136      	bne.n	2d8a <gpio_nrfx_pin_interrupt_configure+0x17a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2d1c:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    2d1e:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2d22:	022d      	lsls	r5, r5, #8
    2d24:	008b      	lsls	r3, r1, #2
    2d26:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2d2a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2d2e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2d32:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2d36:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    2d3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    2d3e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2d42:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2d46:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    2d48:	008a      	lsls	r2, r1, #2
    2d4a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2d4e:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2d52:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    2d56:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2d5a:	6010      	str	r0, [r2, #0]
    2d5c:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2d5e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2d62:	f042 0201 	orr.w	r2, r2, #1
    2d66:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    2d6a:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    2d6c:	4a0f      	ldr	r2, [pc, #60]	; (2dac <gpio_nrfx_pin_interrupt_configure+0x19c>)
    2d6e:	408b      	lsls	r3, r1
    2d70:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2d74:	b003      	add	sp, #12
    2d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2d78:	2001      	movs	r0, #1
    2d7a:	40b0      	lsls	r0, r6
    2d7c:	ea21 0100 	bic.w	r1, r1, r0
    2d80:	e76d      	b.n	2c5e <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2d82:	3001      	adds	r0, #1
    2d84:	2808      	cmp	r0, #8
    2d86:	d188      	bne.n	2c9a <gpio_nrfx_pin_interrupt_configure+0x8a>
    2d88:	e7a5      	b.n	2cd6 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    2d8a:	f06f 0012 	mvn.w	r0, #18
    2d8e:	e7f1      	b.n	2d74 <gpio_nrfx_pin_interrupt_configure+0x164>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2d90:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2d92:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2d94:	40f1      	lsrs	r1, r6
    2d96:	f001 0101 	and.w	r1, r1, #1
    2d9a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2d9e:	b2c9      	uxtb	r1, r1
    2da0:	f7ff ff1e 	bl	2be0 <nrf_gpio_cfg_sense_set>
	int res = 0;
    2da4:	4620      	mov	r0, r4
    2da6:	e7e5      	b.n	2d74 <gpio_nrfx_pin_interrupt_configure+0x164>
    2da8:	50842500 	.word	0x50842500
    2dac:	5000d000 	.word	0x5000d000
    2db0:	0bad0000 	.word	0x0bad0000
    2db4:	50842800 	.word	0x50842800

00002db8 <gpiote_event_handler>:
{
    2db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2dba:	2600      	movs	r6, #0
    2dbc:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2dc0:	4d26      	ldr	r5, [pc, #152]	; (2e5c <gpiote_event_handler+0xa4>)
    2dc2:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    2dc4:	b14c      	cbz	r4, 2dda <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
    2dc6:	4826      	ldr	r0, [pc, #152]	; (2e60 <gpiote_event_handler+0xa8>)
    2dc8:	f003 fa15 	bl	61f6 <check_level_trigger_pins>
		fired_triggers[0] =
    2dcc:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
    2dce:	4825      	ldr	r0, [pc, #148]	; (2e64 <gpiote_event_handler+0xac>)
    2dd0:	f003 fa11 	bl	61f6 <check_level_trigger_pins>
		fired_triggers[1] =
    2dd4:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2dd6:	602e      	str	r6, [r5, #0]
    2dd8:	682b      	ldr	r3, [r5, #0]
{
    2dda:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2ddc:	2601      	movs	r6, #1
    2dde:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    2de0:	4d21      	ldr	r5, [pc, #132]	; (2e68 <gpiote_event_handler+0xb0>)
    2de2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    2de6:	fa06 f102 	lsl.w	r1, r6, r2
    2dea:	4219      	tst	r1, r3
    2dec:	d01b      	beq.n	2e26 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2dee:	0091      	lsls	r1, r2, #2
    2df0:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    2df4:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    2df8:	680b      	ldr	r3, [r1, #0]
    2dfa:	b1a3      	cbz	r3, 2e26 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2dfc:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    2e00:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2e04:	af02      	add	r7, sp, #8
    2e06:	f3c3 3040 	ubfx	r0, r3, #13, #1
    2e0a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2e0e:	f850 7c08 	ldr.w	r7, [r0, #-8]
    2e12:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2e16:	fa06 f303 	lsl.w	r3, r6, r3
    2e1a:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2e1c:	f8c1 c000 	str.w	ip, [r1]
    2e20:	f840 3c08 	str.w	r3, [r0, #-8]
    2e24:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2e26:	3201      	adds	r2, #1
    2e28:	2a08      	cmp	r2, #8
    2e2a:	d1da      	bne.n	2de2 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
    2e2c:	9a00      	ldr	r2, [sp, #0]
    2e2e:	b11a      	cbz	r2, 2e38 <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
    2e30:	490b      	ldr	r1, [pc, #44]	; (2e60 <gpiote_event_handler+0xa8>)
    2e32:	480e      	ldr	r0, [pc, #56]	; (2e6c <gpiote_event_handler+0xb4>)
    2e34:	f003 f97c 	bl	6130 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    2e38:	9a01      	ldr	r2, [sp, #4]
    2e3a:	b11a      	cbz	r2, 2e44 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
    2e3c:	4909      	ldr	r1, [pc, #36]	; (2e64 <gpiote_event_handler+0xac>)
    2e3e:	480c      	ldr	r0, [pc, #48]	; (2e70 <gpiote_event_handler+0xb8>)
    2e40:	f003 f976 	bl	6130 <gpio_fire_callbacks>
	if (port_event) {
    2e44:	b144      	cbz	r4, 2e58 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    2e46:	4806      	ldr	r0, [pc, #24]	; (2e60 <gpiote_event_handler+0xa8>)
    2e48:	f003 f9fd 	bl	6246 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    2e4c:	4805      	ldr	r0, [pc, #20]	; (2e64 <gpiote_event_handler+0xac>)
}
    2e4e:	b003      	add	sp, #12
    2e50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    2e54:	f003 b9f7 	b.w	6246 <cfg_level_pins>
}
    2e58:	b003      	add	sp, #12
    2e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e5c:	5000d17c 	.word	0x5000d17c
    2e60:	2000010c 	.word	0x2000010c
    2e64:	2000011c 	.word	0x2000011c
    2e68:	5000d000 	.word	0x5000d000
    2e6c:	20001080 	.word	0x20001080
    2e70:	2000109c 	.word	0x2000109c

00002e74 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2e74:	4b02      	ldr	r3, [pc, #8]	; (2e80 <flash_nrf_pages_layout+0xc>)
    2e76:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2e78:	2301      	movs	r3, #1
    2e7a:	6013      	str	r3, [r2, #0]
}
    2e7c:	4770      	bx	lr
    2e7e:	bf00      	nop
    2e80:	200010b4 	.word	0x200010b4

00002e84 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2e84:	4800      	ldr	r0, [pc, #0]	; (2e88 <flash_nrf_get_parameters+0x4>)
    2e86:	4770      	bx	lr
    2e88:	00008650 	.word	0x00008650

00002e8c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    2e8c:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2e8e:	f003 fc44 	bl	671a <nrfx_nvmc_flash_page_count_get>
    2e92:	4c03      	ldr	r4, [pc, #12]	; (2ea0 <nrf_flash_init+0x14>)
    2e94:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2e96:	f003 fc3d 	bl	6714 <nrfx_nvmc_flash_page_size_get>
    2e9a:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2e9c:	2000      	movs	r0, #0
    2e9e:	bd10      	pop	{r4, pc}
    2ea0:	200010b4 	.word	0x200010b4

00002ea4 <flash_nrf_erase>:
{
    2ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ea6:	460e      	mov	r6, r1
    2ea8:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2eaa:	f003 fc33 	bl	6714 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    2eae:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2eb0:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    2eb2:	4630      	mov	r0, r6
    2eb4:	f003 f9ef 	bl	6296 <is_regular_addr_valid>
    2eb8:	4637      	mov	r7, r6
    2eba:	b1f8      	cbz	r0, 2efc <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2ebc:	fbb6 f3f5 	udiv	r3, r6, r5
    2ec0:	fb05 6313 	mls	r3, r5, r3, r6
    2ec4:	b923      	cbnz	r3, 2ed0 <flash_nrf_erase+0x2c>
    2ec6:	fbb4 f0f5 	udiv	r0, r4, r5
    2eca:	fb05 4010 	mls	r0, r5, r0, r4
    2ece:	b140      	cbz	r0, 2ee2 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    2ed0:	4623      	mov	r3, r4
    2ed2:	4632      	mov	r2, r6
    2ed4:	2145      	movs	r1, #69	; 0x45
    2ed6:	480c      	ldr	r0, [pc, #48]	; (2f08 <flash_nrf_erase+0x64>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2ed8:	f002 fd61 	bl	599e <printk>
    2edc:	f06f 0015 	mvn.w	r0, #21
    2ee0:	e00b      	b.n	2efa <flash_nrf_erase+0x56>
		if (!n_pages) {
    2ee2:	42a5      	cmp	r5, r4
    2ee4:	d809      	bhi.n	2efa <flash_nrf_erase+0x56>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2ee6:	f003 fc15 	bl	6714 <nrfx_nvmc_flash_page_size_get>
    2eea:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    2eec:	4638      	mov	r0, r7
    2eee:	f000 fd63 	bl	39b8 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    2ef2:	1b64      	subs	r4, r4, r5
    2ef4:	442f      	add	r7, r5
    2ef6:	d1f9      	bne.n	2eec <flash_nrf_erase+0x48>
	return ret;
    2ef8:	4620      	mov	r0, r4
}
    2efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2efc:	4623      	mov	r3, r4
    2efe:	4632      	mov	r2, r6
    2f00:	2145      	movs	r1, #69	; 0x45
    2f02:	4802      	ldr	r0, [pc, #8]	; (2f0c <flash_nrf_erase+0x68>)
    2f04:	e7e8      	b.n	2ed8 <flash_nrf_erase+0x34>
    2f06:	bf00      	nop
    2f08:	000093e1 	.word	0x000093e1
    2f0c:	00009405 	.word	0x00009405

00002f10 <flash_nrf_read>:
{
    2f10:	b570      	push	{r4, r5, r6, lr}
    2f12:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    2f14:	4619      	mov	r1, r3
    2f16:	4628      	mov	r0, r5
{
    2f18:	4616      	mov	r6, r2
    2f1a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2f1c:	f003 f9bb 	bl	6296 <is_regular_addr_valid>
    2f20:	b940      	cbnz	r0, 2f34 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2f22:	4809      	ldr	r0, [pc, #36]	; (2f48 <flash_nrf_read+0x38>)
    2f24:	4623      	mov	r3, r4
    2f26:	462a      	mov	r2, r5
    2f28:	2145      	movs	r1, #69	; 0x45
    2f2a:	f002 fd38 	bl	599e <printk>
    2f2e:	f06f 0015 	mvn.w	r0, #21
}
    2f32:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    2f34:	b134      	cbz	r4, 2f44 <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
    2f36:	4622      	mov	r2, r4
    2f38:	4629      	mov	r1, r5
    2f3a:	4630      	mov	r0, r6
    2f3c:	f003 f8a7 	bl	608e <memcpy>
	return 0;
    2f40:	2000      	movs	r0, #0
    2f42:	e7f6      	b.n	2f32 <flash_nrf_read+0x22>
		return 0;
    2f44:	4620      	mov	r0, r4
    2f46:	e7f4      	b.n	2f32 <flash_nrf_read+0x22>
    2f48:	00009405 	.word	0x00009405

00002f4c <flash_nrf_write>:
{
    2f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f4e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    2f50:	4619      	mov	r1, r3
    2f52:	4630      	mov	r0, r6
{
    2f54:	4617      	mov	r7, r2
    2f56:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2f58:	f003 f99d 	bl	6296 <is_regular_addr_valid>
    2f5c:	b940      	cbnz	r0, 2f70 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2f5e:	4623      	mov	r3, r4
    2f60:	4632      	mov	r2, r6
    2f62:	2145      	movs	r1, #69	; 0x45
    2f64:	4812      	ldr	r0, [pc, #72]	; (2fb0 <flash_nrf_write+0x64>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2f66:	f002 fd1a 	bl	599e <printk>
		return -EINVAL;
    2f6a:	f06f 0015 	mvn.w	r0, #21
}
    2f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    2f70:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    2f74:	f015 0503 	ands.w	r5, r5, #3
    2f78:	d004      	beq.n	2f84 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2f7a:	4623      	mov	r3, r4
    2f7c:	4632      	mov	r2, r6
    2f7e:	2145      	movs	r1, #69	; 0x45
    2f80:	480c      	ldr	r0, [pc, #48]	; (2fb4 <flash_nrf_write+0x68>)
    2f82:	e7f0      	b.n	2f66 <flash_nrf_write+0x1a>
	if (!len) {
    2f84:	b18c      	cbz	r4, 2faa <flash_nrf_write+0x5e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    2f86:	192b      	adds	r3, r5, r4
    2f88:	2b03      	cmp	r3, #3
    2f8a:	eba6 0005 	sub.w	r0, r6, r5
    2f8e:	d806      	bhi.n	2f9e <flash_nrf_write+0x52>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    2f90:	4a09      	ldr	r2, [pc, #36]	; (2fb8 <flash_nrf_write+0x6c>)
    2f92:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    2f96:	07db      	lsls	r3, r3, #31
    2f98:	d5fb      	bpl.n	2f92 <flash_nrf_write+0x46>
	return ret;
    2f9a:	2000      	movs	r0, #0
    2f9c:	e7e7      	b.n	2f6e <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    2f9e:	1b7b      	subs	r3, r7, r5
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    2fa0:	6819      	ldr	r1, [r3, #0]
    2fa2:	f000 fd27 	bl	39f4 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    2fa6:	3d04      	subs	r5, #4
}
    2fa8:	e7ed      	b.n	2f86 <flash_nrf_write+0x3a>
		return 0;
    2faa:	4620      	mov	r0, r4
    2fac:	e7df      	b.n	2f6e <flash_nrf_write+0x22>
    2fae:	bf00      	nop
    2fb0:	00009405 	.word	0x00009405
    2fb4:	00009427 	.word	0x00009427
    2fb8:	50039000 	.word	0x50039000

00002fbc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2fbe:	794b      	ldrb	r3, [r1, #5]
    2fc0:	2b01      	cmp	r3, #1
    2fc2:	d02b      	beq.n	301c <uarte_nrfx_configure+0x60>
    2fc4:	2b03      	cmp	r3, #3
    2fc6:	d126      	bne.n	3016 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2fc8:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2fca:	798b      	ldrb	r3, [r1, #6]
    2fcc:	2b03      	cmp	r3, #3
    2fce:	d122      	bne.n	3016 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2fd0:	79cd      	ldrb	r5, [r1, #7]
    2fd2:	b125      	cbz	r5, 2fde <uarte_nrfx_configure+0x22>
    2fd4:	2d01      	cmp	r5, #1
    2fd6:	d11e      	bne.n	3016 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    2fd8:	6843      	ldr	r3, [r0, #4]
    2fda:	791b      	ldrb	r3, [r3, #4]
    2fdc:	b1db      	cbz	r3, 3016 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2fde:	790a      	ldrb	r2, [r1, #4]
    2fe0:	2a01      	cmp	r2, #1
    2fe2:	d01d      	beq.n	3020 <uarte_nrfx_configure+0x64>
    2fe4:	2a02      	cmp	r2, #2
    2fe6:	d01f      	beq.n	3028 <uarte_nrfx_configure+0x6c>
    2fe8:	b9aa      	cbnz	r2, 3016 <uarte_nrfx_configure+0x5a>
    2fea:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2fec:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2fee:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    2ff0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2ff4:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    2ff6:	d06e      	beq.n	30d6 <uarte_nrfx_configure+0x11a>
    2ff8:	d833      	bhi.n	3062 <uarte_nrfx_configure+0xa6>
    2ffa:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2ffe:	d06d      	beq.n	30dc <uarte_nrfx_configure+0x120>
    3000:	d81c      	bhi.n	303c <uarte_nrfx_configure+0x80>
    3002:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3006:	d06b      	beq.n	30e0 <uarte_nrfx_configure+0x124>
    3008:	d810      	bhi.n	302c <uarte_nrfx_configure+0x70>
    300a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    300e:	d06a      	beq.n	30e6 <uarte_nrfx_configure+0x12a>
    3010:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3014:	d06a      	beq.n	30ec <uarte_nrfx_configure+0x130>
    3016:	f06f 0022 	mvn.w	r0, #34	; 0x22
    301a:	e05b      	b.n	30d4 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
    301c:	2700      	movs	r7, #0
    301e:	e7d4      	b.n	2fca <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    3020:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3024:	220e      	movs	r2, #14
    3026:	e7e1      	b.n	2fec <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    3028:	2400      	movs	r4, #0
    302a:	e7fb      	b.n	3024 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    302c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3030:	d05f      	beq.n	30f2 <uarte_nrfx_configure+0x136>
    3032:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3036:	d1ee      	bne.n	3016 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3038:	4b38      	ldr	r3, [pc, #224]	; (311c <uarte_nrfx_configure+0x160>)
    303a:	e03e      	b.n	30ba <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    303c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3040:	d05a      	beq.n	30f8 <uarte_nrfx_configure+0x13c>
    3042:	d807      	bhi.n	3054 <uarte_nrfx_configure+0x98>
    3044:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3048:	d058      	beq.n	30fc <uarte_nrfx_configure+0x140>
    304a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    304e:	d1e2      	bne.n	3016 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3050:	4b33      	ldr	r3, [pc, #204]	; (3120 <uarte_nrfx_configure+0x164>)
    3052:	e032      	b.n	30ba <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    3054:	f647 2c12 	movw	ip, #31250	; 0x7a12
    3058:	4563      	cmp	r3, ip
    305a:	d1dc      	bne.n	3016 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    305c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3060:	e02b      	b.n	30ba <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    3062:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3066:	d04b      	beq.n	3100 <uarte_nrfx_configure+0x144>
    3068:	d813      	bhi.n	3092 <uarte_nrfx_configure+0xd6>
    306a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    306e:	d04a      	beq.n	3106 <uarte_nrfx_configure+0x14a>
    3070:	d809      	bhi.n	3086 <uarte_nrfx_configure+0xca>
    3072:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    3076:	4563      	cmp	r3, ip
    3078:	d047      	beq.n	310a <uarte_nrfx_configure+0x14e>
    307a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    307e:	d1ca      	bne.n	3016 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3080:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3084:	e019      	b.n	30ba <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    3086:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    308a:	d1c4      	bne.n	3016 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    308c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3090:	e013      	b.n	30ba <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    3092:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3096:	d03b      	beq.n	3110 <uarte_nrfx_configure+0x154>
    3098:	d809      	bhi.n	30ae <uarte_nrfx_configure+0xf2>
    309a:	f8df c098 	ldr.w	ip, [pc, #152]	; 3134 <uarte_nrfx_configure+0x178>
    309e:	4563      	cmp	r3, ip
    30a0:	d039      	beq.n	3116 <uarte_nrfx_configure+0x15a>
    30a2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    30a6:	d1b6      	bne.n	3016 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    30a8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    30ac:	e005      	b.n	30ba <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    30ae:	f8df c088 	ldr.w	ip, [pc, #136]	; 3138 <uarte_nrfx_configure+0x17c>
    30b2:	4563      	cmp	r3, ip
    30b4:	d1af      	bne.n	3016 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    30b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    30ba:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    30be:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    30c0:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    30c2:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    30c4:	4322      	orrs	r2, r4
    30c6:	3304      	adds	r3, #4
    30c8:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    30ca:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    30ce:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    30d2:	2000      	movs	r0, #0
}
    30d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    30d6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    30da:	e7ee      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    30dc:	4b11      	ldr	r3, [pc, #68]	; (3124 <uarte_nrfx_configure+0x168>)
    30de:	e7ec      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    30e0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    30e4:	e7e9      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    30e6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    30ea:	e7e6      	b.n	30ba <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    30ec:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    30f0:	e7e3      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    30f2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    30f6:	e7e0      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    30f8:	4b0b      	ldr	r3, [pc, #44]	; (3128 <uarte_nrfx_configure+0x16c>)
    30fa:	e7de      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    30fc:	4b0b      	ldr	r3, [pc, #44]	; (312c <uarte_nrfx_configure+0x170>)
    30fe:	e7dc      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3100:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3104:	e7d9      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3106:	4b0a      	ldr	r3, [pc, #40]	; (3130 <uarte_nrfx_configure+0x174>)
    3108:	e7d7      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    310a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    310e:	e7d4      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3110:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3114:	e7d1      	b.n	30ba <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3116:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    311a:	e7ce      	b.n	30ba <uarte_nrfx_configure+0xfe>
    311c:	0013b000 	.word	0x0013b000
    3120:	004ea000 	.word	0x004ea000
    3124:	00275000 	.word	0x00275000
    3128:	0075c000 	.word	0x0075c000
    312c:	003af000 	.word	0x003af000
    3130:	013a9000 	.word	0x013a9000
    3134:	0003d090 	.word	0x0003d090
    3138:	000f4240 	.word	0x000f4240

0000313c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3140:	4606      	mov	r6, r0
    3142:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3144:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3146:	f005 f81c 	bl	8182 <k_is_in_isr>
    314a:	b9b8      	cbnz	r0, 317c <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    314c:	4b28      	ldr	r3, [pc, #160]	; (31f0 <uarte_nrfx_poll_out+0xb4>)
    314e:	781b      	ldrb	r3, [r3, #0]
    3150:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    3154:	6872      	ldr	r2, [r6, #4]
    3156:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    3158:	b193      	cbz	r3, 3180 <uarte_nrfx_poll_out+0x44>
    315a:	f04f 0320 	mov.w	r3, #32
    315e:	f3ef 8411 	mrs	r4, BASEPRI
    3162:	f383 8811 	msr	BASEPRI, r3
    3166:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    316a:	4630      	mov	r0, r6
    316c:	f003 f920 	bl	63b0 <is_tx_ready>
    3170:	bb38      	cbnz	r0, 31c2 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    3172:	f384 8811 	msr	BASEPRI, r4
    3176:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    317a:	e7ee      	b.n	315a <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    317c:	2301      	movs	r3, #1
    317e:	e7e9      	b.n	3154 <uarte_nrfx_poll_out+0x18>
    3180:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3182:	4630      	mov	r0, r6
    3184:	f003 f914 	bl	63b0 <is_tx_ready>
    3188:	b970      	cbnz	r0, 31a8 <uarte_nrfx_poll_out+0x6c>
    318a:	2001      	movs	r0, #1
    318c:	f003 faad 	bl	66ea <nrfx_busy_wait>
    3190:	3c01      	subs	r4, #1
    3192:	d1f6      	bne.n	3182 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    3194:	2100      	movs	r1, #0
    3196:	2021      	movs	r0, #33	; 0x21
    3198:	f001 fe54 	bl	4e44 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    319c:	e7f0      	b.n	3180 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    319e:	f384 8811 	msr	BASEPRI, r4
    31a2:	f3bf 8f6f 	isb	sy
}
    31a6:	e7f5      	b.n	3194 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    31a8:	f04f 0320 	mov.w	r3, #32
    31ac:	f3ef 8411 	mrs	r4, BASEPRI
    31b0:	f383 8811 	msr	BASEPRI, r3
    31b4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    31b8:	4630      	mov	r0, r6
    31ba:	f003 f8f9 	bl	63b0 <is_tx_ready>
    31be:	2800      	cmp	r0, #0
    31c0:	d0ed      	beq.n	319e <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    31c2:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31c4:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    31c6:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    31ca:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    31ce:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31d2:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    31d6:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    31da:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    31de:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31e2:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    31e4:	f384 8811 	msr	BASEPRI, r4
    31e8:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    31ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31f0:	20002eaa 	.word	0x20002eaa

000031f4 <nrf_gpio_cfg_output>:
        case 1: return NRF_P1;
    31f4:	4b07      	ldr	r3, [pc, #28]	; (3214 <nrf_gpio_cfg_output+0x20>)
    31f6:	4908      	ldr	r1, [pc, #32]	; (3218 <nrf_gpio_cfg_output+0x24>)
    *p_pin = pin_number & 0x1F;
    31f8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    31fc:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    31fe:	2801      	cmp	r0, #1
    3200:	bf14      	ite	ne
    3202:	4618      	movne	r0, r3
    3204:	4608      	moveq	r0, r1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3206:	f102 0380 	add.w	r3, r2, #128	; 0x80
    320a:	2203      	movs	r2, #3
    320c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    3210:	4770      	bx	lr
    3212:	bf00      	nop
    3214:	50842500 	.word	0x50842500
    3218:	50842800 	.word	0x50842800

0000321c <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    321c:	4b06      	ldr	r3, [pc, #24]	; (3238 <nrf_gpio_pin_set+0x1c>)
    321e:	4907      	ldr	r1, [pc, #28]	; (323c <nrf_gpio_pin_set+0x20>)
    *p_pin = pin_number & 0x1F;
    3220:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    3224:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3226:	2801      	cmp	r0, #1
    3228:	bf14      	ite	ne
    322a:	4618      	movne	r0, r3
    322c:	4608      	moveq	r0, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    322e:	2301      	movs	r3, #1
    3230:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3232:	6083      	str	r3, [r0, #8]
}
    3234:	4770      	bx	lr
    3236:	bf00      	nop
    3238:	50842500 	.word	0x50842500
    323c:	50842800 	.word	0x50842800

00003240 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3242:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3244:	2700      	movs	r7, #0
    3246:	2101      	movs	r1, #1
    3248:	2200      	movs	r2, #0
    324a:	2008      	movs	r0, #8
    324c:	f7ff f816 	bl	227c <z_arm_irq_priority_set>
    3250:	2008      	movs	r0, #8
    3252:	f7fe fff5 	bl	2240 <arch_irq_enable>
	return config->uarte_regs;
    3256:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3258:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    325a:	681c      	ldr	r4, [r3, #0]
        nrf_gpio_pin_set(pin_number);
    325c:	2014      	movs	r0, #20
    325e:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
	data->dev = dev;
    3262:	6035      	str	r5, [r6, #0]
    3264:	f7ff ffda 	bl	321c <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
    3268:	2014      	movs	r0, #20
    326a:	f7ff ffc3 	bl	31f4 <nrf_gpio_cfg_output>
    p_reg->PSEL.TXD = pseltxd;
    326e:	2214      	movs	r2, #20
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3270:	4b2e      	ldr	r3, [pc, #184]	; (332c <uarte_0_init+0xec>)
        nrf_gpio_pin_set(pin_number);
    3272:	2013      	movs	r0, #19
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3274:	f8c3 7258 	str.w	r7, [r3, #600]	; 0x258
    3278:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    327c:	2216      	movs	r2, #22
    327e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    3282:	f8c3 7254 	str.w	r7, [r3, #596]	; 0x254
        nrf_gpio_pin_set(pin_number);
    3286:	f7ff ffc9 	bl	321c <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(config->pselrts);
    328a:	2013      	movs	r0, #19
    328c:	f7ff ffb2 	bl	31f4 <nrf_gpio_cfg_output>
    p_reg->PSEL.RTS = pselrts;
    3290:	2313      	movs	r3, #19
    3292:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    3296:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3298:	68e9      	ldr	r1, [r5, #12]
    329a:	4628      	mov	r0, r5
    329c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    32a0:	3104      	adds	r1, #4
    32a2:	f7ff fe8b 	bl	2fbc <uarte_nrfx_configure>
	if (err) {
    32a6:	4607      	mov	r7, r0
    32a8:	b978      	cbnz	r0, 32ca <uarte_0_init+0x8a>
	if (get_dev_config(dev)->ppi_endtx) {
    32aa:	686b      	ldr	r3, [r5, #4]
    32ac:	799b      	ldrb	r3, [r3, #6]
    32ae:	b1db      	cbz	r3, 32e8 <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    32b0:	f106 0016 	add.w	r0, r6, #22
    32b4:	f000 fb00 	bl	38b8 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    32b8:	4b1d      	ldr	r3, [pc, #116]	; (3330 <uarte_0_init+0xf0>)
    32ba:	4298      	cmp	r0, r3
    32bc:	d007      	beq.n	32ce <uarte_0_init+0x8e>
		LOG_ERR("Failed to allocate PPI Channel");
    32be:	2145      	movs	r1, #69	; 0x45
    32c0:	481c      	ldr	r0, [pc, #112]	; (3334 <uarte_0_init+0xf4>)
    32c2:	f002 fb6c 	bl	599e <printk>
		return -EIO;
    32c6:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    32ca:	4638      	mov	r0, r7
    32cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    32ce:	7db3      	ldrb	r3, [r6, #22]
    32d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    32d4:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    32d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    32dc:	2301      	movs	r3, #1
    32de:	7db2      	ldrb	r2, [r6, #22]
    32e0:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    32e2:	4a15      	ldr	r2, [pc, #84]	; (3338 <uarte_0_init+0xf8>)
    32e4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    32e8:	2308      	movs	r3, #8
    32ea:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32ee:	2300      	movs	r3, #0
    32f0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    32f4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    32f8:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    32fc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3300:	2301      	movs	r3, #1
    3302:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3306:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    3308:	686b      	ldr	r3, [r5, #4]
    330a:	799b      	ldrb	r3, [r3, #6]
    330c:	b91b      	cbnz	r3, 3316 <uarte_0_init+0xd6>
    p_reg->INTENSET = mask;
    330e:	f44f 7380 	mov.w	r3, #256	; 0x100
    3312:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    3316:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3318:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    331a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    331e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3322:	2301      	movs	r3, #1
    3324:	60a3      	str	r3, [r4, #8]
    3326:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    3328:	e7cf      	b.n	32ca <uarte_0_init+0x8a>
    332a:	bf00      	nop
    332c:	50842500 	.word	0x50842500
    3330:	0bad0000 	.word	0x0bad0000
    3334:	00009454 	.word	0x00009454
    3338:	50017000 	.word	0x50017000

0000333c <fprotect_area>:
#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE
#endif

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    333c:	ea40 0301 	orr.w	r3, r0, r1
    3340:	f3c3 030d 	ubfx	r3, r3, #0, #14
{
    3344:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    3346:	b98b      	cbnz	r3, 336c <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    3348:	f240 1515 	movw	r5, #277	; 0x115
    334c:	4c09      	ldr	r4, [pc, #36]	; (3374 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    334e:	0b89      	lsrs	r1, r1, #14
		nrf_spu_flashregion_set(NRF_SPU_S,
    3350:	f3c0 3087 	ubfx	r0, r0, #14, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    3354:	4299      	cmp	r1, r3
    3356:	d101      	bne.n	335c <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    3358:	2000      	movs	r0, #0
}
    335a:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    335c:	18c2      	adds	r2, r0, r3
    335e:	b2d2      	uxtb	r2, r2
    3360:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    3364:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    3368:	3301      	adds	r3, #1
    336a:	e7f3      	b.n	3354 <fprotect_area+0x18>
		return -EINVAL;
    336c:	f06f 0015 	mvn.w	r0, #21
    3370:	e7f3      	b.n	335a <fprotect_area+0x1e>
    3372:	bf00      	nop
    3374:	50003000 	.word	0x50003000

00003378 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    3378:	4803      	ldr	r0, [pc, #12]	; (3388 <k_sys_fatal_error_handler+0x10>)
    337a:	2145      	movs	r1, #69	; 0x45
{
    337c:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
    337e:	f002 fb0e 	bl	599e <printk>
	sys_arch_reboot(0);
    3382:	2000      	movs	r0, #0
    3384:	f7ff fa2c 	bl	27e0 <sys_arch_reboot>

	CODE_UNREACHABLE;
    3388:	00009488 	.word	0x00009488

0000338c <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    338c:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    338e:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    3390:	4a04      	ldr	r2, [pc, #16]	; (33a4 <boot_write_magic+0x18>)
    3392:	2310      	movs	r3, #16
    3394:	3910      	subs	r1, #16
    3396:	f002 fd39 	bl	5e0c <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    339a:	3800      	subs	r0, #0
    339c:	bf18      	it	ne
    339e:	2001      	movne	r0, #1
    33a0:	bd08      	pop	{r3, pc}
    33a2:	bf00      	nop
    33a4:	000086ac 	.word	0x000086ac

000033a8 <boot_read_swap_state>:
{
    33a8:	b530      	push	{r4, r5, lr}
    33aa:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    33ac:	6881      	ldr	r1, [r0, #8]
{
    33ae:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    33b0:	2310      	movs	r3, #16
    33b2:	aa02      	add	r2, sp, #8
    33b4:	3910      	subs	r1, #16
{
    33b6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    33b8:	f002 fd0b 	bl	5dd2 <flash_area_read>
    if (rc < 0) {
    33bc:	2800      	cmp	r0, #0
    33be:	db11      	blt.n	33e4 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
    33c0:	2210      	movs	r2, #16
    33c2:	4628      	mov	r0, r5
    33c4:	a902      	add	r1, sp, #8
    33c6:	f003 f8ec 	bl	65a2 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    33ca:	b168      	cbz	r0, 33e8 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
    33cc:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    33ce:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    33d0:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    33d2:	2301      	movs	r3, #1
    33d4:	4628      	mov	r0, r5
    33d6:	f10d 0207 	add.w	r2, sp, #7
    33da:	3928      	subs	r1, #40	; 0x28
    33dc:	f002 fcf9 	bl	5dd2 <flash_area_read>
    if (rc < 0) {
    33e0:	2800      	cmp	r0, #0
    33e2:	da0b      	bge.n	33fc <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
    33e4:	2001      	movs	r0, #1
    33e6:	e02a      	b.n	343e <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    33e8:	2210      	movs	r2, #16
    33ea:	4916      	ldr	r1, [pc, #88]	; (3444 <boot_read_swap_state+0x9c>)
    33ec:	a802      	add	r0, sp, #8
    33ee:	f002 fe3e 	bl	606e <memcmp>
    33f2:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
    33f4:	bf14      	ite	ne
    33f6:	2302      	movne	r3, #2
    33f8:	2301      	moveq	r3, #1
    33fa:	e7e8      	b.n	33ce <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    33fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3400:	4628      	mov	r0, r5
    3402:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3406:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3408:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    340a:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    340c:	2201      	movs	r2, #1
    340e:	f10d 0107 	add.w	r1, sp, #7
    3412:	f003 f8c6 	bl	65a2 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3416:	b910      	cbnz	r0, 341e <boot_read_swap_state+0x76>
    3418:	7863      	ldrb	r3, [r4, #1]
    341a:	2b04      	cmp	r3, #4
    341c:	d903      	bls.n	3426 <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    341e:	2301      	movs	r3, #1
    3420:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    3422:	2300      	movs	r3, #0
    3424:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    3426:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3428:	4628      	mov	r0, r5
    342a:	3a20      	subs	r2, #32
    342c:	1ca1      	adds	r1, r4, #2
    342e:	f003 f90c 	bl	664a <boot_read_flag>
    if (rc) {
    3432:	2800      	cmp	r0, #0
    3434:	d1d6      	bne.n	33e4 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
    3436:	4628      	mov	r0, r5
    3438:	1ce1      	adds	r1, r4, #3
    343a:	f003 f92f 	bl	669c <boot_read_image_ok>
}
    343e:	b007      	add	sp, #28
    3440:	bd30      	pop	{r4, r5, pc}
    3442:	bf00      	nop
    3444:	000086ac 	.word	0x000086ac

00003448 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    344c:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    344e:	4669      	mov	r1, sp
    3450:	2002      	movs	r0, #2
    3452:	f003 f927 	bl	66a4 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    3456:	b118      	cbz	r0, 3460 <boot_swap_type_multi+0x18>
        return BOOT_SWAP_TYPE_PANIC;
    3458:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    345a:	b005      	add	sp, #20
    345c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3460:	2005      	movs	r0, #5
    3462:	a902      	add	r1, sp, #8
    3464:	f003 f91e 	bl	66a4 <boot_read_swap_state_by_id>
    if (rc) {
    3468:	4602      	mov	r2, r0
    346a:	2800      	cmp	r0, #0
    346c:	d1f4      	bne.n	3458 <boot_swap_type_multi+0x10>
        if (boot_magic_compatible_check(table->magic_primary_slot,
    346e:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3472:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3476:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    347a:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    347e:	f89d 9002 	ldrb.w	r9, [sp, #2]
    3482:	4c1e      	ldr	r4, [pc, #120]	; (34fc <boot_swap_type_multi+0xb4>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3484:	4629      	mov	r1, r5
    3486:	7820      	ldrb	r0, [r4, #0]
    3488:	f003 f8cb 	bl	6622 <boot_magic_compatible_check>
    348c:	b300      	cbz	r0, 34d0 <boot_swap_type_multi+0x88>
            boot_magic_compatible_check(table->magic_secondary_slot,
    348e:	4631      	mov	r1, r6
    3490:	7860      	ldrb	r0, [r4, #1]
    3492:	f003 f8c6 	bl	6622 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3496:	b1d8      	cbz	r0, 34d0 <boot_swap_type_multi+0x88>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3498:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    349a:	2b04      	cmp	r3, #4
    349c:	d001      	beq.n	34a2 <boot_swap_type_multi+0x5a>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    349e:	42bb      	cmp	r3, r7
    34a0:	d116      	bne.n	34d0 <boot_swap_type_multi+0x88>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    34a2:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    34a4:	2b04      	cmp	r3, #4
    34a6:	d001      	beq.n	34ac <boot_swap_type_multi+0x64>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    34a8:	4543      	cmp	r3, r8
    34aa:	d111      	bne.n	34d0 <boot_swap_type_multi+0x88>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    34ac:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    34ae:	2b04      	cmp	r3, #4
    34b0:	d10c      	bne.n	34cc <boot_swap_type_multi+0x84>
            BOOT_LOG_INF("Swap type: %s",
    34b2:	7963      	ldrb	r3, [r4, #5]
    34b4:	2b02      	cmp	r3, #2
    34b6:	d116      	bne.n	34e6 <boot_swap_type_multi+0x9e>
    34b8:	4a11      	ldr	r2, [pc, #68]	; (3500 <boot_swap_type_multi+0xb8>)
    34ba:	4812      	ldr	r0, [pc, #72]	; (3504 <boot_swap_type_multi+0xbc>)
    34bc:	2149      	movs	r1, #73	; 0x49
    34be:	f002 fa6e 	bl	599e <printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    34c2:	7960      	ldrb	r0, [r4, #5]
    34c4:	1e83      	subs	r3, r0, #2
    34c6:	2b02      	cmp	r3, #2
    34c8:	d9c7      	bls.n	345a <boot_swap_type_multi+0x12>
    34ca:	e7c5      	b.n	3458 <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    34cc:	454b      	cmp	r3, r9
    34ce:	d0f0      	beq.n	34b2 <boot_swap_type_multi+0x6a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    34d0:	3201      	adds	r2, #1
    34d2:	2a03      	cmp	r2, #3
    34d4:	f104 0406 	add.w	r4, r4, #6
    34d8:	d1d4      	bne.n	3484 <boot_swap_type_multi+0x3c>
    BOOT_LOG_INF("Swap type: none");
    34da:	480b      	ldr	r0, [pc, #44]	; (3508 <boot_swap_type_multi+0xc0>)
    34dc:	2149      	movs	r1, #73	; 0x49
    34de:	f002 fa5e 	bl	599e <printk>
    return BOOT_SWAP_TYPE_NONE;
    34e2:	2001      	movs	r0, #1
    34e4:	e7b9      	b.n	345a <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
    34e6:	2b03      	cmp	r3, #3
    34e8:	d005      	beq.n	34f6 <boot_swap_type_multi+0xae>
    34ea:	4a08      	ldr	r2, [pc, #32]	; (350c <boot_swap_type_multi+0xc4>)
    34ec:	4908      	ldr	r1, [pc, #32]	; (3510 <boot_swap_type_multi+0xc8>)
    34ee:	2b04      	cmp	r3, #4
    34f0:	bf18      	it	ne
    34f2:	460a      	movne	r2, r1
    34f4:	e7e1      	b.n	34ba <boot_swap_type_multi+0x72>
    34f6:	4a07      	ldr	r2, [pc, #28]	; (3514 <boot_swap_type_multi+0xcc>)
    34f8:	e7df      	b.n	34ba <boot_swap_type_multi+0x72>
    34fa:	bf00      	nop
    34fc:	00009500 	.word	0x00009500
    3500:	000094bc 	.word	0x000094bc
    3504:	000094d8 	.word	0x000094d8
    3508:	000094eb 	.word	0x000094eb
    350c:	000094b5 	.word	0x000094b5
    3510:	000094c6 	.word	0x000094c6
    3514:	000094c1 	.word	0x000094c1

00003518 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3518:	4b06      	ldr	r3, [pc, #24]	; (3534 <nrf53_errata_42+0x1c>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    351a:	681b      	ldr	r3, [r3, #0]
    351c:	2b07      	cmp	r3, #7
    351e:	d107      	bne.n	3530 <nrf53_errata_42+0x18>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3520:	4b05      	ldr	r3, [pc, #20]	; (3538 <nrf53_errata_42+0x20>)
    3522:	681b      	ldr	r3, [r3, #0]
    3524:	3b02      	subs	r3, #2
    3526:	2b03      	cmp	r3, #3
    3528:	d802      	bhi.n	3530 <nrf53_errata_42+0x18>
    352a:	4a04      	ldr	r2, [pc, #16]	; (353c <nrf53_errata_42+0x24>)
    352c:	5cd0      	ldrb	r0, [r2, r3]
    352e:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    3530:	2000      	movs	r0, #0
    #endif
}
    3532:	4770      	bx	lr
    3534:	00ff0130 	.word	0x00ff0130
    3538:	00ff0134 	.word	0x00ff0134
    353c:	00009512 	.word	0x00009512

00003540 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    3540:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3544:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    3548:	4b03      	ldr	r3, [pc, #12]	; (3558 <SystemCoreClockUpdate+0x18>)
    354a:	f002 0203 	and.w	r2, r2, #3
    354e:	40d3      	lsrs	r3, r2
    3550:	4a02      	ldr	r2, [pc, #8]	; (355c <SystemCoreClockUpdate+0x1c>)
    3552:	6013      	str	r3, [r2, #0]
#endif
}
    3554:	4770      	bx	lr
    3556:	bf00      	nop
    3558:	07a12000 	.word	0x07a12000
    355c:	20000060 	.word	0x20000060

00003560 <SystemInit>:

void SystemInit(void)
{
    3560:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    3562:	f7ff ffd9 	bl	3518 <nrf53_errata_42>
    3566:	b148      	cbz	r0, 357c <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    3568:	4b35      	ldr	r3, [pc, #212]	; (3640 <SystemInit+0xe0>)
    356a:	681a      	ldr	r2, [r3, #0]
    356c:	b932      	cbnz	r2, 357c <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    356e:	210d      	movs	r1, #13
    3570:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    3572:	2101      	movs	r1, #1
    3574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    3578:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    357a:	601a      	str	r2, [r3, #0]
{
    357c:	2200      	movs	r2, #0
    357e:	00d3      	lsls	r3, r2, #3
    3580:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    3584:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3588:	3101      	adds	r1, #1
    358a:	d007      	beq.n	359c <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    358c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    3590:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3592:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    3596:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3598:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    359a:	d1f0      	bne.n	357e <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    359c:	f7ff ffbc 	bl	3518 <nrf53_errata_42>
    35a0:	2800      	cmp	r0, #0
    35a2:	d146      	bne.n	3632 <SystemInit+0xd2>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    35a4:	f7ff ffb8 	bl	3518 <nrf53_errata_42>
    35a8:	b138      	cbz	r0, 35ba <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    35aa:	4b26      	ldr	r3, [pc, #152]	; (3644 <SystemInit+0xe4>)
    35ac:	4a26      	ldr	r2, [pc, #152]	; (3648 <SystemInit+0xe8>)
    35ae:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    35b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35b4:	2201      	movs	r2, #1
    35b6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    35ba:	4b24      	ldr	r3, [pc, #144]	; (364c <SystemInit+0xec>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    35bc:	681b      	ldr	r3, [r3, #0]
    35be:	2b07      	cmp	r3, #7

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    35c0:	bf02      	ittt	eq
    35c2:	2200      	moveq	r2, #0
    35c4:	4b22      	ldreq	r3, [pc, #136]	; (3650 <SystemInit+0xf0>)
    35c6:	601a      	streq	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    35c8:	f7ff ffa6 	bl	3518 <nrf53_errata_42>
    35cc:	b150      	cbz	r0, 35e4 <SystemInit+0x84>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    35ce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    35d6:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    35d8:	bf42      	ittt	mi
    35da:	2200      	movmi	r2, #0
    35dc:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    35e0:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    35e4:	4b19      	ldr	r3, [pc, #100]	; (364c <SystemInit+0xec>)
                if (var1 == 0x07)
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	2b07      	cmp	r3, #7
    35ea:	d109      	bne.n	3600 <SystemInit+0xa0>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    35ec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35f0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    35f4:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    35f6:	bf44      	itt	mi
    35f8:	f06f 0201 	mvnmi.w	r2, #1
    35fc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    3600:	f7ff ff8a 	bl	3518 <nrf53_errata_42>
    3604:	b110      	cbz	r0, 360c <SystemInit+0xac>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    3606:	2265      	movs	r2, #101	; 0x65
    3608:	4b12      	ldr	r3, [pc, #72]	; (3654 <SystemInit+0xf4>)
    360a:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    360c:	4a12      	ldr	r2, [pc, #72]	; (3658 <SystemInit+0xf8>)
    360e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    3612:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    3616:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    361a:	4a10      	ldr	r2, [pc, #64]	; (365c <SystemInit+0xfc>)
    361c:	4b10      	ldr	r3, [pc, #64]	; (3660 <SystemInit+0x100>)
    361e:	6811      	ldr	r1, [r2, #0]
    3620:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    3624:	69d2      	ldr	r2, [r2, #28]
    3626:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    362a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    362e:	f7ff bf87 	b.w	3540 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    3632:	2229      	movs	r2, #41	; 0x29
    3634:	4b07      	ldr	r3, [pc, #28]	; (3654 <SystemInit+0xf4>)
    3636:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    3638:	2203      	movs	r2, #3
    363a:	631a      	str	r2, [r3, #48]	; 0x30
    363c:	e7b2      	b.n	35a4 <SystemInit+0x44>
    363e:	bf00      	nop
    3640:	50004a20 	.word	0x50004a20
    3644:	50039530 	.word	0x50039530
    3648:	beef0044 	.word	0xbeef0044
    364c:	00ff0130 	.word	0x00ff0130
    3650:	5003254c 	.word	0x5003254c
    3654:	5000470c 	.word	0x5000470c
    3658:	e000ed00 	.word	0xe000ed00
    365c:	00ff8000 	.word	0x00ff8000
    3660:	50006000 	.word	0x50006000

00003664 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3664:	4b04      	ldr	r3, [pc, #16]	; (3678 <nrfx_clock_init+0x14>)
    3666:	791a      	ldrb	r2, [r3, #4]
    3668:	b922      	cbnz	r2, 3674 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    366a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    366c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    366e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3670:	4802      	ldr	r0, [pc, #8]	; (367c <nrfx_clock_init+0x18>)
    3672:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3674:	4802      	ldr	r0, [pc, #8]	; (3680 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3676:	4770      	bx	lr
    3678:	200010bc 	.word	0x200010bc
    367c:	0bad0000 	.word	0x0bad0000
    3680:	0bad000c 	.word	0x0bad000c

00003684 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3684:	2803      	cmp	r0, #3
    3686:	d847      	bhi.n	3718 <nrfx_clock_start+0x94>
    3688:	e8df f000 	tbb	[pc, r0]
    368c:	3a2d2202 	.word	0x3a2d2202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3690:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3694:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3698:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    369c:	03c9      	lsls	r1, r1, #15
    369e:	d511      	bpl.n	36c4 <nrfx_clock_start+0x40>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    36a0:	f003 0303 	and.w	r3, r3, #3
    36a4:	2b02      	cmp	r3, #2
    36a6:	d10d      	bne.n	36c4 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    36a8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36ac:	2200      	movs	r2, #0
    36ae:	4b1b      	ldr	r3, [pc, #108]	; (371c <nrfx_clock_start+0x98>)
    36b0:	601a      	str	r2, [r3, #0]
    36b2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    36b4:	2202      	movs	r2, #2
    36b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36be:	2201      	movs	r2, #1
    36c0:	609a      	str	r2, [r3, #8]
}
    36c2:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    36c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36c8:	2201      	movs	r2, #1
    36ca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    36ce:	e7ed      	b.n	36ac <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36d0:	2200      	movs	r2, #0
    36d2:	4b13      	ldr	r3, [pc, #76]	; (3720 <nrfx_clock_start+0x9c>)
    36d4:	601a      	str	r2, [r3, #0]
    36d6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    36d8:	2201      	movs	r2, #1
    36da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36e2:	601a      	str	r2, [r3, #0]
}
    36e4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36e6:	2200      	movs	r2, #0
    36e8:	4b0e      	ldr	r3, [pc, #56]	; (3724 <nrfx_clock_start+0xa0>)
    36ea:	601a      	str	r2, [r3, #0]
    36ec:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    36ee:	f44f 7200 	mov.w	r2, #512	; 0x200
    36f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36fa:	2201      	movs	r2, #1
    36fc:	621a      	str	r2, [r3, #32]
}
    36fe:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3700:	2200      	movs	r2, #0
    3702:	4b09      	ldr	r3, [pc, #36]	; (3728 <nrfx_clock_start+0xa4>)
    3704:	601a      	str	r2, [r3, #0]
    3706:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3708:	f44f 7280 	mov.w	r2, #256	; 0x100
    370c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3710:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3714:	2201      	movs	r2, #1
    3716:	619a      	str	r2, [r3, #24]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    3718:	4770      	bx	lr
    371a:	bf00      	nop
    371c:	50005104 	.word	0x50005104
    3720:	50005100 	.word	0x50005100
    3724:	50005124 	.word	0x50005124
    3728:	50005120 	.word	0x50005120

0000372c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    372c:	b570      	push	{r4, r5, r6, lr}
    372e:	4604      	mov	r4, r0
    3730:	2803      	cmp	r0, #3
    3732:	d83e      	bhi.n	37b2 <nrfx_clock_stop+0x86>
    3734:	e8df f000 	tbb	[pc, r0]
    3738:	4b3e2202 	.word	0x4b3e2202
    p_reg->INTENCLR = mask;
    373c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3740:	2202      	movs	r2, #2
    3742:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3746:	2200      	movs	r2, #0
    3748:	f503 7382 	add.w	r3, r3, #260	; 0x104
    374c:	601a      	str	r2, [r3, #0]
    374e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3750:	4b28      	ldr	r3, [pc, #160]	; (37f4 <nrfx_clock_stop+0xc8>)
    3752:	2201      	movs	r2, #1
    3754:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    3758:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    375c:	601a      	str	r2, [r3, #0]
    switch (domain)
    375e:	2c02      	cmp	r4, #2
    3760:	d042      	beq.n	37e8 <nrfx_clock_stop+0xbc>
    3762:	2c03      	cmp	r4, #3
    3764:	d043      	beq.n	37ee <nrfx_clock_stop+0xc2>
    3766:	bb24      	cbnz	r4, 37b2 <nrfx_clock_stop+0x86>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3768:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    376c:	03db      	lsls	r3, r3, #15
    376e:	d520      	bpl.n	37b2 <nrfx_clock_stop+0x86>
    3770:	2001      	movs	r0, #1
    3772:	f002 ffba 	bl	66ea <nrfx_busy_wait>
    3776:	3d01      	subs	r5, #1
    3778:	d1f1      	bne.n	375e <nrfx_clock_stop+0x32>
    377a:	e01a      	b.n	37b2 <nrfx_clock_stop+0x86>
    p_reg->INTENCLR = mask;
    377c:	2301      	movs	r3, #1
    377e:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3782:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3784:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3788:	4a1b      	ldr	r2, [pc, #108]	; (37f8 <nrfx_clock_stop+0xcc>)
    p_reg->INTENCLR = mask;
    378a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    378e:	6011      	str	r1, [r2, #0]
    3790:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3792:	4a1a      	ldr	r2, [pc, #104]	; (37fc <nrfx_clock_stop+0xd0>)
    3794:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3796:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    379a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    379e:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    37a2:	03d2      	lsls	r2, r2, #15
    37a4:	d505      	bpl.n	37b2 <nrfx_clock_stop+0x86>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    37a6:	b123      	cbz	r3, 37b2 <nrfx_clock_stop+0x86>
    37a8:	2001      	movs	r0, #1
    37aa:	f002 ff9e 	bl	66ea <nrfx_busy_wait>
    37ae:	3d01      	subs	r5, #1
    37b0:	d1f1      	bne.n	3796 <nrfx_clock_stop+0x6a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    37b2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    37b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    37bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37c0:	2200      	movs	r2, #0
    37c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
    37c6:	601a      	str	r2, [r3, #0]
    37c8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37ca:	4b0d      	ldr	r3, [pc, #52]	; (3800 <nrfx_clock_stop+0xd4>)
    37cc:	e7c1      	b.n	3752 <nrfx_clock_stop+0x26>
    p_reg->INTENCLR = mask;
    37ce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    37d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37da:	2200      	movs	r2, #0
    37dc:	f503 7390 	add.w	r3, r3, #288	; 0x120
    37e0:	601a      	str	r2, [r3, #0]
    37e2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37e4:	4b07      	ldr	r3, [pc, #28]	; (3804 <nrfx_clock_stop+0xd8>)
    37e6:	e7b4      	b.n	3752 <nrfx_clock_stop+0x26>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    37e8:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    37ec:	e7be      	b.n	376c <nrfx_clock_stop+0x40>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    37ee:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    37f2:	e7bb      	b.n	376c <nrfx_clock_stop+0x40>
    37f4:	5000500c 	.word	0x5000500c
    37f8:	50005100 	.word	0x50005100
    37fc:	50005004 	.word	0x50005004
    3800:	50005024 	.word	0x50005024
    3804:	5000501c 	.word	0x5000501c

00003808 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3808:	4b26      	ldr	r3, [pc, #152]	; (38a4 <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    380a:	b510      	push	{r4, lr}
    380c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    380e:	b152      	cbz	r2, 3826 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3810:	2000      	movs	r0, #0
    3812:	6018      	str	r0, [r3, #0]
    3814:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3816:	2201      	movs	r2, #1
    3818:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    381c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3820:	4b21      	ldr	r3, [pc, #132]	; (38a8 <nrfx_power_clock_irq_handler+0xa0>)
    3822:	681b      	ldr	r3, [r3, #0]
    3824:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3826:	4b21      	ldr	r3, [pc, #132]	; (38ac <nrfx_power_clock_irq_handler+0xa4>)
    3828:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    382a:	b18a      	cbz	r2, 3850 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    382c:	2200      	movs	r2, #0
    382e:	601a      	str	r2, [r3, #0]
    3830:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3832:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3836:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    383a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    383e:	f002 0203 	and.w	r2, r2, #3
    3842:	2a01      	cmp	r2, #1
    3844:	f04f 0102 	mov.w	r1, #2
    3848:	d124      	bne.n	3894 <nrfx_power_clock_irq_handler+0x8c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    384a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    384e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3850:	4b17      	ldr	r3, [pc, #92]	; (38b0 <nrfx_power_clock_irq_handler+0xa8>)
    3852:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    3854:	b162      	cbz	r2, 3870 <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3856:	2200      	movs	r2, #0
    3858:	601a      	str	r2, [r3, #0]
    385a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    385c:	f44f 7280 	mov.w	r2, #256	; 0x100
    3860:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3864:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    3868:	4b0f      	ldr	r3, [pc, #60]	; (38a8 <nrfx_power_clock_irq_handler+0xa0>)
    386a:	2004      	movs	r0, #4
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3870:	4b10      	ldr	r3, [pc, #64]	; (38b4 <nrfx_power_clock_irq_handler+0xac>)
    3872:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    3874:	b1aa      	cbz	r2, 38a2 <nrfx_power_clock_irq_handler+0x9a>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    387a:	2200      	movs	r2, #0
    387c:	601a      	str	r2, [r3, #0]
    387e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3880:	f44f 7200 	mov.w	r2, #512	; 0x200
    3884:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3888:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    388c:	4b06      	ldr	r3, [pc, #24]	; (38a8 <nrfx_power_clock_irq_handler+0xa0>)
    388e:	2005      	movs	r0, #5
    3890:	681b      	ldr	r3, [r3, #0]
    3892:	4718      	bx	r3
    3894:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3898:	4b03      	ldr	r3, [pc, #12]	; (38a8 <nrfx_power_clock_irq_handler+0xa0>)
    389a:	2001      	movs	r0, #1
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	4798      	blx	r3
    38a0:	e7d6      	b.n	3850 <nrfx_power_clock_irq_handler+0x48>
}
    38a2:	bd10      	pop	{r4, pc}
    38a4:	50005100 	.word	0x50005100
    38a8:	200010bc 	.word	0x200010bc
    38ac:	50005104 	.word	0x50005104
    38b0:	50005120 	.word	0x50005120
    38b4:	50005124 	.word	0x50005124

000038b8 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    38b8:	4a0a      	ldr	r2, [pc, #40]	; (38e4 <nrfx_dppi_channel_alloc+0x2c>)
{
    38ba:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    38bc:	6814      	ldr	r4, [r2, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    38be:	43e6      	mvns	r6, r4
    38c0:	d00e      	beq.n	38e0 <nrfx_dppi_channel_alloc+0x28>
    38c2:	2300      	movs	r3, #0
    38c4:	b2d9      	uxtb	r1, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    38c6:	fa26 f501 	lsr.w	r5, r6, r1
    38ca:	07ed      	lsls	r5, r5, #31
    38cc:	f103 0301 	add.w	r3, r3, #1
    38d0:	d5f8      	bpl.n	38c4 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    38d2:	2301      	movs	r3, #1
    38d4:	408b      	lsls	r3, r1
    38d6:	4323      	orrs	r3, r4
    *p_channel = channel;
    38d8:	7001      	strb	r1, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    38da:	4803      	ldr	r0, [pc, #12]	; (38e8 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    38dc:	6013      	str	r3, [r2, #0]
}
    38de:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    38e0:	4802      	ldr	r0, [pc, #8]	; (38ec <nrfx_dppi_channel_alloc+0x34>)
    38e2:	e7fc      	b.n	38de <nrfx_dppi_channel_alloc+0x26>
    38e4:	200010c4 	.word	0x200010c4
    38e8:	0bad0000 	.word	0x0bad0000
    38ec:	0bad0002 	.word	0x0bad0002

000038f0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    38f0:	2301      	movs	r3, #1
    38f2:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    38f6:	f010 0fff 	tst.w	r0, #255	; 0xff
    38fa:	d012      	beq.n	3922 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    38fc:	f04f 0320 	mov.w	r3, #32
    3900:	f3ef 8111 	mrs	r1, BASEPRI
    3904:	f383 8811 	msr	BASEPRI, r3
    3908:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    390c:	4a06      	ldr	r2, [pc, #24]	; (3928 <nrfx_gpiote_channel_free+0x38>)
    390e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    3910:	ea23 0000 	bic.w	r0, r3, r0
    3914:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    3916:	f381 8811 	msr	BASEPRI, r1
    391a:	f3bf 8f6f 	isb	sy
    391e:	4803      	ldr	r0, [pc, #12]	; (392c <nrfx_gpiote_channel_free+0x3c>)
    3920:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    3922:	4803      	ldr	r0, [pc, #12]	; (3930 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3924:	4770      	bx	lr
    3926:	bf00      	nop
    3928:	200010c8 	.word	0x200010c8
    392c:	0bad0000 	.word	0x0bad0000
    3930:	0bad0004 	.word	0x0bad0004

00003934 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    3934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    3938:	22ff      	movs	r2, #255	; 0xff
{
    393a:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    393c:	2601      	movs	r6, #1
{
    393e:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    3940:	f8df e058 	ldr.w	lr, [pc, #88]	; 399c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    3944:	4814      	ldr	r0, [pc, #80]	; (3998 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    3946:	f8df 8058 	ldr.w	r8, [pc, #88]	; 39a0 <nrfx_gpiote_channel_alloc+0x6c>
    394a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    394c:	f04f 0120 	mov.w	r1, #32
    3950:	f3ef 8c11 	mrs	ip, BASEPRI
    3954:	f381 8811 	msr	BASEPRI, r1
    3958:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    395c:	fa22 f103 	lsr.w	r1, r2, r3
    3960:	07c9      	lsls	r1, r1, #31
    3962:	d50a      	bpl.n	397a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    3964:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    3968:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    396c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    396e:	bf01      	itttt	eq
    3970:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    3972:	4339      	orreq	r1, r7
    3974:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
    3978:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    397a:	f38c 8811 	msr	BASEPRI, ip
    397e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    3982:	4540      	cmp	r0, r8
    3984:	d005      	beq.n	3992 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    3986:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    398a:	439a      	bics	r2, r3
    398c:	f104 0401 	add.w	r4, r4, #1
    3990:	d1db      	bne.n	394a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3996:	bf00      	nop
    3998:	0bad0002 	.word	0x0bad0002
    399c:	200010c8 	.word	0x200010c8
    39a0:	0bad0000 	.word	0x0bad0000

000039a4 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    39a4:	2200      	movs	r2, #0
    39a6:	4b03      	ldr	r3, [pc, #12]	; (39b4 <nvmc_readonly_mode_set+0x10>)
    39a8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    39ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    39b0:	4770      	bx	lr
    39b2:	bf00      	nop
    39b4:	50039000 	.word	0x50039000

000039b8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    39b8:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    39ba:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    39be:	b983      	cbnz	r3, 39e2 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    39c0:	2202      	movs	r2, #2
    39c2:	4b09      	ldr	r3, [pc, #36]	; (39e8 <nrfx_nvmc_page_erase+0x30>)
    39c4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    39c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    39cc:	f04f 32ff 	mov.w	r2, #4294967295
    39d0:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    39d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    39d6:	07d2      	lsls	r2, r2, #31
    39d8:	d5fb      	bpl.n	39d2 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    39da:	f7ff ffe3 	bl	39a4 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    39de:	4803      	ldr	r0, [pc, #12]	; (39ec <nrfx_nvmc_page_erase+0x34>)
}
    39e0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    39e2:	4803      	ldr	r0, [pc, #12]	; (39f0 <nrfx_nvmc_page_erase+0x38>)
    39e4:	e7fc      	b.n	39e0 <nrfx_nvmc_page_erase+0x28>
    39e6:	bf00      	nop
    39e8:	50039000 	.word	0x50039000
    39ec:	0bad0000 	.word	0x0bad0000
    39f0:	0bad000a 	.word	0x0bad000a

000039f4 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    39f4:	2201      	movs	r2, #1
    39f6:	4b07      	ldr	r3, [pc, #28]	; (3a14 <nrfx_nvmc_word_write+0x20>)
    39f8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    39fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3a00:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3a04:	07d2      	lsls	r2, r2, #31
    3a06:	d5fb      	bpl.n	3a00 <nrfx_nvmc_word_write+0xc>
    *(volatile uint32_t *)addr = value;
    3a08:	6001      	str	r1, [r0, #0]
    3a0a:	f3bf 8f5f 	dmb	sy

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
    3a0e:	f7ff bfc9 	b.w	39a4 <nvmc_readonly_mode_set>
    3a12:	bf00      	nop
    3a14:	50039000 	.word	0x50039000

00003a18 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    3a18:	6801      	ldr	r1, [r0, #0]
    3a1a:	4a0e      	ldr	r2, [pc, #56]	; (3a54 <verify_header+0x3c>)
{
    3a1c:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    3a1e:	4291      	cmp	r1, r2
    3a20:	d115      	bne.n	3a4e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    3a22:	69c1      	ldr	r1, [r0, #28]
    3a24:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    3a28:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    3a2c:	4291      	cmp	r1, r2
    3a2e:	d10e      	bne.n	3a4e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    3a30:	6882      	ldr	r2, [r0, #8]
    3a32:	2a01      	cmp	r2, #1
    3a34:	d80b      	bhi.n	3a4e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    3a36:	68c2      	ldr	r2, [r0, #12]
    3a38:	b112      	cbz	r2, 3a40 <verify_header+0x28>
    3a3a:	6901      	ldr	r1, [r0, #16]
    3a3c:	428a      	cmp	r2, r1
    3a3e:	d006      	beq.n	3a4e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    3a40:	6958      	ldr	r0, [r3, #20]
    3a42:	b128      	cbz	r0, 3a50 <verify_header+0x38>
    3a44:	699b      	ldr	r3, [r3, #24]
    3a46:	1a1b      	subs	r3, r3, r0
    3a48:	4258      	negs	r0, r3
    3a4a:	4158      	adcs	r0, r3
    3a4c:	4770      	bx	lr
        return( 1 );
    3a4e:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    3a50:	4770      	bx	lr
    3a52:	bf00      	nop
    3a54:	ff00aa55 	.word	0xff00aa55

00003a58 <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    3a58:	4b0d      	ldr	r3, [pc, #52]	; (3a90 <verify_chain+0x38>)
{
    3a5a:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    3a5c:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    3a5e:	b1a6      	cbz	r6, 3a8a <verify_chain+0x32>
    3a60:	4630      	mov	r0, r6
    3a62:	f7ff ffd9 	bl	3a18 <verify_header>
    3a66:	4604      	mov	r4, r0
    3a68:	b978      	cbnz	r0, 3a8a <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    3a6a:	68f3      	ldr	r3, [r6, #12]
    3a6c:	b96b      	cbnz	r3, 3a8a <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    3a6e:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    3a70:	b90d      	cbnz	r5, 3a76 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    3a72:	4620      	mov	r0, r4
    3a74:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    3a76:	4628      	mov	r0, r5
    3a78:	f7ff ffce 	bl	3a18 <verify_header>
    3a7c:	b928      	cbnz	r0, 3a8a <verify_chain+0x32>
        if( cur->prev != prv )
    3a7e:	68eb      	ldr	r3, [r5, #12]
    3a80:	42b3      	cmp	r3, r6
    3a82:	d102      	bne.n	3a8a <verify_chain+0x32>
        cur = cur->next;
    3a84:	462e      	mov	r6, r5
    3a86:	692d      	ldr	r5, [r5, #16]
    3a88:	e7f2      	b.n	3a70 <verify_chain+0x18>
        return( 1 );
    3a8a:	2401      	movs	r4, #1
    3a8c:	e7f1      	b.n	3a72 <verify_chain+0x1a>
    3a8e:	bf00      	nop
    3a90:	20001128 	.word	0x20001128

00003a94 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    3a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    3a98:	4d40      	ldr	r5, [pc, #256]	; (3b9c <buffer_alloc_calloc+0x108>)
    3a9a:	682c      	ldr	r4, [r5, #0]
    3a9c:	b1d4      	cbz	r4, 3ad4 <buffer_alloc_calloc+0x40>
    3a9e:	68ac      	ldr	r4, [r5, #8]
    3aa0:	b1c4      	cbz	r4, 3ad4 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    3aa2:	2800      	cmp	r0, #0
    3aa4:	d04d      	beq.n	3b42 <buffer_alloc_calloc+0xae>
    3aa6:	2900      	cmp	r1, #0
    3aa8:	d04b      	beq.n	3b42 <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    3aaa:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    3aae:	fbb6 f0f0 	udiv	r0, r6, r0
    3ab2:	4288      	cmp	r0, r1
    3ab4:	d145      	bne.n	3b42 <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3ab6:	1d30      	adds	r0, r6, #4
    3ab8:	d843      	bhi.n	3b42 <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3aba:	07b1      	lsls	r1, r6, #30
    3abc:	d00d      	beq.n	3ada <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3abe:	f026 0703 	bic.w	r7, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3ac2:	3704      	adds	r7, #4
    memory_header *new, *cur = heap.first_free;
    3ac4:	68ec      	ldr	r4, [r5, #12]
    3ac6:	e003      	b.n	3ad0 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    3ac8:	6863      	ldr	r3, [r4, #4]
    3aca:	42bb      	cmp	r3, r7
    3acc:	d23b      	bcs.n	3b46 <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    3ace:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    3ad0:	2c00      	cmp	r4, #0
    3ad2:	d1f9      	bne.n	3ac8 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    3ad4:	4620      	mov	r0, r4
    3ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3ada:	4637      	mov	r7, r6
    3adc:	e7f2      	b.n	3ac4 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    3ade:	60e8      	str	r0, [r5, #12]
    3ae0:	e044      	b.n	3b6c <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    3ae2:	f107 0c20 	add.w	ip, r7, #32
    3ae6:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    3aea:	3920      	subs	r1, #32
    3aec:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    3aee:	2100      	movs	r1, #0
    new->magic1 = MAGIC1;
    3af0:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 3ba4 <buffer_alloc_calloc+0x110>
    new->prev = cur;
    3af4:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->next = cur->next;
    3af8:	6921      	ldr	r1, [r4, #16]
    3afa:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    3afc:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    3b00:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 3ba8 <buffer_alloc_calloc+0x114>
    3b04:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    3b08:	b101      	cbz	r1, 3b0c <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    3b0a:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    3b0c:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    3b10:	b1aa      	cbz	r2, 3b3e <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    3b12:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    3b14:	699a      	ldr	r2, [r3, #24]
    3b16:	b102      	cbz	r2, 3b1a <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    3b18:	6153      	str	r3, [r2, #20]
    cur->next = new;
    3b1a:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    3b1c:	2300      	movs	r3, #0
    cur->alloc = 1;
    3b1e:	f04f 0901 	mov.w	r9, #1
    cur->next_free = NULL;
    3b22:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3b26:	692b      	ldr	r3, [r5, #16]
    cur->size = len;
    3b28:	e9c4 7901 	strd	r7, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3b2c:	07db      	lsls	r3, r3, #31
    3b2e:	d52d      	bpl.n	3b8c <buffer_alloc_calloc+0xf8>
    3b30:	f7ff ff92 	bl	3a58 <verify_chain>
    3b34:	b350      	cbz	r0, 3b8c <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    3b36:	4b1a      	ldr	r3, [pc, #104]	; (3ba0 <buffer_alloc_calloc+0x10c>)
    3b38:	4648      	mov	r0, r9
    3b3a:	681b      	ldr	r3, [r3, #0]
    3b3c:	e025      	b.n	3b8a <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    3b3e:	60eb      	str	r3, [r5, #12]
    3b40:	e7e8      	b.n	3b14 <buffer_alloc_calloc+0x80>
        return( NULL );
    3b42:	2400      	movs	r4, #0
    3b44:	e7c6      	b.n	3ad4 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    3b46:	68a3      	ldr	r3, [r4, #8]
    3b48:	b11b      	cbz	r3, 3b52 <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    3b4a:	4b15      	ldr	r3, [pc, #84]	; (3ba0 <buffer_alloc_calloc+0x10c>)
    3b4c:	2001      	movs	r0, #1
    3b4e:	681b      	ldr	r3, [r3, #0]
    3b50:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    3b52:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    3b56:	6861      	ldr	r1, [r4, #4]
    3b58:	f104 0820 	add.w	r8, r4, #32
    3b5c:	1bc9      	subs	r1, r1, r7
    3b5e:	2923      	cmp	r1, #35	; 0x23
    3b60:	d8bf      	bhi.n	3ae2 <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    3b62:	2301      	movs	r3, #1
    3b64:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    3b66:	2a00      	cmp	r2, #0
    3b68:	d0b9      	beq.n	3ade <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    3b6a:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    3b6c:	69a3      	ldr	r3, [r4, #24]
    3b6e:	b103      	cbz	r3, 3b72 <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    3b70:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    3b72:	2300      	movs	r3, #0
        cur->next_free = NULL;
    3b74:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3b78:	692b      	ldr	r3, [r5, #16]
    3b7a:	07da      	lsls	r2, r3, #31
    3b7c:	d506      	bpl.n	3b8c <buffer_alloc_calloc+0xf8>
    3b7e:	f7ff ff6b 	bl	3a58 <verify_chain>
    3b82:	b118      	cbz	r0, 3b8c <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    3b84:	2001      	movs	r0, #1
    3b86:	4b06      	ldr	r3, [pc, #24]	; (3ba0 <buffer_alloc_calloc+0x10c>)
    3b88:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    3b8a:	4798      	blx	r3
    memset( ret, 0, original_len );
    3b8c:	4632      	mov	r2, r6
    3b8e:	2100      	movs	r1, #0
    3b90:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    3b92:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    3b94:	f002 faa6 	bl	60e4 <memset>
    return( ret );
    3b98:	e79c      	b.n	3ad4 <buffer_alloc_calloc+0x40>
    3b9a:	bf00      	nop
    3b9c:	20001128 	.word	0x20001128
    3ba0:	20000068 	.word	0x20000068
    3ba4:	ff00aa55 	.word	0xff00aa55
    3ba8:	ee119966 	.word	0xee119966

00003bac <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    3bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3bb0:	4605      	mov	r5, r0
    3bb2:	2800      	cmp	r0, #0
    3bb4:	d07c      	beq.n	3cb0 <buffer_alloc_free+0x104>
    3bb6:	4e3f      	ldr	r6, [pc, #252]	; (3cb4 <buffer_alloc_free+0x108>)
    3bb8:	6833      	ldr	r3, [r6, #0]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d078      	beq.n	3cb0 <buffer_alloc_free+0x104>
    3bbe:	68b2      	ldr	r2, [r6, #8]
    3bc0:	2a00      	cmp	r2, #0
    3bc2:	d075      	beq.n	3cb0 <buffer_alloc_free+0x104>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    3bc4:	4283      	cmp	r3, r0
    3bc6:	d803      	bhi.n	3bd0 <buffer_alloc_free+0x24>
    3bc8:	6872      	ldr	r2, [r6, #4]
    3bca:	4413      	add	r3, r2
    3bcc:	4298      	cmp	r0, r3
    3bce:	d303      	bcc.n	3bd8 <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    3bd0:	4b39      	ldr	r3, [pc, #228]	; (3cb8 <buffer_alloc_free+0x10c>)
    3bd2:	2001      	movs	r0, #1
    3bd4:	681b      	ldr	r3, [r3, #0]
    3bd6:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    3bd8:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    3bdc:	4620      	mov	r0, r4
    3bde:	f7ff ff1b 	bl	3a18 <verify_header>
    3be2:	b118      	cbz	r0, 3bec <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    3be4:	4b34      	ldr	r3, [pc, #208]	; (3cb8 <buffer_alloc_free+0x10c>)
    3be6:	2001      	movs	r0, #1
    3be8:	681b      	ldr	r3, [r3, #0]
    3bea:	4798      	blx	r3

    if( hdr->alloc != 1 )
    3bec:	f855 3c18 	ldr.w	r3, [r5, #-24]
    3bf0:	2b01      	cmp	r3, #1
    3bf2:	d003      	beq.n	3bfc <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    3bf4:	4b30      	ldr	r3, [pc, #192]	; (3cb8 <buffer_alloc_free+0x10c>)
    3bf6:	2001      	movs	r0, #1
    3bf8:	681b      	ldr	r3, [r3, #0]
    3bfa:	4798      	blx	r3
    }

    hdr->alloc = 0;
    3bfc:	2300      	movs	r3, #0
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    3bfe:	f855 7c14 	ldr.w	r7, [r5, #-20]
    hdr->alloc = 0;
    3c02:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    3c06:	b1af      	cbz	r7, 3c34 <buffer_alloc_free+0x88>
    3c08:	68ba      	ldr	r2, [r7, #8]
    3c0a:	b992      	cbnz	r2, 3c32 <buffer_alloc_free+0x86>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    3c0c:	f855 3c1c 	ldr.w	r3, [r5, #-28]
    3c10:	f103 0220 	add.w	r2, r3, #32
    3c14:	687b      	ldr	r3, [r7, #4]
    3c16:	4413      	add	r3, r2
    3c18:	607b      	str	r3, [r7, #4]
        hdr->prev->next = hdr->next;
    3c1a:	f855 3c10 	ldr.w	r3, [r5, #-16]
    3c1e:	613b      	str	r3, [r7, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
    3c20:	b103      	cbz	r3, 3c24 <buffer_alloc_free+0x78>
            hdr->next->prev = hdr;
    3c22:	60df      	str	r7, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3c24:	4620      	mov	r0, r4
    3c26:	2220      	movs	r2, #32
    3c28:	2100      	movs	r1, #0
    3c2a:	f002 fa5b 	bl	60e4 <memset>
    3c2e:	4623      	mov	r3, r4
    3c30:	463c      	mov	r4, r7
    memory_header *hdr, *old = NULL;
    3c32:	461f      	mov	r7, r3
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3c34:	6920      	ldr	r0, [r4, #16]
    3c36:	2800      	cmp	r0, #0
    3c38:	d032      	beq.n	3ca0 <buffer_alloc_free+0xf4>
    3c3a:	6883      	ldr	r3, [r0, #8]
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d12f      	bne.n	3ca0 <buffer_alloc_free+0xf4>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    3c40:	6863      	ldr	r3, [r4, #4]
    3c42:	6842      	ldr	r2, [r0, #4]
    3c44:	3320      	adds	r3, #32
    3c46:	4413      	add	r3, r2
    3c48:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    3c4a:	6903      	ldr	r3, [r0, #16]
    3c4c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
    3c50:	6123      	str	r3, [r4, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3c52:	b9da      	cbnz	r2, 3c8c <buffer_alloc_free+0xe0>
    3c54:	bb01      	cbnz	r1, 3c98 <buffer_alloc_free+0xec>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
    3c56:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    3c58:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    3c5a:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    3c5c:	61a1      	str	r1, [r4, #24]

        if( hdr->prev_free != NULL )
    3c5e:	b1ea      	cbz	r2, 3c9c <buffer_alloc_free+0xf0>
            hdr->prev_free->next_free = hdr;
    3c60:	6194      	str	r4, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    3c62:	69a2      	ldr	r2, [r4, #24]
    3c64:	b102      	cbz	r2, 3c68 <buffer_alloc_free+0xbc>
            hdr->next_free->prev_free = hdr;
    3c66:	6154      	str	r4, [r2, #20]

        if( hdr->next != NULL )
    3c68:	b103      	cbz	r3, 3c6c <buffer_alloc_free+0xc0>
            hdr->next->prev = hdr;
    3c6a:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3c6c:	2220      	movs	r2, #32
    3c6e:	2100      	movs	r1, #0
    3c70:	f002 fa38 	bl	60e4 <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3c74:	6933      	ldr	r3, [r6, #16]
    3c76:	079b      	lsls	r3, r3, #30
    3c78:	d51a      	bpl.n	3cb0 <buffer_alloc_free+0x104>
    3c7a:	f7ff feed 	bl	3a58 <verify_chain>
    3c7e:	b1b8      	cbz	r0, 3cb0 <buffer_alloc_free+0x104>
        mbedtls_exit( 1 );
}
    3c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    3c84:	4b0c      	ldr	r3, [pc, #48]	; (3cb8 <buffer_alloc_free+0x10c>)
    3c86:	2001      	movs	r0, #1
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    3c8c:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    3c8e:	69a1      	ldr	r1, [r4, #24]
    3c90:	2900      	cmp	r1, #0
    3c92:	d0e0      	beq.n	3c56 <buffer_alloc_free+0xaa>
                hdr->next_free->prev_free = hdr->prev_free;
    3c94:	614a      	str	r2, [r1, #20]
    3c96:	e7de      	b.n	3c56 <buffer_alloc_free+0xaa>
                heap.first_free = hdr->next_free;
    3c98:	60f1      	str	r1, [r6, #12]
    3c9a:	e7f8      	b.n	3c8e <buffer_alloc_free+0xe2>
            heap.first_free = hdr;
    3c9c:	60f4      	str	r4, [r6, #12]
    3c9e:	e7e0      	b.n	3c62 <buffer_alloc_free+0xb6>
    if( old == NULL )
    3ca0:	2f00      	cmp	r7, #0
    3ca2:	d1e7      	bne.n	3c74 <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    3ca4:	68f3      	ldr	r3, [r6, #12]
    3ca6:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    3ca8:	b103      	cbz	r3, 3cac <buffer_alloc_free+0x100>
            heap.first_free->prev_free = hdr;
    3caa:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    3cac:	60f4      	str	r4, [r6, #12]
    3cae:	e7e1      	b.n	3c74 <buffer_alloc_free+0xc8>
}
    3cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cb4:	20001128 	.word	0x20001128
    3cb8:	20000068 	.word	0x20000068

00003cbc <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    3cbc:	b538      	push	{r3, r4, r5, lr}
    3cbe:	460d      	mov	r5, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3cc0:	2214      	movs	r2, #20
    3cc2:	2100      	movs	r1, #0
{
    3cc4:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3cc6:	4812      	ldr	r0, [pc, #72]	; (3d10 <mbedtls_memory_buffer_alloc_init+0x54>)
    3cc8:	f002 fa0c 	bl	60e4 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    3ccc:	4911      	ldr	r1, [pc, #68]	; (3d14 <mbedtls_memory_buffer_alloc_init+0x58>)
    3cce:	4812      	ldr	r0, [pc, #72]	; (3d18 <mbedtls_memory_buffer_alloc_init+0x5c>)
    3cd0:	f000 f832 	bl	3d38 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3cd4:	2d23      	cmp	r5, #35	; 0x23
    3cd6:	d91a      	bls.n	3d0e <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3cd8:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3cdc:	bf1f      	itttt	ne
    3cde:	3d04      	subne	r5, #4
    3ce0:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3ce2:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3ce6:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    3ce8:	462a      	mov	r2, r5
    3cea:	2100      	movs	r1, #0
    3cec:	4620      	mov	r0, r4
    3cee:	f002 f9f9 	bl	60e4 <memset>

    heap.buf = buf;
    3cf2:	4b07      	ldr	r3, [pc, #28]	; (3d10 <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    3cf4:	4a09      	ldr	r2, [pc, #36]	; (3d1c <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.len = len;
    3cf6:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first = (memory_header *)buf;
    3cfa:	609c      	str	r4, [r3, #8]
    heap.first->magic1 = MAGIC1;
    3cfc:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    3cfe:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    3d02:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    3d04:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    3d08:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    3d0a:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    3d0c:	60dc      	str	r4, [r3, #12]
}
    3d0e:	bd38      	pop	{r3, r4, r5, pc}
    3d10:	20001128 	.word	0x20001128
    3d14:	00003bad 	.word	0x00003bad
    3d18:	00003a95 	.word	0x00003a95
    3d1c:	ff00aa55 	.word	0xff00aa55

00003d20 <mbedtls_calloc>:
static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    3d20:	4b01      	ldr	r3, [pc, #4]	; (3d28 <mbedtls_calloc+0x8>)
    3d22:	681b      	ldr	r3, [r3, #0]
    3d24:	4718      	bx	r3
    3d26:	bf00      	nop
    3d28:	20000064 	.word	0x20000064

00003d2c <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    3d2c:	4b01      	ldr	r3, [pc, #4]	; (3d34 <mbedtls_free+0x8>)
    3d2e:	681b      	ldr	r3, [r3, #0]
    3d30:	4718      	bx	r3
    3d32:	bf00      	nop
    3d34:	2000006c 	.word	0x2000006c

00003d38 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    3d38:	4b02      	ldr	r3, [pc, #8]	; (3d44 <mbedtls_platform_set_calloc_free+0xc>)
    3d3a:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3d3c:	4b02      	ldr	r3, [pc, #8]	; (3d48 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    3d3e:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    3d40:	6019      	str	r1, [r3, #0]
}
    3d42:	4770      	bx	lr
    3d44:	20000064 	.word	0x20000064
    3d48:	2000006c 	.word	0x2000006c

00003d4c <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    3d4c:	460a      	mov	r2, r1
    3d4e:	b119      	cbz	r1, 3d58 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
    3d50:	4b02      	ldr	r3, [pc, #8]	; (3d5c <mbedtls_platform_zeroize+0x10>)
    3d52:	2100      	movs	r1, #0
    3d54:	681b      	ldr	r3, [r3, #0]
    3d56:	4718      	bx	r3
}
    3d58:	4770      	bx	lr
    3d5a:	bf00      	nop
    3d5c:	20000070 	.word	0x20000070

00003d60 <rsa_check_context.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3d62:	f100 0608 	add.w	r6, r0, #8
    3d66:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3d68:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3d6a:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3d6c:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3d6e:	f003 f920 	bl	6fb2 <mbedtls_mpi_size>
    3d72:	4287      	cmp	r7, r0
    3d74:	d116      	bne.n	3da4 <rsa_check_context.isra.0+0x44>
    3d76:	6863      	ldr	r3, [r4, #4]
    3d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3d7c:	d812      	bhi.n	3da4 <rsa_check_context.isra.0+0x44>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3d7e:	2100      	movs	r1, #0
    3d80:	4630      	mov	r0, r6
    3d82:	f003 fa8d 	bl	72a0 <mbedtls_mpi_cmp_int>
    3d86:	2800      	cmp	r0, #0
    3d88:	dd0c      	ble.n	3da4 <rsa_check_context.isra.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    3d8a:	2100      	movs	r1, #0
    3d8c:	4630      	mov	r0, r6
    3d8e:	f003 f8e3 	bl	6f58 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3d92:	b138      	cbz	r0, 3da4 <rsa_check_context.isra.0+0x44>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3d94:	b945      	cbnz	r5, 3da8 <rsa_check_context.isra.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3d96:	2100      	movs	r1, #0
    3d98:	f104 0014 	add.w	r0, r4, #20
    3d9c:	f003 fa80 	bl	72a0 <mbedtls_mpi_cmp_int>
    3da0:	2800      	cmp	r0, #0
    3da2:	dc1e      	bgt.n	3de2 <rsa_check_context.isra.0+0x82>
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3da4:	481b      	ldr	r0, [pc, #108]	; (3e14 <rsa_check_context.isra.0+0xb4>)
    3da6:	e01e      	b.n	3de6 <rsa_check_context.isra.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3da8:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    3dac:	2100      	movs	r1, #0
    3dae:	4630      	mov	r0, r6
    3db0:	f003 fa76 	bl	72a0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3db4:	2800      	cmp	r0, #0
    3db6:	ddf5      	ble.n	3da4 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3db8:	2100      	movs	r1, #0
    3dba:	4630      	mov	r0, r6
    3dbc:	f003 f8cc 	bl	6f58 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3dc0:	2800      	cmp	r0, #0
    3dc2:	d0ef      	beq.n	3da4 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3dc4:	f104 0638 	add.w	r6, r4, #56	; 0x38
    3dc8:	2100      	movs	r1, #0
    3dca:	4630      	mov	r0, r6
    3dcc:	f003 fa68 	bl	72a0 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3dd0:	2800      	cmp	r0, #0
    3dd2:	dde7      	ble.n	3da4 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    3dd4:	2100      	movs	r1, #0
    3dd6:	4630      	mov	r0, r6
    3dd8:	f003 f8be 	bl	6f58 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3ddc:	2800      	cmp	r0, #0
    3dde:	d1da      	bne.n	3d96 <rsa_check_context.isra.0+0x36>
    3de0:	e7e0      	b.n	3da4 <rsa_check_context.isra.0+0x44>
    if( is_priv &&
    3de2:	b90d      	cbnz	r5, 3de8 <rsa_check_context.isra.0+0x88>
    }
#endif

    return( 0 );
    3de4:	2000      	movs	r0, #0
}
    3de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3de8:	2100      	movs	r1, #0
    3dea:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3dee:	f003 fa57 	bl	72a0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3df2:	2800      	cmp	r0, #0
    3df4:	ddd6      	ble.n	3da4 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    3df6:	2100      	movs	r1, #0
    3df8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3dfc:	f003 fa50 	bl	72a0 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3e00:	2800      	cmp	r0, #0
    3e02:	ddcf      	ble.n	3da4 <rsa_check_context.isra.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3e04:	2100      	movs	r1, #0
    3e06:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3e0a:	f003 fa49 	bl	72a0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3e0e:	2800      	cmp	r0, #0
    3e10:	dce8      	bgt.n	3de4 <rsa_check_context.isra.0+0x84>
    3e12:	e7c7      	b.n	3da4 <rsa_check_context.isra.0+0x44>
    3e14:	ffffbf80 	.word	0xffffbf80

00003e18 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    3e18:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3e1a:	2100      	movs	r1, #0
{
    3e1c:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3e1e:	f7ff ff9f 	bl	3d60 <rsa_check_context.isra.0>
    3e22:	4605      	mov	r5, r0
    3e24:	b9b8      	cbnz	r0, 3e56 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    3e26:	f104 0608 	add.w	r6, r4, #8
    3e2a:	4630      	mov	r0, r6
    3e2c:	f003 f8a5 	bl	6f7a <mbedtls_mpi_bitlen>
    3e30:	287f      	cmp	r0, #127	; 0x7f
    3e32:	d910      	bls.n	3e56 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3e34:	3414      	adds	r4, #20
    3e36:	4629      	mov	r1, r5
    3e38:	4620      	mov	r0, r4
    3e3a:	f003 f88d 	bl	6f58 <mbedtls_mpi_get_bit>
    3e3e:	b150      	cbz	r0, 3e56 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3e40:	4620      	mov	r0, r4
    3e42:	f003 f89a 	bl	6f7a <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3e46:	2801      	cmp	r0, #1
    3e48:	d905      	bls.n	3e56 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    3e4a:	4631      	mov	r1, r6
    3e4c:	4620      	mov	r0, r4
    3e4e:	f003 f9e4 	bl	721a <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3e52:	2800      	cmp	r0, #0
    3e54:	db00      	blt.n	3e58 <mbedtls_rsa_check_pubkey+0x40>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3e56:	4d01      	ldr	r5, [pc, #4]	; (3e5c <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
    3e58:	4628      	mov	r0, r5
    3e5a:	bd70      	pop	{r4, r5, r6, pc}
    3e5c:	ffffbe00 	.word	0xffffbe00

00003e60 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e62:	460c      	mov	r4, r1
    3e64:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3e66:	2100      	movs	r1, #0
{
    3e68:	4605      	mov	r5, r0
    3e6a:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3e6c:	f7ff ff78 	bl	3d60 <rsa_check_context.isra.0>
    3e70:	bb80      	cbnz	r0, 3ed4 <mbedtls_rsa_public+0x74>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3e72:	a803      	add	r0, sp, #12
    3e74:	f002 ffea 	bl	6e4c <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3e78:	4621      	mov	r1, r4
    3e7a:	686a      	ldr	r2, [r5, #4]
    3e7c:	a803      	add	r0, sp, #12
    3e7e:	f003 f89e 	bl	6fbe <mbedtls_mpi_read_binary>
    3e82:	4604      	mov	r4, r0
    3e84:	b9d0      	cbnz	r0, 3ebc <mbedtls_rsa_public+0x5c>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    3e86:	f105 0408 	add.w	r4, r5, #8
    3e8a:	4621      	mov	r1, r4
    3e8c:	a803      	add	r0, sp, #12
    3e8e:	f003 f9c4 	bl	721a <mbedtls_mpi_cmp_mpi>
    3e92:	2800      	cmp	r0, #0
    3e94:	da1b      	bge.n	3ece <mbedtls_rsa_public+0x6e>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3e96:	f105 0368 	add.w	r3, r5, #104	; 0x68
    3e9a:	a903      	add	r1, sp, #12
    3e9c:	9300      	str	r3, [sp, #0]
    3e9e:	4608      	mov	r0, r1
    3ea0:	4623      	mov	r3, r4
    3ea2:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
    3ea6:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3ea8:	f003 fd4c 	bl	7944 <mbedtls_mpi_exp_mod>
    3eac:	4604      	mov	r4, r0
    3eae:	b928      	cbnz	r0, 3ebc <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    3eb0:	463a      	mov	r2, r7
    3eb2:	4631      	mov	r1, r6
    3eb4:	a803      	add	r0, sp, #12
    3eb6:	f003 f8ba 	bl	702e <mbedtls_mpi_write_binary>
    3eba:	4604      	mov	r4, r0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3ebc:	a803      	add	r0, sp, #12
    3ebe:	f002 ffcb 	bl	6e58 <mbedtls_mpi_free>

    if( ret != 0 )
    3ec2:	b10c      	cbz	r4, 3ec8 <mbedtls_rsa_public+0x68>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    3ec4:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280

    return( 0 );
}
    3ec8:	4620      	mov	r0, r4
    3eca:	b007      	add	sp, #28
    3ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    3ece:	f06f 0403 	mvn.w	r4, #3
    3ed2:	e7f3      	b.n	3ebc <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3ed4:	4c00      	ldr	r4, [pc, #0]	; (3ed8 <mbedtls_rsa_public+0x78>)
    3ed6:	e7f7      	b.n	3ec8 <mbedtls_rsa_public+0x68>
    3ed8:	ffffbf80 	.word	0xffffbf80

00003edc <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    3edc:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    3ede:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    3ee2:	b9c1      	cbnz	r1, 3f16 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    3ee4:	4a19      	ldr	r2, [pc, #100]	; (3f4c <mbedtls_sha256_starts_ret+0x70>)
    3ee6:	4b1a      	ldr	r3, [pc, #104]	; (3f50 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    3ee8:	f8df c08c 	ldr.w	ip, [pc, #140]	; 3f78 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
    3eec:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    3ef0:	4b18      	ldr	r3, [pc, #96]	; (3f54 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    3ef2:	4a19      	ldr	r2, [pc, #100]	; (3f58 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
    3ef4:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    3ef8:	4b18      	ldr	r3, [pc, #96]	; (3f5c <mbedtls_sha256_starts_ret+0x80>)
    3efa:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    3efe:	4b18      	ldr	r3, [pc, #96]	; (3f60 <mbedtls_sha256_starts_ret+0x84>)
    3f00:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3f02:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    3f06:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    3f0a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    3f0e:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    3f10:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    3f12:	2000      	movs	r0, #0
    3f14:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    3f16:	4b13      	ldr	r3, [pc, #76]	; (3f64 <mbedtls_sha256_starts_ret+0x88>)
    3f18:	4a13      	ldr	r2, [pc, #76]	; (3f68 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
    3f1a:	f8df c060 	ldr.w	ip, [pc, #96]	; 3f7c <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
    3f1e:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    3f22:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    3f26:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    3f2a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    3f2e:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    3f30:	4b0e      	ldr	r3, [pc, #56]	; (3f6c <mbedtls_sha256_starts_ret+0x90>)
    3f32:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    3f36:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    3f3a:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    3f3e:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    3f42:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    3f44:	4b0a      	ldr	r3, [pc, #40]	; (3f70 <mbedtls_sha256_starts_ret+0x94>)
    3f46:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    3f48:	4b0a      	ldr	r3, [pc, #40]	; (3f74 <mbedtls_sha256_starts_ret+0x98>)
    3f4a:	e7e0      	b.n	3f0e <mbedtls_sha256_starts_ret+0x32>
    3f4c:	6a09e667 	.word	0x6a09e667
    3f50:	bb67ae85 	.word	0xbb67ae85
    3f54:	a54ff53a 	.word	0xa54ff53a
    3f58:	510e527f 	.word	0x510e527f
    3f5c:	9b05688c 	.word	0x9b05688c
    3f60:	1f83d9ab 	.word	0x1f83d9ab
    3f64:	367cd507 	.word	0x367cd507
    3f68:	c1059ed8 	.word	0xc1059ed8
    3f6c:	ffc00b31 	.word	0xffc00b31
    3f70:	64f98fa7 	.word	0x64f98fa7
    3f74:	befa4fa4 	.word	0xbefa4fa4
    3f78:	3c6ef372 	.word	0x3c6ef372
    3f7c:	f70e5939 	.word	0xf70e5939

00003f80 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f84:	f100 0308 	add.w	r3, r0, #8
    3f88:	b0d1      	sub	sp, #324	; 0x144
    3f8a:	9305      	str	r3, [sp, #20]
    3f8c:	ab08      	add	r3, sp, #32
    3f8e:	9300      	str	r3, [sp, #0]
    3f90:	f100 0328 	add.w	r3, r0, #40	; 0x28
    3f94:	9306      	str	r3, [sp, #24]
    3f96:	9a00      	ldr	r2, [sp, #0]
    3f98:	9b05      	ldr	r3, [sp, #20]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
    3f9a:	f853 0b04 	ldr.w	r0, [r3], #4
    3f9e:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
    3fa2:	9806      	ldr	r0, [sp, #24]
    3fa4:	4298      	cmp	r0, r3
    3fa6:	d1f8      	bne.n	3f9a <mbedtls_internal_sha256_process+0x1a>
    3fa8:	f10d 0940 	add.w	r9, sp, #64	; 0x40
    3fac:	464a      	mov	r2, r9
    3fae:	f101 0040 	add.w	r0, r1, #64	; 0x40
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
    3fb2:	784b      	ldrb	r3, [r1, #1]
    3fb4:	780c      	ldrb	r4, [r1, #0]
    3fb6:	041b      	lsls	r3, r3, #16
    3fb8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    3fbc:	78cc      	ldrb	r4, [r1, #3]
    3fbe:	3104      	adds	r1, #4
    3fc0:	4323      	orrs	r3, r4
    3fc2:	f811 4c02 	ldrb.w	r4, [r1, #-2]
    for( i = 0; i < 16; i++ )
    3fc6:	4288      	cmp	r0, r1
        GET_UINT32_BE( W[i], data, 4 * i );
    3fc8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    3fcc:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 16; i++ )
    3fd0:	d1ef      	bne.n	3fb2 <mbedtls_internal_sha256_process+0x32>
    3fd2:	489d      	ldr	r0, [pc, #628]	; (4248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>)
    3fd4:	46ca      	mov	sl, r9
    3fd6:	4686      	mov	lr, r0
    3fd8:	9b00      	ldr	r3, [sp, #0]
    3fda:	9900      	ldr	r1, [sp, #0]
    3fdc:	f8d3 c01c 	ldr.w	ip, [r3, #28]
    3fe0:	f8d3 8010 	ldr.w	r8, [r3, #16]
    3fe4:	e9d3 6b05 	ldrd	r6, fp, [r3, #20]
    3fe8:	e9d3 7200 	ldrd	r7, r2, [r3]
    3fec:	68c9      	ldr	r1, [r1, #12]
    3fee:	689b      	ldr	r3, [r3, #8]
    3ff0:	9001      	str	r0, [sp, #4]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    3ff2:	f8de 0000 	ldr.w	r0, [lr]
    3ff6:	f8da 4000 	ldr.w	r4, [sl]
    3ffa:	ea4f 25f8 	mov.w	r5, r8, ror #11
    3ffe:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
    4002:	4420      	add	r0, r4
    4004:	ea85 6578 	eor.w	r5, r5, r8, ror #25
    4008:	4405      	add	r5, r0
    400a:	ea8b 0006 	eor.w	r0, fp, r6
    400e:	ea00 0008 	and.w	r0, r0, r8
    4012:	ea80 000b 	eor.w	r0, r0, fp
    4016:	4405      	add	r5, r0
    4018:	ea47 0402 	orr.w	r4, r7, r2
    401c:	ea4f 3077 	mov.w	r0, r7, ror #13
    4020:	44ac      	add	ip, r5
    4022:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
    4026:	ea07 0502 	and.w	r5, r7, r2
    402a:	401c      	ands	r4, r3
    402c:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
    4030:	432c      	orrs	r4, r5
    4032:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    4034:	f8de 5004 	ldr.w	r5, [lr, #4]
    4038:	f8da 0004 	ldr.w	r0, [sl, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    403c:	4461      	add	r1, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    403e:	4405      	add	r5, r0
    4040:	44ab      	add	fp, r5
    4042:	ea88 0506 	eor.w	r5, r8, r6
    4046:	400d      	ands	r5, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    4048:	44a4      	add	ip, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    404a:	ea85 0406 	eor.w	r4, r5, r6
    404e:	eb0b 0504 	add.w	r5, fp, r4
    4052:	ea4f 2bf1 	mov.w	fp, r1, ror #11
    4056:	ea8b 1bb1 	eor.w	fp, fp, r1, ror #6
    405a:	ea8b 6b71 	eor.w	fp, fp, r1, ror #25
    405e:	44ab      	add	fp, r5
    4060:	ea4c 0007 	orr.w	r0, ip, r7
    4064:	ea4f 357c 	mov.w	r5, ip, ror #13
    4068:	ea0c 0407 	and.w	r4, ip, r7
    406c:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
    4070:	4010      	ands	r0, r2
    4072:	4320      	orrs	r0, r4
    4074:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    4078:	f8de 4008 	ldr.w	r4, [lr, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    407c:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    407e:	f8da 0008 	ldr.w	r0, [sl, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    4082:	445b      	add	r3, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    4084:	4404      	add	r4, r0
    4086:	4426      	add	r6, r4
    4088:	ea81 0408 	eor.w	r4, r1, r8
    408c:	401c      	ands	r4, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    408e:	445d      	add	r5, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    4090:	ea84 0b08 	eor.w	fp, r4, r8
    4094:	eb06 040b 	add.w	r4, r6, fp
    4098:	ea4f 26f3 	mov.w	r6, r3, ror #11
    409c:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
    40a0:	ea86 6673 	eor.w	r6, r6, r3, ror #25
    40a4:	4426      	add	r6, r4
    40a6:	ea4c 0005 	orr.w	r0, ip, r5
    40aa:	ea4f 3475 	mov.w	r4, r5, ror #13
    40ae:	ea0c 0b05 	and.w	fp, ip, r5
    40b2:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
    40b6:	4038      	ands	r0, r7
    40b8:	ea40 000b 	orr.w	r0, r0, fp
    40bc:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
    40c0:	4404      	add	r4, r0
    40c2:	4434      	add	r4, r6
    40c4:	4432      	add	r2, r6
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    40c6:	f8de 000c 	ldr.w	r0, [lr, #12]
    40ca:	f8da 600c 	ldr.w	r6, [sl, #12]
    40ce:	ea81 0b03 	eor.w	fp, r1, r3
    40d2:	4430      	add	r0, r6
    40d4:	ea0b 0b02 	and.w	fp, fp, r2
    40d8:	ea4f 26f2 	mov.w	r6, r2, ror #11
    40dc:	ea8b 0b01 	eor.w	fp, fp, r1
    40e0:	4440      	add	r0, r8
    40e2:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
    40e6:	4458      	add	r0, fp
    40e8:	ea86 6672 	eor.w	r6, r6, r2, ror #25
    40ec:	4406      	add	r6, r0
    40ee:	eb07 0806 	add.w	r8, r7, r6
    40f2:	ea4f 3074 	mov.w	r0, r4, ror #13
    40f6:	ea45 0704 	orr.w	r7, r5, r4
    40fa:	ea05 0b04 	and.w	fp, r5, r4
    40fe:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    4102:	ea07 070c 	and.w	r7, r7, ip
    4106:	ea47 070b 	orr.w	r7, r7, fp
    410a:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
    410e:	4438      	add	r0, r7
    4110:	4430      	add	r0, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    4112:	f8da 7010 	ldr.w	r7, [sl, #16]
    4116:	f8de 6010 	ldr.w	r6, [lr, #16]
    411a:	ea83 0b02 	eor.w	fp, r3, r2
    411e:	443e      	add	r6, r7
    4120:	4431      	add	r1, r6
    4122:	ea0b 0b08 	and.w	fp, fp, r8
    4126:	ea4f 26f8 	mov.w	r6, r8, ror #11
    412a:	ea8b 0b03 	eor.w	fp, fp, r3
    412e:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
    4132:	4459      	add	r1, fp
    4134:	ea86 6678 	eor.w	r6, r6, r8, ror #25
    4138:	440e      	add	r6, r1
    413a:	ea44 0700 	orr.w	r7, r4, r0
    413e:	ea4f 3170 	mov.w	r1, r0, ror #13
    4142:	ea04 0b00 	and.w	fp, r4, r0
    4146:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
    414a:	402f      	ands	r7, r5
    414c:	ea47 070b 	orr.w	r7, r7, fp
    4150:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
    4154:	4439      	add	r1, r7
    4156:	4431      	add	r1, r6
    4158:	44b4      	add	ip, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    415a:	f8da 7014 	ldr.w	r7, [sl, #20]
    415e:	f8de 6014 	ldr.w	r6, [lr, #20]
    4162:	ea82 0b08 	eor.w	fp, r2, r8
    4166:	443e      	add	r6, r7
    4168:	4433      	add	r3, r6
    416a:	ea0b 0b0c 	and.w	fp, fp, ip
    416e:	ea4f 26fc 	mov.w	r6, ip, ror #11
    4172:	ea8b 0b02 	eor.w	fp, fp, r2
    4176:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
    417a:	445b      	add	r3, fp
    417c:	ea86 667c 	eor.w	r6, r6, ip, ror #25
    4180:	441e      	add	r6, r3
    4182:	eb05 0b06 	add.w	fp, r5, r6
    4186:	ea4f 3371 	mov.w	r3, r1, ror #13
    418a:	ea40 0501 	orr.w	r5, r0, r1
    418e:	ea00 0701 	and.w	r7, r0, r1
    4192:	4025      	ands	r5, r4
    4194:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    4198:	433d      	orrs	r5, r7
    419a:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    419e:	442b      	add	r3, r5
    41a0:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    41a2:	f8de 5018 	ldr.w	r5, [lr, #24]
    41a6:	f8da 6018 	ldr.w	r6, [sl, #24]
    41aa:	f10e 0e20 	add.w	lr, lr, #32
    41ae:	4435      	add	r5, r6
    41b0:	4415      	add	r5, r2
    41b2:	ea88 020c 	eor.w	r2, r8, ip
    41b6:	ea02 020b 	and.w	r2, r2, fp
    41ba:	ea82 0708 	eor.w	r7, r2, r8
    41be:	19ea      	adds	r2, r5, r7
    41c0:	ea4f 25fb 	mov.w	r5, fp, ror #11
    41c4:	ea85 15bb 	eor.w	r5, r5, fp, ror #6
    41c8:	ea85 657b 	eor.w	r5, r5, fp, ror #25
    41cc:	4415      	add	r5, r2
    41ce:	1966      	adds	r6, r4, r5
    41d0:	ea4f 3273 	mov.w	r2, r3, ror #13
    41d4:	ea41 0403 	orr.w	r4, r1, r3
    41d8:	4004      	ands	r4, r0
    41da:	ea01 0703 	and.w	r7, r1, r3
    41de:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
    41e2:	433c      	orrs	r4, r7
    41e4:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
    41e8:	4422      	add	r2, r4
    41ea:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    41ec:	f85e 4c04 	ldr.w	r4, [lr, #-4]
    41f0:	f8da 501c 	ldr.w	r5, [sl, #28]
    41f4:	f10a 0a20 	add.w	sl, sl, #32
    41f8:	1967      	adds	r7, r4, r5
    41fa:	44b8      	add	r8, r7
    41fc:	ea8c 070b 	eor.w	r7, ip, fp
    4200:	4037      	ands	r7, r6
    4202:	ea87 070c 	eor.w	r7, r7, ip
    4206:	4447      	add	r7, r8
    4208:	ea4f 28f6 	mov.w	r8, r6, ror #11
    420c:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
    4210:	ea88 6876 	eor.w	r8, r8, r6, ror #25
    4214:	4447      	add	r7, r8
    4216:	eb00 0807 	add.w	r8, r0, r7
    421a:	ea43 0402 	orr.w	r4, r3, r2
    421e:	ea4f 3072 	mov.w	r0, r2, ror #13
    4222:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
    4226:	400c      	ands	r4, r1
    4228:	ea03 0502 	and.w	r5, r3, r2
    422c:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
    4230:	432c      	orrs	r4, r5
    4232:	4404      	add	r4, r0
    for( i = 0; i < 16; i += 8 )
    4234:	4805      	ldr	r0, [pc, #20]	; (424c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>)
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    4236:	4427      	add	r7, r4
    for( i = 0; i < 16; i += 8 )
    4238:	4570      	cmp	r0, lr
    423a:	f47f aeda 	bne.w	3ff2 <mbedtls_internal_sha256_process+0x72>
    423e:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
    4242:	9007      	str	r0, [sp, #28]
    4244:	e004      	b.n	4250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    4246:	bf00      	nop
    4248:	000086bc 	.word	0x000086bc
    424c:	000086fc 	.word	0x000086fc
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    4250:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    4254:	f8d9 5004 	ldr.w	r5, [r9, #4]
    4258:	ea4f 4ef0 	mov.w	lr, r0, ror #19
    425c:	ea8e 4e70 	eor.w	lr, lr, r0, ror #17
    4260:	f8d9 4000 	ldr.w	r4, [r9]
    4264:	ea8e 2e90 	eor.w	lr, lr, r0, lsr #10
    4268:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
    426c:	ea4f 4ab5 	mov.w	sl, r5, ror #18
    4270:	4420      	add	r0, r4
    4272:	ea8a 1af5 	eor.w	sl, sl, r5, ror #7
    4276:	ea8a 0ad5 	eor.w	sl, sl, r5, lsr #3
    427a:	4486      	add	lr, r0
    427c:	ea4f 24f8 	mov.w	r4, r8, ror #11
    4280:	eb0e 000a 	add.w	r0, lr, sl
    4284:	ea84 14b8 	eor.w	r4, r4, r8, ror #6
    4288:	9004      	str	r0, [sp, #16]
    428a:	ea84 6078 	eor.w	r0, r4, r8, ror #25
    428e:	ea8b 0406 	eor.w	r4, fp, r6
    4292:	ea04 0408 	and.w	r4, r4, r8
    4296:	ea84 040b 	eor.w	r4, r4, fp
    429a:	4404      	add	r4, r0
    429c:	9801      	ldr	r0, [sp, #4]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    429e:	ea88 0e06 	eor.w	lr, r8, r6
    42a2:	6c00      	ldr	r0, [r0, #64]	; 0x40
    42a4:	f109 0920 	add.w	r9, r9, #32
    42a8:	4420      	add	r0, r4
    42aa:	9c04      	ldr	r4, [sp, #16]
    42ac:	4420      	add	r0, r4
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    42ae:	4484      	add	ip, r0
    42b0:	4461      	add	r1, ip
    42b2:	9102      	str	r1, [sp, #8]
    42b4:	ea47 0002 	orr.w	r0, r7, r2
    42b8:	ea4f 3177 	mov.w	r1, r7, ror #13
    42bc:	f8c9 4020 	str.w	r4, [r9, #32]
    42c0:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
    42c4:	ea07 0402 	and.w	r4, r7, r2
    42c8:	4018      	ands	r0, r3
    42ca:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
    42ce:	4320      	orrs	r0, r4
    42d0:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    42d2:	f8d9 101c 	ldr.w	r1, [r9, #28]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    42d6:	4484      	add	ip, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    42d8:	ea4f 40f1 	mov.w	r0, r1, ror #19
    42dc:	ea80 4071 	eor.w	r0, r0, r1, ror #17
    42e0:	ea80 2091 	eor.w	r0, r0, r1, lsr #10
    42e4:	f8d9 1008 	ldr.w	r1, [r9, #8]
    42e8:	f859 4c18 	ldr.w	r4, [r9, #-24]
    42ec:	4429      	add	r1, r5
    42ee:	4401      	add	r1, r0
    42f0:	9802      	ldr	r0, [sp, #8]
    42f2:	ea4f 45b4 	mov.w	r5, r4, ror #18
    42f6:	ea0e 0e00 	and.w	lr, lr, r0
    42fa:	9801      	ldr	r0, [sp, #4]
    42fc:	ea85 15f4 	eor.w	r5, r5, r4, ror #7
    4300:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4302:	ea85 05d4 	eor.w	r5, r5, r4, lsr #3
    4306:	4429      	add	r1, r5
    4308:	4458      	add	r0, fp
    430a:	4408      	add	r0, r1
    430c:	ea8e 0e06 	eor.w	lr, lr, r6
    4310:	4486      	add	lr, r0
    4312:	9802      	ldr	r0, [sp, #8]
    4314:	f8c9 1024 	str.w	r1, [r9, #36]	; 0x24
    4318:	ea4f 25f0 	mov.w	r5, r0, ror #11
    431c:	ea85 15b0 	eor.w	r5, r5, r0, ror #6
    4320:	ea85 6570 	eor.w	r5, r5, r0, ror #25
    4324:	eb05 000e 	add.w	r0, r5, lr
    4328:	eb03 0b00 	add.w	fp, r3, r0
    432c:	ea4f 357c 	mov.w	r5, ip, ror #13
    4330:	ea47 030c 	orr.w	r3, r7, ip
    4334:	ea07 0e0c 	and.w	lr, r7, ip
    4338:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
    433c:	4013      	ands	r3, r2
    433e:	ea43 030e 	orr.w	r3, r3, lr
    4342:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
    4346:	441d      	add	r5, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    4348:	9b04      	ldr	r3, [sp, #16]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    434a:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    434c:	ea4f 40f3 	mov.w	r0, r3, ror #19
    4350:	ea80 4073 	eor.w	r0, r0, r3, ror #17
    4354:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
    4358:	f8d9 300c 	ldr.w	r3, [r9, #12]
    435c:	f859 ec14 	ldr.w	lr, [r9, #-20]
    4360:	4423      	add	r3, r4
    4362:	4403      	add	r3, r0
    4364:	9802      	ldr	r0, [sp, #8]
    4366:	ea4f 44be 	mov.w	r4, lr, ror #18
    436a:	ea88 0a00 	eor.w	sl, r8, r0
    436e:	9801      	ldr	r0, [sp, #4]
    4370:	ea84 14fe 	eor.w	r4, r4, lr, ror #7
    4374:	6c80      	ldr	r0, [r0, #72]	; 0x48
    4376:	ea84 04de 	eor.w	r4, r4, lr, lsr #3
    437a:	4423      	add	r3, r4
    437c:	ea0a 0a0b 	and.w	sl, sl, fp
    4380:	4430      	add	r0, r6
    4382:	ea4f 24fb 	mov.w	r4, fp, ror #11
    4386:	4418      	add	r0, r3
    4388:	ea8a 0a08 	eor.w	sl, sl, r8
    438c:	ea84 14bb 	eor.w	r4, r4, fp, ror #6
    4390:	ea84 647b 	eor.w	r4, r4, fp, ror #25
    4394:	4482      	add	sl, r0
    4396:	eb04 000a 	add.w	r0, r4, sl
    439a:	4402      	add	r2, r0
    439c:	ea4c 0405 	orr.w	r4, ip, r5
    43a0:	ea4f 3675 	mov.w	r6, r5, ror #13
    43a4:	9203      	str	r2, [sp, #12]
    43a6:	ea86 06b5 	eor.w	r6, r6, r5, ror #2
    43aa:	ea0c 0205 	and.w	r2, ip, r5
    43ae:	403c      	ands	r4, r7
    43b0:	ea86 56b5 	eor.w	r6, r6, r5, ror #22
    43b4:	4314      	orrs	r4, r2
    43b6:	4434      	add	r4, r6
    43b8:	4404      	add	r4, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    43ba:	ea4f 40f1 	mov.w	r0, r1, ror #19
    43be:	ea80 4071 	eor.w	r0, r0, r1, ror #17
    43c2:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
    43c6:	f8d9 0010 	ldr.w	r0, [r9, #16]
    43ca:	f859 2c10 	ldr.w	r2, [r9, #-16]
    43ce:	4486      	add	lr, r0
    43d0:	4471      	add	r1, lr
    43d2:	ea4f 4eb2 	mov.w	lr, r2, ror #18
    43d6:	ea8e 1ef2 	eor.w	lr, lr, r2, ror #7
    43da:	ea8e 0ed2 	eor.w	lr, lr, r2, lsr #3
    43de:	448e      	add	lr, r1
    43e0:	9902      	ldr	r1, [sp, #8]
    43e2:	9803      	ldr	r0, [sp, #12]
    43e4:	ea81 010b 	eor.w	r1, r1, fp
    43e8:	4001      	ands	r1, r0
    43ea:	9802      	ldr	r0, [sp, #8]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    43ec:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    43f0:	4041      	eors	r1, r0
    43f2:	9801      	ldr	r0, [sp, #4]
    43f4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    43f6:	9803      	ldr	r0, [sp, #12]
    43f8:	4446      	add	r6, r8
    43fa:	4476      	add	r6, lr
    43fc:	4431      	add	r1, r6
    43fe:	9e03      	ldr	r6, [sp, #12]
    4400:	ea4f 20f0 	mov.w	r0, r0, ror #11
    4404:	ea80 10b6 	eor.w	r0, r0, r6, ror #6
    4408:	ea80 6076 	eor.w	r0, r0, r6, ror #25
    440c:	1846      	adds	r6, r0, r1
    440e:	ea45 0004 	orr.w	r0, r5, r4
    4412:	ea05 0104 	and.w	r1, r5, r4
    4416:	ea4f 3874 	mov.w	r8, r4, ror #13
    441a:	ea00 000c 	and.w	r0, r0, ip
    441e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    4422:	4308      	orrs	r0, r1
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    4424:	ea4f 41f3 	mov.w	r1, r3, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    4428:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    442c:	ea81 4173 	eor.w	r1, r1, r3, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    4430:	4440      	add	r0, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    4432:	ea81 2393 	eor.w	r3, r1, r3, lsr #10
    4436:	f8d9 1014 	ldr.w	r1, [r9, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    443a:	4430      	add	r0, r6
    443c:	eb07 0a06 	add.w	sl, r7, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    4440:	f859 6c0c 	ldr.w	r6, [r9, #-12]
    4444:	440a      	add	r2, r1
    4446:	4413      	add	r3, r2
    4448:	ea4f 42b6 	mov.w	r2, r6, ror #18
    444c:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
    4450:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
    4454:	441a      	add	r2, r3
    4456:	9b03      	ldr	r3, [sp, #12]
    4458:	9902      	ldr	r1, [sp, #8]
    445a:	ea8b 0703 	eor.w	r7, fp, r3
    445e:	9b01      	ldr	r3, [sp, #4]
    4460:	ea07 070a 	and.w	r7, r7, sl
    4464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4466:	ea87 070b 	eor.w	r7, r7, fp
    446a:	4413      	add	r3, r2
    446c:	440b      	add	r3, r1
    446e:	ea4f 21fa 	mov.w	r1, sl, ror #11
    4472:	ea81 11ba 	eor.w	r1, r1, sl, ror #6
    4476:	441f      	add	r7, r3
    4478:	ea81 617a 	eor.w	r1, r1, sl, ror #25
    447c:	19cb      	adds	r3, r1, r7
    447e:	ea44 0700 	orr.w	r7, r4, r0
    4482:	ea4f 3170 	mov.w	r1, r0, ror #13
    4486:	ea04 0800 	and.w	r8, r4, r0
    448a:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
    448e:	402f      	ands	r7, r5
    4490:	ea47 0708 	orr.w	r7, r7, r8
    4494:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
    4498:	4439      	add	r1, r7
    449a:	4419      	add	r1, r3
    449c:	449c      	add	ip, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    449e:	f859 8c08 	ldr.w	r8, [r9, #-8]
    44a2:	f8d9 3018 	ldr.w	r3, [r9, #24]
    44a6:	ea4f 47fe 	mov.w	r7, lr, ror #19
    44aa:	ea87 477e 	eor.w	r7, r7, lr, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    44ae:	f8c9 e02c 	str.w	lr, [r9, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    44b2:	ea87 2e9e 	eor.w	lr, r7, lr, lsr #10
    44b6:	199f      	adds	r7, r3, r6
    44b8:	ea4f 43b8 	mov.w	r3, r8, ror #18
    44bc:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
    44c0:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
    44c4:	4477      	add	r7, lr
    44c6:	441f      	add	r7, r3
    44c8:	9b03      	ldr	r3, [sp, #12]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    44ca:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    44ce:	ea83 0e0a 	eor.w	lr, r3, sl
    44d2:	ea0e 0e0c 	and.w	lr, lr, ip
    44d6:	ea8e 0e03 	eor.w	lr, lr, r3
    44da:	9b01      	ldr	r3, [sp, #4]
    44dc:	f8c9 7034 	str.w	r7, [r9, #52]	; 0x34
    44e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    44e2:	443b      	add	r3, r7
    44e4:	445b      	add	r3, fp
    44e6:	449e      	add	lr, r3
    44e8:	ea4f 23fc 	mov.w	r3, ip, ror #11
    44ec:	ea83 13bc 	eor.w	r3, r3, ip, ror #6
    44f0:	ea83 637c 	eor.w	r3, r3, ip, ror #25
    44f4:	eb03 060e 	add.w	r6, r3, lr
    44f8:	eb05 0b06 	add.w	fp, r5, r6
    44fc:	ea4f 3371 	mov.w	r3, r1, ror #13
    4500:	ea40 0501 	orr.w	r5, r0, r1
    4504:	ea00 0e01 	and.w	lr, r0, r1
    4508:	4025      	ands	r5, r4
    450a:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    450e:	ea45 050e 	orr.w	r5, r5, lr
    4512:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    4516:	442b      	add	r3, r5
    4518:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    451a:	f8d9 501c 	ldr.w	r5, [r9, #28]
    451e:	ea4f 46f2 	mov.w	r6, r2, ror #19
    4522:	f859 ec04 	ldr.w	lr, [r9, #-4]
    4526:	ea86 4672 	eor.w	r6, r6, r2, ror #17
    452a:	ea86 2292 	eor.w	r2, r6, r2, lsr #10
    452e:	eb05 0608 	add.w	r6, r5, r8
    4532:	4416      	add	r6, r2
    4534:	ea4f 42be 	mov.w	r2, lr, ror #18
    4538:	ea82 12fe 	eor.w	r2, r2, lr, ror #7
    453c:	ea82 02de 	eor.w	r2, r2, lr, lsr #3
    4540:	4416      	add	r6, r2
    4542:	9a01      	ldr	r2, [sp, #4]
    4544:	ea8a 080c 	eor.w	r8, sl, ip
    4548:	6d95      	ldr	r5, [r2, #88]	; 0x58
    454a:	9a03      	ldr	r2, [sp, #12]
    454c:	4435      	add	r5, r6
    454e:	4415      	add	r5, r2
    4550:	ea08 080b 	and.w	r8, r8, fp
    4554:	ea4f 22fb 	mov.w	r2, fp, ror #11
    4558:	ea88 080a 	eor.w	r8, r8, sl
    455c:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
    4560:	4445      	add	r5, r8
    4562:	ea82 627b 	eor.w	r2, r2, fp, ror #25
    4566:	4415      	add	r5, r2
    4568:	f8c9 6038 	str.w	r6, [r9, #56]	; 0x38
    456c:	ea4f 3273 	mov.w	r2, r3, ror #13
    4570:	1966      	adds	r6, r4, r5
    4572:	ea41 0403 	orr.w	r4, r1, r3
    4576:	4004      	ands	r4, r0
    4578:	ea01 0803 	and.w	r8, r1, r3
    457c:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
    4580:	ea44 0408 	orr.w	r4, r4, r8
    4584:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
    4588:	4422      	add	r2, r4
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    458a:	ea4f 44f7 	mov.w	r4, r7, ror #19
    458e:	ea84 4477 	eor.w	r4, r4, r7, ror #17
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    4592:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    4594:	ea84 2797 	eor.w	r7, r4, r7, lsr #10
    4598:	f8d9 5000 	ldr.w	r5, [r9]
    459c:	9c04      	ldr	r4, [sp, #16]
    459e:	44a6      	add	lr, r4
    45a0:	ea4f 44b5 	mov.w	r4, r5, ror #18
    45a4:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
    45a8:	ea84 05d5 	eor.w	r5, r4, r5, lsr #3
    45ac:	9c01      	ldr	r4, [sp, #4]
    45ae:	4477      	add	r7, lr
    45b0:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    45b2:	443d      	add	r5, r7
    45b4:	ea8c 0e0b 	eor.w	lr, ip, fp
    45b8:	442c      	add	r4, r5
    45ba:	ea0e 0e06 	and.w	lr, lr, r6
    45be:	ea4f 27f6 	mov.w	r7, r6, ror #11
    45c2:	ea8e 0e0c 	eor.w	lr, lr, ip
    45c6:	4454      	add	r4, sl
    45c8:	ea87 17b6 	eor.w	r7, r7, r6, ror #6
    45cc:	4474      	add	r4, lr
    45ce:	ea87 6776 	eor.w	r7, r7, r6, ror #25
    45d2:	4427      	add	r7, r4
    45d4:	eb00 0807 	add.w	r8, r0, r7
    45d8:	ea43 0402 	orr.w	r4, r3, r2
    45dc:	ea4f 3072 	mov.w	r0, r2, ror #13
    45e0:	f8c9 503c 	str.w	r5, [r9, #60]	; 0x3c
    45e4:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
    45e8:	400c      	ands	r4, r1
    45ea:	ea03 0502 	and.w	r5, r3, r2
    45ee:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
    45f2:	432c      	orrs	r4, r5
    45f4:	4404      	add	r4, r0
    45f6:	9801      	ldr	r0, [sp, #4]
    45f8:	4427      	add	r7, r4
    for( i = 16; i < 64; i += 8 )
    45fa:	3020      	adds	r0, #32
    45fc:	9001      	str	r0, [sp, #4]
    45fe:	9807      	ldr	r0, [sp, #28]
    4600:	4548      	cmp	r0, r9
    4602:	f47f ae25 	bne.w	4250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    4606:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	; 0x34
    460a:	e9cd 7208 	strd	r7, r2, [sp, #32]
    460e:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
    4612:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    4616:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
    461a:	9b05      	ldr	r3, [sp, #20]
    461c:	9900      	ldr	r1, [sp, #0]
    461e:	681b      	ldr	r3, [r3, #0]
    4620:	f851 2b04 	ldr.w	r2, [r1], #4
    4624:	4413      	add	r3, r2
    4626:	9a05      	ldr	r2, [sp, #20]
    4628:	9100      	str	r1, [sp, #0]
    462a:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 8; i++ )
    462e:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += A[i];
    4630:	9205      	str	r2, [sp, #20]
    for( i = 0; i < 8; i++ )
    4632:	4293      	cmp	r3, r2
    4634:	d1f1      	bne.n	461a <CONFIG_FPROTECT_BLOCK_SIZE+0x61a>

    return( 0 );
}
    4636:	2000      	movs	r0, #0
    4638:	b051      	add	sp, #324	; 0x144
    463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    463e:	bf00      	nop

00004640 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    4640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4642:	4b10      	ldr	r3, [pc, #64]	; (4684 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    4644:	4f10      	ldr	r7, [pc, #64]	; (4688 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4646:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    464a:	3001      	adds	r0, #1
    464c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4650:	42ae      	cmp	r6, r5
    4652:	d800      	bhi.n	4656 <z_sys_init_run_level+0x16>
		}
	}
}
    4654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    4656:	e9d5 3400 	ldrd	r3, r4, [r5]
    465a:	4620      	mov	r0, r4
    465c:	4798      	blx	r3
    465e:	b170      	cbz	r0, 467e <z_sys_init_run_level+0x3e>
    4660:	b16c      	cbz	r4, 467e <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    4662:	2301      	movs	r3, #1
				(dev - __device_start));
    4664:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    4666:	4a09      	ldr	r2, [pc, #36]	; (468c <z_sys_init_run_level+0x4c>)
    4668:	1124      	asrs	r4, r4, #4
    466a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    466c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    4670:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    4674:	fa03 f404 	lsl.w	r4, r3, r4
    4678:	4304      	orrs	r4, r0
    467a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    467e:	3508      	adds	r5, #8
    4680:	e7e6      	b.n	4650 <z_sys_init_run_level+0x10>
    4682:	bf00      	nop
    4684:	000087bc 	.word	0x000087bc
    4688:	200000dc 	.word	0x200000dc
    468c:	2000014c 	.word	0x2000014c

00004690 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    4690:	4b08      	ldr	r3, [pc, #32]	; (46b4 <z_device_ready+0x24>)
    4692:	1ac0      	subs	r0, r0, r3
    4694:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    4696:	4b08      	ldr	r3, [pc, #32]	; (46b8 <z_device_ready+0x28>)
    4698:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    469a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    469e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    46a0:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    46a4:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    46a8:	4210      	tst	r0, r2
}
    46aa:	bf0c      	ite	eq
    46ac:	4618      	moveq	r0, r3
    46ae:	2000      	movne	r0, #0
    46b0:	4770      	bx	lr
    46b2:	bf00      	nop
    46b4:	200000dc 	.word	0x200000dc
    46b8:	2000014c 	.word	0x2000014c

000046bc <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    46bc:	4911      	ldr	r1, [pc, #68]	; (4704 <z_impl_device_get_binding+0x48>)
{
    46be:	b570      	push	{r4, r5, r6, lr}
    46c0:	4605      	mov	r5, r0
    46c2:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    46c4:	4c10      	ldr	r4, [pc, #64]	; (4708 <z_impl_device_get_binding+0x4c>)
    46c6:	428c      	cmp	r4, r1
    46c8:	d104      	bne.n	46d4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    46ca:	4c0f      	ldr	r4, [pc, #60]	; (4708 <z_impl_device_get_binding+0x4c>)
    46cc:	42b4      	cmp	r4, r6
    46ce:	d10a      	bne.n	46e6 <z_impl_device_get_binding+0x2a>
	return NULL;
    46d0:	2400      	movs	r4, #0
    46d2:	e014      	b.n	46fe <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    46d4:	4620      	mov	r0, r4
    46d6:	f7ff ffdb 	bl	4690 <z_device_ready>
    46da:	b110      	cbz	r0, 46e2 <z_impl_device_get_binding+0x26>
    46dc:	6823      	ldr	r3, [r4, #0]
    46de:	42ab      	cmp	r3, r5
    46e0:	d00d      	beq.n	46fe <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    46e2:	3410      	adds	r4, #16
    46e4:	e7ef      	b.n	46c6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    46e6:	4620      	mov	r0, r4
    46e8:	f7ff ffd2 	bl	4690 <z_device_ready>
    46ec:	b908      	cbnz	r0, 46f2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    46ee:	3410      	adds	r4, #16
    46f0:	e7ec      	b.n	46cc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    46f2:	4628      	mov	r0, r5
    46f4:	6821      	ldr	r1, [r4, #0]
    46f6:	f001 fcae 	bl	6056 <strcmp>
    46fa:	2800      	cmp	r0, #0
    46fc:	d1f7      	bne.n	46ee <z_impl_device_get_binding+0x32>
}
    46fe:	4620      	mov	r0, r4
    4700:	bd70      	pop	{r4, r5, r6, pc}
    4702:	bf00      	nop
    4704:	2000014c 	.word	0x2000014c
    4708:	200000dc 	.word	0x200000dc

0000470c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    470c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    470e:	4605      	mov	r5, r0
    4710:	460e      	mov	r6, r1
	__asm__ volatile(
    4712:	f04f 0320 	mov.w	r3, #32
    4716:	f3ef 8711 	mrs	r7, BASEPRI
    471a:	f383 8811 	msr	BASEPRI, r3
    471e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4722:	f000 fba1 	bl	4e68 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4726:	2200      	movs	r2, #0
    4728:	2d04      	cmp	r5, #4
    472a:	bf98      	it	ls
    472c:	4b18      	ldrls	r3, [pc, #96]	; (4790 <z_fatal_error+0x84>)
    472e:	4604      	mov	r4, r0
	switch (reason) {
    4730:	bf94      	ite	ls
    4732:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    4736:	4b17      	ldrhi	r3, [pc, #92]	; (4794 <z_fatal_error+0x88>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4738:	9200      	str	r2, [sp, #0]
    473a:	2145      	movs	r1, #69	; 0x45
    473c:	462a      	mov	r2, r5
    473e:	4816      	ldr	r0, [pc, #88]	; (4798 <z_fatal_error+0x8c>)
    4740:	f001 f92d 	bl	599e <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4744:	b13e      	cbz	r6, 4756 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4746:	69f3      	ldr	r3, [r6, #28]
    4748:	f3c3 0308 	ubfx	r3, r3, #0, #9
    474c:	b11b      	cbz	r3, 4756 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    474e:	2145      	movs	r1, #69	; 0x45
    4750:	4812      	ldr	r0, [pc, #72]	; (479c <z_fatal_error+0x90>)
    4752:	f001 f924 	bl	599e <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
    4756:	b134      	cbz	r4, 4766 <z_fatal_error+0x5a>
    4758:	4620      	mov	r0, r4
    475a:	f003 fd1c 	bl	8196 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    475e:	4603      	mov	r3, r0
    4760:	b108      	cbz	r0, 4766 <z_fatal_error+0x5a>
    4762:	7802      	ldrb	r2, [r0, #0]
    4764:	b902      	cbnz	r2, 4768 <z_fatal_error+0x5c>
		thread_name = "unknown";
    4766:	4b0e      	ldr	r3, [pc, #56]	; (47a0 <z_fatal_error+0x94>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4768:	4622      	mov	r2, r4
    476a:	2145      	movs	r1, #69	; 0x45
    476c:	480d      	ldr	r0, [pc, #52]	; (47a4 <z_fatal_error+0x98>)
    476e:	f001 f916 	bl	599e <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4772:	4631      	mov	r1, r6
    4774:	4628      	mov	r0, r5
    4776:	f7fe fdff 	bl	3378 <k_sys_fatal_error_handler>
	__asm__ volatile(
    477a:	f387 8811 	msr	BASEPRI, r7
    477e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4782:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    4784:	b003      	add	sp, #12
    4786:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    478a:	f7fe b847 	b.w	281c <z_impl_k_thread_abort>
    478e:	bf00      	nop
    4790:	000087d4 	.word	0x000087d4
    4794:	00009516 	.word	0x00009516
    4798:	0000952c 	.word	0x0000952c
    479c:	00009559 	.word	0x00009559
    47a0:	00009524 	.word	0x00009524
    47a4:	0000957f 	.word	0x0000957f

000047a8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    47a8:	4802      	ldr	r0, [pc, #8]	; (47b4 <z_bss_zero+0xc>)
    47aa:	4a03      	ldr	r2, [pc, #12]	; (47b8 <z_bss_zero+0x10>)
    47ac:	2100      	movs	r1, #0
    47ae:	1a12      	subs	r2, r2, r0
    47b0:	f001 bc98 	b.w	60e4 <memset>
    47b4:	200001a0 	.word	0x200001a0
    47b8:	20002eac 	.word	0x20002eac

000047bc <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    47bc:	2201      	movs	r2, #1
{
    47be:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    47c0:	4b08      	ldr	r3, [pc, #32]	; (47e4 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    47c2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    47c4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    47c6:	f7ff ff3b 	bl	4640 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    47ca:	f000 fb67 	bl	4e9c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    47ce:	2003      	movs	r0, #3
    47d0:	f7ff ff36 	bl	4640 <z_sys_init_run_level>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    47d4:	f7fb fe3c 	bl	450 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    47d8:	4a03      	ldr	r2, [pc, #12]	; (47e8 <bg_thread_main+0x2c>)
    47da:	7b13      	ldrb	r3, [r2, #12]
    47dc:	f023 0301 	bic.w	r3, r3, #1
    47e0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    47e2:	bd08      	pop	{r3, pc}
    47e4:	20002eaa 	.word	0x20002eaa
    47e8:	200001a0 	.word	0x200001a0

000047ec <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    47ec:	b508      	push	{r3, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    47ee:	4b14      	ldr	r3, [pc, #80]	; (4840 <z_cstart+0x54>)
	uint32_t msp =
    47f0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    47f4:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    47f8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    47fc:	2500      	movs	r5, #0
    47fe:	23e0      	movs	r3, #224	; 0xe0
    4800:	4c10      	ldr	r4, [pc, #64]	; (4844 <z_cstart+0x58>)
    4802:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4806:	77e5      	strb	r5, [r4, #31]
    4808:	7625      	strb	r5, [r4, #24]
    480a:	7665      	strb	r5, [r4, #25]
    480c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    480e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4810:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4814:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4816:	f7fd ffd5 	bl	27c4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    481a:	f7fd fd69 	bl	22f0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    481e:	f04f 33ff 	mov.w	r3, #4294967295

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4822:	4628      	mov	r0, r5
    4824:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4826:	62e3      	str	r3, [r4, #44]	; 0x2c
    4828:	f7ff ff0a 	bl	4640 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    482c:	2001      	movs	r0, #1
    482e:	f7ff ff07 	bl	4640 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    4832:	462b      	mov	r3, r5
    4834:	462a      	mov	r2, r5
    4836:	4629      	mov	r1, r5
    4838:	4803      	ldr	r0, [pc, #12]	; (4848 <z_cstart+0x5c>)
    483a:	f7fd fd35 	bl	22a8 <z_arm_switch_to_main_no_multithreading>
    483e:	bf00      	nop
    4840:	200056b0 	.word	0x200056b0
    4844:	e000ed00 	.word	0xe000ed00
    4848:	000047bd 	.word	0x000047bd

0000484c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    484c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    484e:	4b0e      	ldr	r3, [pc, #56]	; (4888 <init_mem_slab_module+0x3c>)
    4850:	4c0e      	ldr	r4, [pc, #56]	; (488c <init_mem_slab_module+0x40>)
    4852:	42a3      	cmp	r3, r4
    4854:	d301      	bcc.n	485a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    4856:	2000      	movs	r0, #0
	return rc;
}
    4858:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    485a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    485e:	ea41 0200 	orr.w	r2, r1, r0
    4862:	f012 0203 	ands.w	r2, r2, #3
    4866:	d10b      	bne.n	4880 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4868:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    486a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    486c:	42aa      	cmp	r2, r5
    486e:	d101      	bne.n	4874 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4870:	331c      	adds	r3, #28
    4872:	e7ee      	b.n	4852 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4874:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4876:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    4878:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    487a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    487c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    487e:	e7f5      	b.n	486c <init_mem_slab_module+0x20>
		return -EINVAL;
    4880:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4884:	e7e8      	b.n	4858 <init_mem_slab_module+0xc>
    4886:	bf00      	nop
    4888:	20000150 	.word	0x20000150
    488c:	20000150 	.word	0x20000150

00004890 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4890:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    4892:	460c      	mov	r4, r1
    4894:	4616      	mov	r6, r2
    4896:	461f      	mov	r7, r3
	__asm__ volatile(
    4898:	f04f 0320 	mov.w	r3, #32
    489c:	f3ef 8111 	mrs	r1, BASEPRI
    48a0:	f383 8811 	msr	BASEPRI, r3
    48a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    48a8:	6943      	ldr	r3, [r0, #20]
    48aa:	b15b      	cbz	r3, 48c4 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    48ac:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    48ae:	681b      	ldr	r3, [r3, #0]
    48b0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    48b2:	6983      	ldr	r3, [r0, #24]
    48b4:	3301      	adds	r3, #1
    48b6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    48b8:	2000      	movs	r0, #0
	__asm__ volatile(
    48ba:	f381 8811 	msr	BASEPRI, r1
    48be:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    48c2:	e011      	b.n	48e8 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    48c4:	ea56 0207 	orrs.w	r2, r6, r7
    48c8:	d103      	bne.n	48d2 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    48ca:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    48ce:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    48d0:	e7f3      	b.n	48ba <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    48d2:	4602      	mov	r2, r0
    48d4:	e9cd 6700 	strd	r6, r7, [sp]
    48d8:	4804      	ldr	r0, [pc, #16]	; (48ec <k_mem_slab_alloc+0x5c>)
    48da:	f000 fa5f 	bl	4d9c <z_pend_curr>
		if (result == 0) {
    48de:	b918      	cbnz	r0, 48e8 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    48e0:	4b03      	ldr	r3, [pc, #12]	; (48f0 <k_mem_slab_alloc+0x60>)
    48e2:	689b      	ldr	r3, [r3, #8]
    48e4:	695b      	ldr	r3, [r3, #20]
    48e6:	6023      	str	r3, [r4, #0]
}
    48e8:	b002      	add	sp, #8
    48ea:	bdd0      	pop	{r4, r6, r7, pc}
    48ec:	20002eab 	.word	0x20002eab
    48f0:	2000113c 	.word	0x2000113c

000048f4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    48f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48f6:	4604      	mov	r4, r0
    48f8:	460d      	mov	r5, r1
	__asm__ volatile(
    48fa:	f04f 0320 	mov.w	r3, #32
    48fe:	f3ef 8611 	mrs	r6, BASEPRI
    4902:	f383 8811 	msr	BASEPRI, r3
    4906:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    490a:	6947      	ldr	r7, [r0, #20]
    490c:	b96f      	cbnz	r7, 492a <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    490e:	f003 fc13 	bl	8138 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4912:	b150      	cbz	r0, 492a <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4914:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4916:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4918:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    491a:	f003 fbb2 	bl	8082 <z_ready_thread>
			z_reschedule(&lock, key);
    491e:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    4920:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    4924:	4807      	ldr	r0, [pc, #28]	; (4944 <k_mem_slab_free+0x50>)
    4926:	f000 b8cb 	b.w	4ac0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    492a:	682b      	ldr	r3, [r5, #0]
    492c:	6962      	ldr	r2, [r4, #20]
    492e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4930:	682b      	ldr	r3, [r5, #0]
    4932:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    4934:	69a3      	ldr	r3, [r4, #24]
    4936:	3b01      	subs	r3, #1
    4938:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    493a:	f386 8811 	msr	BASEPRI, r6
    493e:	f3bf 8f6f 	isb	sy
}
    4942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4944:	20002eab 	.word	0x20002eab

00004948 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4948:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    494c:	4604      	mov	r4, r0
    494e:	4616      	mov	r6, r2
    4950:	461f      	mov	r7, r3
	__asm__ volatile(
    4952:	f04f 0320 	mov.w	r3, #32
    4956:	f3ef 8811 	mrs	r8, BASEPRI
    495a:	f383 8811 	msr	BASEPRI, r3
    495e:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4962:	68c3      	ldr	r3, [r0, #12]
    4964:	4a32      	ldr	r2, [pc, #200]	; (4a30 <z_impl_k_mutex_lock+0xe8>)
    4966:	b16b      	cbz	r3, 4984 <z_impl_k_mutex_lock+0x3c>
    4968:	6880      	ldr	r0, [r0, #8]
    496a:	6891      	ldr	r1, [r2, #8]
    496c:	4288      	cmp	r0, r1
    496e:	d019      	beq.n	49a4 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4970:	ea56 0307 	orrs.w	r3, r6, r7
    4974:	d118      	bne.n	49a8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4976:	f388 8811 	msr	BASEPRI, r8
    497a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    497e:	f06f 000f 	mvn.w	r0, #15
    4982:	e00c      	b.n	499e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    4984:	6891      	ldr	r1, [r2, #8]
    4986:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    498a:	3301      	adds	r3, #1
    498c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    498e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4990:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    4992:	60a3      	str	r3, [r4, #8]
    4994:	f388 8811 	msr	BASEPRI, r8
    4998:	f3bf 8f6f 	isb	sy
		return 0;
    499c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    499e:	b002      	add	sp, #8
    49a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    49a4:	6921      	ldr	r1, [r4, #16]
    49a6:	e7f0      	b.n	498a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    49a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    49ac:	f991 100e 	ldrsb.w	r1, [r1, #14]
    49b0:	4299      	cmp	r1, r3
    49b2:	bfa8      	it	ge
    49b4:	4619      	movge	r1, r3
    49b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    49ba:	428b      	cmp	r3, r1
    49bc:	dd2c      	ble.n	4a18 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    49be:	f000 f9fd 	bl	4dbc <z_set_prio>
    49c2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    49c4:	4622      	mov	r2, r4
    49c6:	4641      	mov	r1, r8
    49c8:	e9cd 6700 	strd	r6, r7, [sp]
    49cc:	4819      	ldr	r0, [pc, #100]	; (4a34 <z_impl_k_mutex_lock+0xec>)
    49ce:	f000 f9e5 	bl	4d9c <z_pend_curr>
	if (got_mutex == 0) {
    49d2:	2800      	cmp	r0, #0
    49d4:	d0e3      	beq.n	499e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    49d6:	f04f 0320 	mov.w	r3, #32
    49da:	f3ef 8611 	mrs	r6, BASEPRI
    49de:	f383 8811 	msr	BASEPRI, r3
    49e2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    49e6:	6823      	ldr	r3, [r4, #0]
    49e8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49ea:	42a3      	cmp	r3, r4
    49ec:	d007      	beq.n	49fe <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    49ee:	b133      	cbz	r3, 49fe <z_impl_k_mutex_lock+0xb6>
    49f0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    49f4:	4299      	cmp	r1, r3
    49f6:	bfa8      	it	ge
    49f8:	4619      	movge	r1, r3
    49fa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    49fe:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4a00:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4a04:	4299      	cmp	r1, r3
    4a06:	d109      	bne.n	4a1c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    4a08:	b16d      	cbz	r5, 4a26 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    4a0a:	4631      	mov	r1, r6
    4a0c:	4809      	ldr	r0, [pc, #36]	; (4a34 <z_impl_k_mutex_lock+0xec>)
    4a0e:	f000 f857 	bl	4ac0 <z_reschedule>
	return -EAGAIN;
    4a12:	f06f 000a 	mvn.w	r0, #10
    4a16:	e7c2      	b.n	499e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    4a18:	2500      	movs	r5, #0
    4a1a:	e7d3      	b.n	49c4 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    4a1c:	f000 f9ce 	bl	4dbc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4a20:	2800      	cmp	r0, #0
    4a22:	d1f2      	bne.n	4a0a <z_impl_k_mutex_lock+0xc2>
    4a24:	e7f0      	b.n	4a08 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    4a26:	f386 8811 	msr	BASEPRI, r6
    4a2a:	f3bf 8f6f 	isb	sy
    4a2e:	e7f0      	b.n	4a12 <z_impl_k_mutex_lock+0xca>
    4a30:	2000113c 	.word	0x2000113c
    4a34:	20002eab 	.word	0x20002eab

00004a38 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4a38:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    4a3a:	6883      	ldr	r3, [r0, #8]
{
    4a3c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d033      	beq.n	4aaa <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4a42:	4a1d      	ldr	r2, [pc, #116]	; (4ab8 <z_impl_k_mutex_unlock+0x80>)
    4a44:	6892      	ldr	r2, [r2, #8]
    4a46:	4293      	cmp	r3, r2
    4a48:	d132      	bne.n	4ab0 <z_impl_k_mutex_unlock+0x78>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    4a4a:	68c3      	ldr	r3, [r0, #12]
    4a4c:	2b01      	cmp	r3, #1
    4a4e:	d005      	beq.n	4a5c <z_impl_k_mutex_unlock+0x24>
		mutex->lock_count--;
    4a50:	3b01      	subs	r3, #1
    4a52:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    4a54:	f003 fafe 	bl	8054 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    4a58:	2000      	movs	r0, #0
}
    4a5a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4a5c:	f04f 0320 	mov.w	r3, #32
    4a60:	f3ef 8511 	mrs	r5, BASEPRI
    4a64:	f383 8811 	msr	BASEPRI, r3
    4a68:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4a6c:	6901      	ldr	r1, [r0, #16]
    4a6e:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    4a70:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4a74:	4299      	cmp	r1, r3
    4a76:	d001      	beq.n	4a7c <z_impl_k_mutex_unlock+0x44>
		return z_set_prio(mutex->owner, new_prio);
    4a78:	f000 f9a0 	bl	4dbc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4a7c:	4620      	mov	r0, r4
    4a7e:	f003 fb5b 	bl	8138 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4a82:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4a84:	b158      	cbz	r0, 4a9e <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
    4a86:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4a8a:	6122      	str	r2, [r4, #16]
    4a8c:	2200      	movs	r2, #0
    4a8e:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    4a90:	f003 faf7 	bl	8082 <z_ready_thread>
		z_reschedule(&lock, key);
    4a94:	4629      	mov	r1, r5
    4a96:	4809      	ldr	r0, [pc, #36]	; (4abc <z_impl_k_mutex_unlock+0x84>)
    4a98:	f000 f812 	bl	4ac0 <z_reschedule>
    4a9c:	e7da      	b.n	4a54 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    4a9e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4aa0:	f385 8811 	msr	BASEPRI, r5
    4aa4:	f3bf 8f6f 	isb	sy
    4aa8:	e7d4      	b.n	4a54 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    4aaa:	f06f 0015 	mvn.w	r0, #21
    4aae:	e7d4      	b.n	4a5a <z_impl_k_mutex_unlock+0x22>
		return -EPERM;
    4ab0:	f04f 30ff 	mov.w	r0, #4294967295
    4ab4:	e7d1      	b.n	4a5a <z_impl_k_mutex_unlock+0x22>
    4ab6:	bf00      	nop
    4ab8:	2000113c 	.word	0x2000113c
    4abc:	20002eab 	.word	0x20002eab

00004ac0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4ac0:	b949      	cbnz	r1, 4ad6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4ac2:	f3ef 8005 	mrs	r0, IPSR
    4ac6:	b930      	cbnz	r0, 4ad6 <z_reschedule+0x16>
#ifdef CONFIG_SMP
extern struct k_thread *z_get_next_ready_thread(void);
#else
static ALWAYS_INLINE struct k_thread *z_get_next_ready_thread(void)
{
	return _kernel.ready_q.cache;
    4ac8:	4b05      	ldr	r3, [pc, #20]	; (4ae0 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    4aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4acc:	689b      	ldr	r3, [r3, #8]
    4ace:	429a      	cmp	r2, r3
    4ad0:	d001      	beq.n	4ad6 <z_reschedule+0x16>

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    4ad2:	f7fd bb5f 	b.w	2194 <arch_swap>
    4ad6:	f381 8811 	msr	BASEPRI, r1
    4ada:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4ade:	4770      	bx	lr
    4ae0:	2000113c 	.word	0x2000113c

00004ae4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4ae4:	4b09      	ldr	r3, [pc, #36]	; (4b0c <z_priq_dumb_remove+0x28>)
    4ae6:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4aea:	4282      	cmp	r2, r0
    4aec:	d105      	bne.n	4afa <z_priq_dumb_remove+0x16>
    4aee:	689b      	ldr	r3, [r3, #8]
    4af0:	428b      	cmp	r3, r1
    4af2:	d102      	bne.n	4afa <z_priq_dumb_remove+0x16>
    4af4:	7b4b      	ldrb	r3, [r1, #13]
    4af6:	06db      	lsls	r3, r3, #27
    4af8:	d106      	bne.n	4b08 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4afa:	e9d1 3200 	ldrd	r3, r2, [r1]
    4afe:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4b00:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4b02:	2300      	movs	r3, #0
	node->prev = NULL;
    4b04:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4b08:	4770      	bx	lr
    4b0a:	bf00      	nop
    4b0c:	2000113c 	.word	0x2000113c

00004b10 <update_cache>:
	if (_current_cpu->pending_abort != NULL) {
    4b10:	4a0f      	ldr	r2, [pc, #60]	; (4b50 <update_cache+0x40>)
{
    4b12:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    4b14:	6913      	ldr	r3, [r2, #16]
{
    4b16:	b510      	push	{r4, lr}
	if (_current_cpu->pending_abort != NULL) {
    4b18:	b10b      	cbz	r3, 4b1e <update_cache+0xe>
	return thread ? thread : _current_cpu->idle_thread;
    4b1a:	68d0      	ldr	r0, [r2, #12]
    4b1c:	e00d      	b.n	4b3a <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4b1e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    4b22:	f003 faa4 	bl	806e <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4b26:	6894      	ldr	r4, [r2, #8]
    4b28:	7b63      	ldrb	r3, [r4, #13]
    4b2a:	f013 0f20 	tst.w	r3, #32
		_current->base.thread_state |= _THREAD_DEAD;
    4b2e:	bf1c      	itt	ne
    4b30:	f043 0308 	orrne.w	r3, r3, #8
    4b34:	7363      	strbne	r3, [r4, #13]
	return thread ? thread : _current_cpu->idle_thread;
    4b36:	2800      	cmp	r0, #0
    4b38:	d0ef      	beq.n	4b1a <update_cache+0xa>
	if (preempt_ok != 0) {
    4b3a:	b939      	cbnz	r1, 4b4c <update_cache+0x3c>
	if (z_is_thread_prevented_from_running(_current)) {
    4b3c:	6893      	ldr	r3, [r2, #8]
    4b3e:	7b59      	ldrb	r1, [r3, #13]
    4b40:	06c9      	lsls	r1, r1, #27
    4b42:	d103      	bne.n	4b4c <update_cache+0x3c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4b44:	6981      	ldr	r1, [r0, #24]
    4b46:	2900      	cmp	r1, #0
    4b48:	bf08      	it	eq
    4b4a:	4618      	moveq	r0, r3
    4b4c:	6250      	str	r0, [r2, #36]	; 0x24
}
    4b4e:	bd10      	pop	{r4, pc}
    4b50:	2000113c 	.word	0x2000113c

00004b54 <ready_thread>:
{
    4b54:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4b56:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
}

static inline bool z_is_thread_queued(struct k_thread *thread)
{
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4b5a:	7b43      	ldrb	r3, [r0, #13]
    4b5c:	2a00      	cmp	r2, #0
    4b5e:	db2c      	blt.n	4bba <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4b60:	06db      	lsls	r3, r3, #27
    4b62:	d12a      	bne.n	4bba <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    4b64:	6983      	ldr	r3, [r0, #24]
    4b66:	bb43      	cbnz	r3, 4bba <ready_thread+0x66>
	return list->head == list;
    4b68:	4a15      	ldr	r2, [pc, #84]	; (4bc0 <ready_thread+0x6c>)
    4b6a:	4611      	mov	r1, r2
    4b6c:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b70:	428c      	cmp	r4, r1
    4b72:	bf18      	it	ne
    4b74:	4623      	movne	r3, r4
    4b76:	2b00      	cmp	r3, #0
    4b78:	bf38      	it	cc
    4b7a:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4b7c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b7e:	b1b3      	cbz	r3, 4bae <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    4b80:	f990 600e 	ldrsb.w	r6, [r0, #14]
    4b84:	f993 500e 	ldrsb.w	r5, [r3, #14]
    4b88:	42ae      	cmp	r6, r5
    4b8a:	db03      	blt.n	4b94 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    4b8c:	42a3      	cmp	r3, r4
    4b8e:	d00e      	beq.n	4bae <ready_thread+0x5a>
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	e7f4      	b.n	4b7e <ready_thread+0x2a>
	node->prev = successor->prev;
    4b94:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4b96:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    4b9a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4b9c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
}

static inline void z_set_thread_states(struct k_thread *thread, uint32_t states)
{
	thread->base.thread_state |= states;
    4b9e:	7b43      	ldrb	r3, [r0, #13]
    4ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ba4:	7343      	strb	r3, [r0, #13]
}
    4ba6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4ba8:	2000      	movs	r0, #0
    4baa:	f7ff bfb1 	b.w	4b10 <update_cache>
	node->prev = list->tail;
    4bae:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    4bb2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4bb4:	6018      	str	r0, [r3, #0]
	list->tail = node;
    4bb6:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    4bb8:	e7f1      	b.n	4b9e <ready_thread+0x4a>
}
    4bba:	bc70      	pop	{r4, r5, r6}
    4bbc:	4770      	bx	lr
    4bbe:	bf00      	nop
    4bc0:	2000113c 	.word	0x2000113c

00004bc4 <z_impl_k_thread_suspend>:
{
    4bc4:	b570      	push	{r4, r5, r6, lr}
    4bc6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4bc8:	3018      	adds	r0, #24
    4bca:	f003 fae6 	bl	819a <z_abort_timeout>
	__asm__ volatile(
    4bce:	f04f 0320 	mov.w	r3, #32
    4bd2:	f3ef 8611 	mrs	r6, BASEPRI
    4bd6:	f383 8811 	msr	BASEPRI, r3
    4bda:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4bde:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4be2:	2b00      	cmp	r3, #0
    4be4:	da07      	bge.n	4bf6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4be6:	4621      	mov	r1, r4
    4be8:	480e      	ldr	r0, [pc, #56]	; (4c24 <z_impl_k_thread_suspend+0x60>)
    4bea:	f7ff ff7b 	bl	4ae4 <z_priq_dumb_remove>
}

static inline void z_reset_thread_states(struct k_thread *thread,
					uint32_t states)
{
	thread->base.thread_state &= ~states;
    4bee:	7b63      	ldrb	r3, [r4, #13]
    4bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4bf4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4bf6:	4d0c      	ldr	r5, [pc, #48]	; (4c28 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4bf8:	7b63      	ldrb	r3, [r4, #13]
    4bfa:	68a8      	ldr	r0, [r5, #8]
    4bfc:	f043 0310 	orr.w	r3, r3, #16
    4c00:	7363      	strb	r3, [r4, #13]
    4c02:	1b03      	subs	r3, r0, r4
    4c04:	4258      	negs	r0, r3
    4c06:	4158      	adcs	r0, r3
    4c08:	f7ff ff82 	bl	4b10 <update_cache>
	__asm__ volatile(
    4c0c:	f386 8811 	msr	BASEPRI, r6
    4c10:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4c14:	68ab      	ldr	r3, [r5, #8]
    4c16:	42a3      	cmp	r3, r4
    4c18:	d103      	bne.n	4c22 <z_impl_k_thread_suspend+0x5e>
}
    4c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4c1e:	f003 ba0f 	b.w	8040 <z_reschedule_unlocked>
}
    4c22:	bd70      	pop	{r4, r5, r6, pc}
    4c24:	20001164 	.word	0x20001164
    4c28:	2000113c 	.word	0x2000113c

00004c2c <z_thread_single_abort>:
{
    4c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c30:	4604      	mov	r4, r0
	__asm__ volatile(
    4c32:	f04f 0320 	mov.w	r3, #32
    4c36:	f3ef 8211 	mrs	r2, BASEPRI
    4c3a:	f383 8811 	msr	BASEPRI, r3
    4c3e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    4c42:	7b43      	ldrb	r3, [r0, #13]
    4c44:	f013 0f28 	tst.w	r3, #40	; 0x28
    4c48:	d005      	beq.n	4c56 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    4c4a:	f382 8811 	msr	BASEPRI, r2
    4c4e:	f3bf 8f6f 	isb	sy
}
    4c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    4c56:	f043 0320 	orr.w	r3, r3, #32
    4c5a:	7343      	strb	r3, [r0, #13]
    4c5c:	f382 8811 	msr	BASEPRI, r2
    4c60:	f3bf 8f6f 	isb	sy
    4c64:	3018      	adds	r0, #24
    4c66:	f003 fa98 	bl	819a <z_abort_timeout>
	__asm__ volatile(
    4c6a:	f04f 0320 	mov.w	r3, #32
    4c6e:	f3ef 8611 	mrs	r6, BASEPRI
    4c72:	f383 8811 	msr	BASEPRI, r3
    4c76:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4c7a:	7b63      	ldrb	r3, [r4, #13]
    4c7c:	06d8      	lsls	r0, r3, #27
    4c7e:	d116      	bne.n	4cae <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    4c80:	69a2      	ldr	r2, [r4, #24]
    4c82:	b9a2      	cbnz	r2, 4cae <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    4c84:	0619      	lsls	r1, r3, #24
    4c86:	d507      	bpl.n	4c98 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    4c88:	4621      	mov	r1, r4
    4c8a:	4822      	ldr	r0, [pc, #136]	; (4d14 <z_thread_single_abort+0xe8>)
    4c8c:	f7ff ff2a 	bl	4ae4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4c90:	7b63      	ldrb	r3, [r4, #13]
    4c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c96:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    4c98:	4b1f      	ldr	r3, [pc, #124]	; (4d18 <z_thread_single_abort+0xec>)
    4c9a:	6898      	ldr	r0, [r3, #8]
    4c9c:	1b02      	subs	r2, r0, r4
    4c9e:	4250      	negs	r0, r2
    4ca0:	4150      	adcs	r0, r2
    4ca2:	f7ff ff35 	bl	4b10 <update_cache>
			waiter->base.pended_on = NULL;
    4ca6:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4ca8:	f104 0830 	add.w	r8, r4, #48	; 0x30
    4cac:	e01d      	b.n	4cea <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    4cae:	079b      	lsls	r3, r3, #30
    4cb0:	d5f9      	bpl.n	4ca6 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4cb2:	4621      	mov	r1, r4
    4cb4:	68a0      	ldr	r0, [r4, #8]
    4cb6:	f7ff ff15 	bl	4ae4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4cba:	7b63      	ldrb	r3, [r4, #13]
    4cbc:	f023 0302 	bic.w	r3, r3, #2
    4cc0:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    4cc2:	2300      	movs	r3, #0
    4cc4:	60a3      	str	r3, [r4, #8]
    4cc6:	e7ee      	b.n	4ca6 <z_thread_single_abort+0x7a>
    4cc8:	f105 0018 	add.w	r0, r5, #24
    4ccc:	f003 fa65 	bl	819a <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    4cd0:	68a8      	ldr	r0, [r5, #8]
    4cd2:	4629      	mov	r1, r5
    4cd4:	f7ff ff06 	bl	4ae4 <z_priq_dumb_remove>
    4cd8:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    4cda:	4628      	mov	r0, r5
    4cdc:	f023 0302 	bic.w	r3, r3, #2
    4ce0:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    4ce2:	60af      	str	r7, [r5, #8]
    4ce4:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    4ce6:	f7ff ff35 	bl	4b54 <ready_thread>
	return list->head == list;
    4cea:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4cec:	4545      	cmp	r5, r8
    4cee:	d001      	beq.n	4cf4 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    4cf0:	2d00      	cmp	r5, #0
    4cf2:	d1e9      	bne.n	4cc8 <z_thread_single_abort+0x9c>
		thread->base.thread_state |= _THREAD_DEAD;
    4cf4:	7b63      	ldrb	r3, [r4, #13]
    4cf6:	f043 0308 	orr.w	r3, r3, #8
    4cfa:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    4cfc:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    4cfe:	f386 8811 	msr	BASEPRI, r6
    4d02:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    4d06:	2b00      	cmp	r3, #0
    4d08:	d0a3      	beq.n	4c52 <z_thread_single_abort+0x26>
		fn_abort(thread);
    4d0a:	4620      	mov	r0, r4
}
    4d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    4d10:	4718      	bx	r3
    4d12:	bf00      	nop
    4d14:	20001164 	.word	0x20001164
    4d18:	2000113c 	.word	0x2000113c

00004d1c <unready_thread>:
{
    4d1c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4d1e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    4d22:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4d24:	2b00      	cmp	r3, #0
    4d26:	da06      	bge.n	4d36 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4d28:	4807      	ldr	r0, [pc, #28]	; (4d48 <unready_thread+0x2c>)
    4d2a:	f7ff fedb 	bl	4ae4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4d2e:	7b4b      	ldrb	r3, [r1, #13]
    4d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d34:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    4d36:	4b05      	ldr	r3, [pc, #20]	; (4d4c <unready_thread+0x30>)
    4d38:	6898      	ldr	r0, [r3, #8]
    4d3a:	1a43      	subs	r3, r0, r1
    4d3c:	4258      	negs	r0, r3
    4d3e:	4158      	adcs	r0, r3
}
    4d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4d44:	f7ff bee4 	b.w	4b10 <update_cache>
    4d48:	20001164 	.word	0x20001164
    4d4c:	2000113c 	.word	0x2000113c

00004d50 <pend>:
{
    4d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d54:	4606      	mov	r6, r0
    4d56:	4614      	mov	r4, r2
    4d58:	461d      	mov	r5, r3
	__asm__ volatile(
    4d5a:	f04f 0320 	mov.w	r3, #32
    4d5e:	f3ef 8711 	mrs	r7, BASEPRI
    4d62:	f383 8811 	msr	BASEPRI, r3
    4d66:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4d6a:	f003 f9ba 	bl	80e2 <add_to_waitq_locked>
	__asm__ volatile(
    4d6e:	f387 8811 	msr	BASEPRI, r7
    4d72:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4d76:	1c6b      	adds	r3, r5, #1
    4d78:	bf08      	it	eq
    4d7a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    4d7e:	d008      	beq.n	4d92 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4d80:	4622      	mov	r2, r4
    4d82:	462b      	mov	r3, r5
    4d84:	f106 0018 	add.w	r0, r6, #24
    4d88:	4903      	ldr	r1, [pc, #12]	; (4d98 <pend+0x48>)
}
    4d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d8e:	f000 b8f3 	b.w	4f78 <z_add_timeout>
    4d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d96:	bf00      	nop
    4d98:	000080a3 	.word	0x000080a3

00004d9c <z_pend_curr>:
{
    4d9c:	b510      	push	{r4, lr}
    4d9e:	460c      	mov	r4, r1
	pend(_current, wait_q, timeout);
    4da0:	4805      	ldr	r0, [pc, #20]	; (4db8 <z_pend_curr+0x1c>)
{
    4da2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4da8:	6880      	ldr	r0, [r0, #8]
    4daa:	f7ff ffd1 	bl	4d50 <pend>
    4dae:	4620      	mov	r0, r4
}
    4db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4db4:	f7fd b9ee 	b.w	2194 <arch_swap>
    4db8:	2000113c 	.word	0x2000113c

00004dbc <z_set_prio>:
{
    4dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dc0:	4604      	mov	r4, r0
	__asm__ volatile(
    4dc2:	f04f 0320 	mov.w	r3, #32
    4dc6:	f3ef 8811 	mrs	r8, BASEPRI
    4dca:	f383 8811 	msr	BASEPRI, r3
    4dce:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4dd2:	7b43      	ldrb	r3, [r0, #13]
    4dd4:	b24e      	sxtb	r6, r1
    4dd6:	06db      	lsls	r3, r3, #27
    4dd8:	d12e      	bne.n	4e38 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    4dda:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    4ddc:	bb65      	cbnz	r5, 4e38 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    4dde:	4f18      	ldr	r7, [pc, #96]	; (4e40 <z_set_prio+0x84>)
    4de0:	4621      	mov	r1, r4
    4de2:	f107 0028 	add.w	r0, r7, #40	; 0x28
    4de6:	f7ff fe7d 	bl	4ae4 <z_priq_dumb_remove>
	return list->head == list;
    4dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4dee:	4283      	cmp	r3, r0
    4df0:	bf18      	it	ne
    4df2:	461d      	movne	r5, r3
    4df4:	2d00      	cmp	r5, #0
    4df6:	bf38      	it	cc
    4df8:	2500      	movcc	r5, #0
				thread->base.prio = prio;
    4dfa:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4dfc:	b1b5      	cbz	r5, 4e2c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    4dfe:	f995 100e 	ldrsb.w	r1, [r5, #14]
    4e02:	42b1      	cmp	r1, r6
    4e04:	dc03      	bgt.n	4e0e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    4e06:	42aa      	cmp	r2, r5
    4e08:	d010      	beq.n	4e2c <z_set_prio+0x70>
    4e0a:	682d      	ldr	r5, [r5, #0]
    4e0c:	e7f6      	b.n	4dfc <z_set_prio+0x40>
	node->prev = successor->prev;
    4e0e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    4e10:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    4e14:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4e16:	606c      	str	r4, [r5, #4]
			update_cache(1);
    4e18:	2001      	movs	r0, #1
    4e1a:	f7ff fe79 	bl	4b10 <update_cache>
    4e1e:	2001      	movs	r0, #1
	__asm__ volatile(
    4e20:	f388 8811 	msr	BASEPRI, r8
    4e24:	f3bf 8f6f 	isb	sy
}
    4e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    4e2c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    4e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4e32:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4e34:	62fc      	str	r4, [r7, #44]	; 0x2c
}
    4e36:	e7ef      	b.n	4e18 <z_set_prio+0x5c>
			thread->base.prio = prio;
    4e38:	2000      	movs	r0, #0
    4e3a:	73a6      	strb	r6, [r4, #14]
    4e3c:	e7f0      	b.n	4e20 <z_set_prio+0x64>
    4e3e:	bf00      	nop
    4e40:	2000113c 	.word	0x2000113c

00004e44 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4e44:	3101      	adds	r1, #1
    4e46:	bf08      	it	eq
    4e48:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    4e4c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4e4e:	d106      	bne.n	4e5e <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
    4e50:	4b04      	ldr	r3, [pc, #16]	; (4e64 <z_impl_k_sleep+0x20>)
    4e52:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4e54:	f7ff feb6 	bl	4bc4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4e58:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    4e5c:	bd08      	pop	{r3, pc}
	return k_ticks_to_ms_floor64(ticks);
    4e5e:	2000      	movs	r0, #0
    4e60:	e7fc      	b.n	4e5c <z_impl_k_sleep+0x18>
    4e62:	bf00      	nop
    4e64:	2000113c 	.word	0x2000113c

00004e68 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4e68:	4b01      	ldr	r3, [pc, #4]	; (4e70 <z_impl_k_current_get+0x8>)
    4e6a:	6898      	ldr	r0, [r3, #8]
    4e6c:	4770      	bx	lr
    4e6e:	bf00      	nop
    4e70:	2000113c 	.word	0x2000113c

00004e74 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    4e74:	b508      	push	{r3, lr}
	__asm__ volatile(
    4e76:	f04f 0320 	mov.w	r3, #32
    4e7a:	f3ef 8411 	mrs	r4, BASEPRI
    4e7e:	f383 8811 	msr	BASEPRI, r3
    4e82:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    4e86:	4b04      	ldr	r3, [pc, #16]	; (4e98 <z_self_abort+0x24>)
    4e88:	6898      	ldr	r0, [r3, #8]
    4e8a:	6118      	str	r0, [r3, #16]
    4e8c:	f7ff fe9a 	bl	4bc4 <z_impl_k_thread_suspend>
    4e90:	4620      	mov	r0, r4
    4e92:	f7fd f97f 	bl	2194 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4e96:	bf00      	nop
    4e98:	2000113c 	.word	0x2000113c

00004e9c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4e9c:	4a02      	ldr	r2, [pc, #8]	; (4ea8 <boot_banner+0xc>)
    4e9e:	4903      	ldr	r1, [pc, #12]	; (4eac <boot_banner+0x10>)
    4ea0:	4803      	ldr	r0, [pc, #12]	; (4eb0 <boot_banner+0x14>)
    4ea2:	f000 bd7c 	b.w	599e <printk>
    4ea6:	bf00      	nop
    4ea8:	0000957e 	.word	0x0000957e
    4eac:	000095e9 	.word	0x000095e9
    4eb0:	000095f8 	.word	0x000095f8

00004eb4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4eb4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    4eb6:	4806      	ldr	r0, [pc, #24]	; (4ed0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4eb8:	4a06      	ldr	r2, [pc, #24]	; (4ed4 <z_data_copy+0x20>)
    4eba:	4907      	ldr	r1, [pc, #28]	; (4ed8 <z_data_copy+0x24>)
    4ebc:	1a12      	subs	r2, r2, r0
    4ebe:	f001 f8e6 	bl	608e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    4ec6:	4a05      	ldr	r2, [pc, #20]	; (4edc <z_data_copy+0x28>)
    4ec8:	4905      	ldr	r1, [pc, #20]	; (4ee0 <z_data_copy+0x2c>)
    4eca:	4806      	ldr	r0, [pc, #24]	; (4ee4 <z_data_copy+0x30>)
    4ecc:	f001 b8df 	b.w	608e <memcpy>
    4ed0:	20000000 	.word	0x20000000
    4ed4:	200001a0 	.word	0x200001a0
    4ed8:	00009620 	.word	0x00009620
    4edc:	00000000 	.word	0x00000000
    4ee0:	00009620 	.word	0x00009620
    4ee4:	20000000 	.word	0x20000000

00004ee8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    4ee8:	4b03      	ldr	r3, [pc, #12]	; (4ef8 <elapsed+0x10>)
    4eea:	681b      	ldr	r3, [r3, #0]
    4eec:	b90b      	cbnz	r3, 4ef2 <elapsed+0xa>
    4eee:	f7fd b85b 	b.w	1fa8 <z_clock_elapsed>
}
    4ef2:	2000      	movs	r0, #0
    4ef4:	4770      	bx	lr
    4ef6:	bf00      	nop
    4ef8:	2000116c 	.word	0x2000116c

00004efc <remove_timeout>:
{
    4efc:	b530      	push	{r4, r5, lr}
    4efe:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4f00:	b168      	cbz	r0, 4f1e <remove_timeout+0x22>
    4f02:	4a0a      	ldr	r2, [pc, #40]	; (4f2c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    4f04:	6852      	ldr	r2, [r2, #4]
    4f06:	4290      	cmp	r0, r2
    4f08:	d009      	beq.n	4f1e <remove_timeout+0x22>
	if (next(t) != NULL) {
    4f0a:	b143      	cbz	r3, 4f1e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4f0c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4f10:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4f14:	1912      	adds	r2, r2, r4
    4f16:	eb45 0101 	adc.w	r1, r5, r1
    4f1a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    4f1e:	6842      	ldr	r2, [r0, #4]
    4f20:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4f22:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4f24:	2300      	movs	r3, #0
	node->prev = NULL;
    4f26:	e9c0 3300 	strd	r3, r3, [r0]
}
    4f2a:	bd30      	pop	{r4, r5, pc}
    4f2c:	20000074 	.word	0x20000074

00004f30 <next_timeout>:

static int32_t next_timeout(void)
{
    4f30:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    4f32:	4b10      	ldr	r3, [pc, #64]	; (4f74 <next_timeout+0x44>)
    4f34:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f36:	429c      	cmp	r4, r3
    4f38:	bf08      	it	eq
    4f3a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4f3c:	f7ff ffd4 	bl	4ee8 <elapsed>
    4f40:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    4f42:	b18c      	cbz	r4, 4f68 <next_timeout+0x38>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4f44:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4f48:	1b40      	subs	r0, r0, r5
    4f4a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4f4e:	2801      	cmp	r0, #1
    4f50:	f171 0300 	sbcs.w	r3, r1, #0
    4f54:	db0b      	blt.n	4f6e <next_timeout+0x3e>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4f56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4f5a:	2300      	movs	r3, #0
    4f5c:	4282      	cmp	r2, r0
    4f5e:	eb73 0401 	sbcs.w	r4, r3, r1
    4f62:	da00      	bge.n	4f66 <next_timeout+0x36>
    4f64:	4610      	mov	r0, r2
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4f66:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4f68:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4f6c:	e7fb      	b.n	4f66 <next_timeout+0x36>
    4f6e:	2000      	movs	r0, #0
	return ret;
    4f70:	e7f9      	b.n	4f66 <next_timeout+0x36>
    4f72:	bf00      	nop
    4f74:	20000074 	.word	0x20000074

00004f78 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    4f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f7c:	9101      	str	r1, [sp, #4]
    4f7e:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f80:	1c4b      	adds	r3, r1, #1
    4f82:	bf08      	it	eq
    4f84:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    4f88:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f8a:	d06b      	beq.n	5064 <z_add_timeout+0xec>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    4f8c:	f06f 0301 	mvn.w	r3, #1
    4f90:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    4f94:	1c54      	adds	r4, r2, #1
    4f96:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    4f9a:	ebb3 0804 	subs.w	r8, r3, r4
    4f9e:	eb6b 0905 	sbc.w	r9, fp, r5
    4fa2:	f1b8 0f00 	cmp.w	r8, #0
    4fa6:	f179 0300 	sbcs.w	r3, r9, #0
    4faa:	db0f      	blt.n	4fcc <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    4fac:	f7ff ff9c 	bl	4ee8 <elapsed>
    4fb0:	f06f 0301 	mvn.w	r3, #1
    4fb4:	4a32      	ldr	r2, [pc, #200]	; (5080 <z_add_timeout+0x108>)
    4fb6:	e9d2 1c00 	ldrd	r1, ip, [r2]
    4fba:	1a5b      	subs	r3, r3, r1
    4fbc:	eb6b 020c 	sbc.w	r2, fp, ip
    4fc0:	1b1e      	subs	r6, r3, r4
    4fc2:	eb62 0705 	sbc.w	r7, r2, r5
    4fc6:	1a34      	subs	r4, r6, r0
    4fc8:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4fcc:	9b01      	ldr	r3, [sp, #4]
    4fce:	f8ca 3008 	str.w	r3, [sl, #8]
    4fd2:	f04f 0320 	mov.w	r3, #32
    4fd6:	f3ef 8611 	mrs	r6, BASEPRI
    4fda:	f383 8811 	msr	BASEPRI, r3
    4fde:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    4fe2:	f7ff ff81 	bl	4ee8 <elapsed>
	ticks = MAX(1, ticks);
    4fe6:	2c01      	cmp	r4, #1
    4fe8:	f175 0300 	sbcs.w	r3, r5, #0
    4fec:	bfbc      	itt	lt
    4fee:	2401      	movlt	r4, #1
    4ff0:	2500      	movlt	r5, #0
	return list->head == list;
    4ff2:	4b24      	ldr	r3, [pc, #144]	; (5084 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
    4ff4:	1824      	adds	r4, r4, r0
    4ff6:	681a      	ldr	r2, [r3, #0]
    4ff8:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ffc:	429a      	cmp	r2, r3
    4ffe:	e9ca 4504 	strd	r4, r5, [sl, #16]
    5002:	d001      	beq.n	5008 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5004:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    5006:	b952      	cbnz	r2, 501e <z_add_timeout+0xa6>
	node->prev = list->tail;
    5008:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    500a:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    500e:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    5012:	685a      	ldr	r2, [r3, #4]
    5014:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    5018:	f8c3 a004 	str.w	sl, [r3, #4]
}
    501c:	e014      	b.n	5048 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
    501e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    5022:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    5026:	4544      	cmp	r4, r8
    5028:	eb75 0109 	sbcs.w	r1, r5, r9
    502c:	da1d      	bge.n	506a <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
    502e:	ebb8 0004 	subs.w	r0, r8, r4
    5032:	eb69 0105 	sbc.w	r1, r9, r5
    5036:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    503a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    503c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    5040:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5044:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    5048:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    504a:	429a      	cmp	r2, r3
    504c:	d006      	beq.n	505c <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    504e:	4592      	cmp	sl, r2
    5050:	d104      	bne.n	505c <z_add_timeout+0xe4>
			if (next_time == 0 ||
			    _current_cpu->slice_ticks != next_time) {
				z_clock_set_timeout(next_time, false);
			}
#else
			z_clock_set_timeout(next_timeout(), false);
    5052:	f7ff ff6d 	bl	4f30 <next_timeout>
    5056:	2100      	movs	r1, #0
    5058:	f7fc ff74 	bl	1f44 <z_clock_set_timeout>
	__asm__ volatile(
    505c:	f386 8811 	msr	BASEPRI, r6
    5060:	f3bf 8f6f 	isb	sy
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5064:	b003      	add	sp, #12
    5066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    506a:	ebb4 0008 	subs.w	r0, r4, r8
    506e:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    5072:	42ba      	cmp	r2, r7
    5074:	e9ca 0104 	strd	r0, r1, [sl, #16]
    5078:	d0c6      	beq.n	5008 <z_add_timeout+0x90>
    507a:	6812      	ldr	r2, [r2, #0]
    507c:	e7c3      	b.n	5006 <z_add_timeout+0x8e>
    507e:	bf00      	nop
    5080:	20000220 	.word	0x20000220
    5084:	20000074 	.word	0x20000074

00005088 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    5088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    508c:	f04f 0320 	mov.w	r3, #32
    5090:	f3ef 8411 	mrs	r4, BASEPRI
    5094:	f383 8811 	msr	BASEPRI, r3
    5098:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    509c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 514c <z_clock_announce+0xc4>
    50a0:	4d29      	ldr	r5, [pc, #164]	; (5148 <z_clock_announce+0xc0>)
    50a2:	4651      	mov	r1, sl
	return list->head == list;
    50a4:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 5150 <z_clock_announce+0xc8>
    50a8:	6028      	str	r0, [r5, #0]
    50aa:	f8d5 c000 	ldr.w	ip, [r5]
    50ae:	f8db 0000 	ldr.w	r0, [fp]
    50b2:	4662      	mov	r2, ip
    50b4:	e9da 8900 	ldrd	r8, r9, [sl]
    50b8:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50ba:	4558      	cmp	r0, fp
    50bc:	e9cd 2300 	strd	r2, r3, [sp]
    50c0:	d00d      	beq.n	50de <z_clock_announce+0x56>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    50c2:	b160      	cbz	r0, 50de <z_clock_announce+0x56>
    50c4:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    50c8:	45b4      	cmp	ip, r6
    50ca:	41bb      	sbcs	r3, r7
    50cc:	da1d      	bge.n	510a <z_clock_announce+0x82>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    50ce:	9b00      	ldr	r3, [sp, #0]
    50d0:	ebb6 0c03 	subs.w	ip, r6, r3
    50d4:	9b01      	ldr	r3, [sp, #4]
    50d6:	eb67 0603 	sbc.w	r6, r7, r3
    50da:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    50de:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    50e0:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    50e2:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    50e4:	eb13 0208 	adds.w	r2, r3, r8
    50e8:	9b01      	ldr	r3, [sp, #4]
    50ea:	eb43 0309 	adc.w	r3, r3, r9
    50ee:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
    50f2:	f7ff ff1d 	bl	4f30 <next_timeout>
    50f6:	4631      	mov	r1, r6
    50f8:	f7fc ff24 	bl	1f44 <z_clock_set_timeout>
	__asm__ volatile(
    50fc:	f384 8811 	msr	BASEPRI, r4
    5100:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5104:	b003      	add	sp, #12
    5106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    510a:	2200      	movs	r2, #0
    510c:	2300      	movs	r3, #0
		curr_tick += dt;
    510e:	eb18 0806 	adds.w	r8, r8, r6
    5112:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    5116:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    511a:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    511e:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    5122:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    5124:	f7ff feea 	bl	4efc <remove_timeout>
    5128:	f384 8811 	msr	BASEPRI, r4
    512c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5130:	6883      	ldr	r3, [r0, #8]
    5132:	4798      	blx	r3
	__asm__ volatile(
    5134:	f04f 0320 	mov.w	r3, #32
    5138:	f3ef 8411 	mrs	r4, BASEPRI
    513c:	f383 8811 	msr	BASEPRI, r3
    5140:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    5144:	4901      	ldr	r1, [pc, #4]	; (514c <z_clock_announce+0xc4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5146:	e7b0      	b.n	50aa <z_clock_announce+0x22>
    5148:	2000116c 	.word	0x2000116c
    514c:	20000220 	.word	0x20000220
    5150:	20000074 	.word	0x20000074

00005154 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    5154:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    5156:	4c06      	ldr	r4, [pc, #24]	; (5170 <statics_init+0x1c>)
    5158:	4d06      	ldr	r5, [pc, #24]	; (5174 <statics_init+0x20>)
    515a:	42ac      	cmp	r4, r5
    515c:	d301      	bcc.n	5162 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    515e:	2000      	movs	r0, #0
    5160:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    5162:	4620      	mov	r0, r4
    5164:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    5168:	f003 f82d 	bl	81c6 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    516c:	3414      	adds	r4, #20
    516e:	e7f4      	b.n	515a <statics_init+0x6>
    5170:	20000150 	.word	0x20000150
    5174:	20000150 	.word	0x20000150

00005178 <nrf_cc3xx_platform_init_no_rng>:
    5178:	b510      	push	{r4, lr}
    517a:	4c0a      	ldr	r4, [pc, #40]	; (51a4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    517c:	6823      	ldr	r3, [r4, #0]
    517e:	b11b      	cbz	r3, 5188 <nrf_cc3xx_platform_init_no_rng+0x10>
    5180:	2301      	movs	r3, #1
    5182:	2000      	movs	r0, #0
    5184:	6023      	str	r3, [r4, #0]
    5186:	bd10      	pop	{r4, pc}
    5188:	f000 f8b2 	bl	52f0 <CC_LibInitNoRng>
    518c:	2800      	cmp	r0, #0
    518e:	d0f7      	beq.n	5180 <nrf_cc3xx_platform_init_no_rng+0x8>
    5190:	3801      	subs	r0, #1
    5192:	2807      	cmp	r0, #7
    5194:	d803      	bhi.n	519e <nrf_cc3xx_platform_init_no_rng+0x26>
    5196:	4b04      	ldr	r3, [pc, #16]	; (51a8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5198:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    519c:	bd10      	pop	{r4, pc}
    519e:	4803      	ldr	r0, [pc, #12]	; (51ac <nrf_cc3xx_platform_init_no_rng+0x34>)
    51a0:	bd10      	pop	{r4, pc}
    51a2:	bf00      	nop
    51a4:	20001170 	.word	0x20001170
    51a8:	000087e8 	.word	0x000087e8
    51ac:	ffff8ffe 	.word	0xffff8ffe

000051b0 <nrf_cc3xx_platform_abort>:
    51b0:	f3bf 8f4f 	dsb	sy
    51b4:	4905      	ldr	r1, [pc, #20]	; (51cc <nrf_cc3xx_platform_abort+0x1c>)
    51b6:	4b06      	ldr	r3, [pc, #24]	; (51d0 <nrf_cc3xx_platform_abort+0x20>)
    51b8:	68ca      	ldr	r2, [r1, #12]
    51ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    51be:	4313      	orrs	r3, r2
    51c0:	60cb      	str	r3, [r1, #12]
    51c2:	f3bf 8f4f 	dsb	sy
    51c6:	bf00      	nop
    51c8:	e7fd      	b.n	51c6 <nrf_cc3xx_platform_abort+0x16>
    51ca:	bf00      	nop
    51cc:	e000ed00 	.word	0xe000ed00
    51d0:	05fa0004 	.word	0x05fa0004

000051d4 <CC_PalAbort>:
    51d4:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    51d8:	2100      	movs	r1, #0
    51da:	b430      	push	{r4, r5}
    51dc:	4a08      	ldr	r2, [pc, #32]	; (5200 <CC_PalAbort+0x2c>)
    51de:	4c09      	ldr	r4, [pc, #36]	; (5204 <CC_PalAbort+0x30>)
    51e0:	4d09      	ldr	r5, [pc, #36]	; (5208 <CC_PalAbort+0x34>)
    51e2:	6023      	str	r3, [r4, #0]
    51e4:	602b      	str	r3, [r5, #0]
    51e6:	6013      	str	r3, [r2, #0]
    51e8:	60e3      	str	r3, [r4, #12]
    51ea:	60eb      	str	r3, [r5, #12]
    51ec:	60d3      	str	r3, [r2, #12]
    51ee:	61a3      	str	r3, [r4, #24]
    51f0:	4a06      	ldr	r2, [pc, #24]	; (520c <CC_PalAbort+0x38>)
    51f2:	4c07      	ldr	r4, [pc, #28]	; (5210 <CC_PalAbort+0x3c>)
    51f4:	61ab      	str	r3, [r5, #24]
    51f6:	6863      	ldr	r3, [r4, #4]
    51f8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    51fc:	bc30      	pop	{r4, r5}
    51fe:	4718      	bx	r3
    5200:	50845408 	.word	0x50845408
    5204:	50845400 	.word	0x50845400
    5208:	50845404 	.word	0x50845404
    520c:	50844000 	.word	0x50844000
    5210:	2000007c 	.word	0x2000007c

00005214 <nrf_cc3xx_platform_set_abort>:
    5214:	4b02      	ldr	r3, [pc, #8]	; (5220 <nrf_cc3xx_platform_set_abort+0xc>)
    5216:	e9d0 1200 	ldrd	r1, r2, [r0]
    521a:	e9c3 1200 	strd	r1, r2, [r3]
    521e:	4770      	bx	lr
    5220:	2000007c 	.word	0x2000007c

00005224 <mutex_unlock>:
    5224:	b148      	cbz	r0, 523a <mutex_unlock+0x16>
    5226:	6843      	ldr	r3, [r0, #4]
    5228:	b12b      	cbz	r3, 5236 <mutex_unlock+0x12>
    522a:	f3bf 8f5f 	dmb	sy
    522e:	2300      	movs	r3, #0
    5230:	6003      	str	r3, [r0, #0]
    5232:	4618      	mov	r0, r3
    5234:	4770      	bx	lr
    5236:	4802      	ldr	r0, [pc, #8]	; (5240 <mutex_unlock+0x1c>)
    5238:	4770      	bx	lr
    523a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    523e:	4770      	bx	lr
    5240:	ffff8fea 	.word	0xffff8fea

00005244 <mutex_free>:
    5244:	b510      	push	{r4, lr}
    5246:	4604      	mov	r4, r0
    5248:	b128      	cbz	r0, 5256 <mutex_free+0x12>
    524a:	6863      	ldr	r3, [r4, #4]
    524c:	b113      	cbz	r3, 5254 <mutex_free+0x10>
    524e:	2300      	movs	r3, #0
    5250:	6023      	str	r3, [r4, #0]
    5252:	6063      	str	r3, [r4, #4]
    5254:	bd10      	pop	{r4, pc}
    5256:	4b02      	ldr	r3, [pc, #8]	; (5260 <mutex_free+0x1c>)
    5258:	4802      	ldr	r0, [pc, #8]	; (5264 <mutex_free+0x20>)
    525a:	685b      	ldr	r3, [r3, #4]
    525c:	4798      	blx	r3
    525e:	e7f4      	b.n	524a <mutex_free+0x6>
    5260:	2000007c 	.word	0x2000007c
    5264:	00008808 	.word	0x00008808

00005268 <mutex_init>:
    5268:	b510      	push	{r4, lr}
    526a:	4604      	mov	r4, r0
    526c:	b130      	cbz	r0, 527c <mutex_init+0x14>
    526e:	2200      	movs	r2, #0
    5270:	6863      	ldr	r3, [r4, #4]
    5272:	6022      	str	r2, [r4, #0]
    5274:	f043 0301 	orr.w	r3, r3, #1
    5278:	6063      	str	r3, [r4, #4]
    527a:	bd10      	pop	{r4, pc}
    527c:	4801      	ldr	r0, [pc, #4]	; (5284 <mutex_init+0x1c>)
    527e:	f7ff ffa9 	bl	51d4 <CC_PalAbort>
    5282:	e7f4      	b.n	526e <mutex_init+0x6>
    5284:	00008830 	.word	0x00008830

00005288 <mutex_lock>:
    5288:	b180      	cbz	r0, 52ac <mutex_lock+0x24>
    528a:	6843      	ldr	r3, [r0, #4]
    528c:	b163      	cbz	r3, 52a8 <mutex_lock+0x20>
    528e:	2201      	movs	r2, #1
    5290:	e8d0 3fef 	ldaex	r3, [r0]
    5294:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5298:	2900      	cmp	r1, #0
    529a:	d1f9      	bne.n	5290 <mutex_lock+0x8>
    529c:	2b01      	cmp	r3, #1
    529e:	d0f7      	beq.n	5290 <mutex_lock+0x8>
    52a0:	f3bf 8f5f 	dmb	sy
    52a4:	2000      	movs	r0, #0
    52a6:	4770      	bx	lr
    52a8:	4802      	ldr	r0, [pc, #8]	; (52b4 <mutex_lock+0x2c>)
    52aa:	4770      	bx	lr
    52ac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    52b0:	4770      	bx	lr
    52b2:	bf00      	nop
    52b4:	ffff8fea 	.word	0xffff8fea

000052b8 <nrf_cc3xx_platform_set_mutexes>:
    52b8:	b470      	push	{r4, r5, r6}
    52ba:	4b0b      	ldr	r3, [pc, #44]	; (52e8 <nrf_cc3xx_platform_set_mutexes+0x30>)
    52bc:	6806      	ldr	r6, [r0, #0]
    52be:	68c2      	ldr	r2, [r0, #12]
    52c0:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    52c4:	e9c3 4202 	strd	r4, r2, [r3, #8]
    52c8:	e9c3 6500 	strd	r6, r5, [r3]
    52cc:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    52d0:	680e      	ldr	r6, [r1, #0]
    52d2:	4b06      	ldr	r3, [pc, #24]	; (52ec <nrf_cc3xx_platform_set_mutexes+0x34>)
    52d4:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    52d8:	e9c3 6500 	strd	r6, r5, [r3]
    52dc:	e9c3 4002 	strd	r4, r0, [r3, #8]
    52e0:	611a      	str	r2, [r3, #16]
    52e2:	bc70      	pop	{r4, r5, r6}
    52e4:	4770      	bx	lr
    52e6:	bf00      	nop
    52e8:	2000008c 	.word	0x2000008c
    52ec:	2000009c 	.word	0x2000009c

000052f0 <CC_LibInitNoRng>:
    52f0:	b508      	push	{r3, lr}
    52f2:	f000 f80f 	bl	5314 <CC_HalInit>
    52f6:	b928      	cbnz	r0, 5304 <CC_LibInitNoRng+0x14>
    52f8:	f000 f80e 	bl	5318 <CC_PalInit>
    52fc:	b930      	cbnz	r0, 530c <CC_LibInitNoRng+0x1c>
    52fe:	4a04      	ldr	r2, [pc, #16]	; (5310 <CC_LibInitNoRng+0x20>)
    5300:	6010      	str	r0, [r2, #0]
    5302:	bd08      	pop	{r3, pc}
    5304:	f000 f836 	bl	5374 <CC_PalTerminate>
    5308:	2003      	movs	r0, #3
    530a:	bd08      	pop	{r3, pc}
    530c:	2004      	movs	r0, #4
    530e:	bd08      	pop	{r3, pc}
    5310:	50845a0c 	.word	0x50845a0c

00005314 <CC_HalInit>:
    5314:	2000      	movs	r0, #0
    5316:	4770      	bx	lr

00005318 <CC_PalInit>:
    5318:	b510      	push	{r4, lr}
    531a:	4811      	ldr	r0, [pc, #68]	; (5360 <CC_PalInit+0x48>)
    531c:	f000 f848 	bl	53b0 <CC_PalMutexCreate>
    5320:	b100      	cbz	r0, 5324 <CC_PalInit+0xc>
    5322:	bd10      	pop	{r4, pc}
    5324:	480f      	ldr	r0, [pc, #60]	; (5364 <CC_PalInit+0x4c>)
    5326:	f000 f843 	bl	53b0 <CC_PalMutexCreate>
    532a:	2800      	cmp	r0, #0
    532c:	d1f9      	bne.n	5322 <CC_PalInit+0xa>
    532e:	4c0e      	ldr	r4, [pc, #56]	; (5368 <CC_PalInit+0x50>)
    5330:	4620      	mov	r0, r4
    5332:	f000 f83d 	bl	53b0 <CC_PalMutexCreate>
    5336:	2800      	cmp	r0, #0
    5338:	d1f3      	bne.n	5322 <CC_PalInit+0xa>
    533a:	4b0c      	ldr	r3, [pc, #48]	; (536c <CC_PalInit+0x54>)
    533c:	480c      	ldr	r0, [pc, #48]	; (5370 <CC_PalInit+0x58>)
    533e:	601c      	str	r4, [r3, #0]
    5340:	f000 f836 	bl	53b0 <CC_PalMutexCreate>
    5344:	4601      	mov	r1, r0
    5346:	2800      	cmp	r0, #0
    5348:	d1eb      	bne.n	5322 <CC_PalInit+0xa>
    534a:	f000 f82d 	bl	53a8 <CC_PalDmaInit>
    534e:	4604      	mov	r4, r0
    5350:	b108      	cbz	r0, 5356 <CC_PalInit+0x3e>
    5352:	4620      	mov	r0, r4
    5354:	bd10      	pop	{r4, pc}
    5356:	f000 f83f 	bl	53d8 <CC_PalPowerSaveModeInit>
    535a:	4620      	mov	r0, r4
    535c:	e7fa      	b.n	5354 <CC_PalInit+0x3c>
    535e:	bf00      	nop
    5360:	200000d4 	.word	0x200000d4
    5364:	200000c8 	.word	0x200000c8
    5368:	200000d0 	.word	0x200000d0
    536c:	200000d8 	.word	0x200000d8
    5370:	200000cc 	.word	0x200000cc

00005374 <CC_PalTerminate>:
    5374:	b508      	push	{r3, lr}
    5376:	4808      	ldr	r0, [pc, #32]	; (5398 <CC_PalTerminate+0x24>)
    5378:	f000 f824 	bl	53c4 <CC_PalMutexDestroy>
    537c:	4807      	ldr	r0, [pc, #28]	; (539c <CC_PalTerminate+0x28>)
    537e:	f000 f821 	bl	53c4 <CC_PalMutexDestroy>
    5382:	4807      	ldr	r0, [pc, #28]	; (53a0 <CC_PalTerminate+0x2c>)
    5384:	f000 f81e 	bl	53c4 <CC_PalMutexDestroy>
    5388:	4806      	ldr	r0, [pc, #24]	; (53a4 <CC_PalTerminate+0x30>)
    538a:	f000 f81b 	bl	53c4 <CC_PalMutexDestroy>
    538e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5392:	f000 b80b 	b.w	53ac <CC_PalDmaTerminate>
    5396:	bf00      	nop
    5398:	200000d4 	.word	0x200000d4
    539c:	200000c8 	.word	0x200000c8
    53a0:	200000d0 	.word	0x200000d0
    53a4:	200000cc 	.word	0x200000cc

000053a8 <CC_PalDmaInit>:
    53a8:	2000      	movs	r0, #0
    53aa:	4770      	bx	lr

000053ac <CC_PalDmaTerminate>:
    53ac:	4770      	bx	lr
    53ae:	bf00      	nop

000053b0 <CC_PalMutexCreate>:
    53b0:	b508      	push	{r3, lr}
    53b2:	4b03      	ldr	r3, [pc, #12]	; (53c0 <CC_PalMutexCreate+0x10>)
    53b4:	6802      	ldr	r2, [r0, #0]
    53b6:	681b      	ldr	r3, [r3, #0]
    53b8:	6810      	ldr	r0, [r2, #0]
    53ba:	4798      	blx	r3
    53bc:	2000      	movs	r0, #0
    53be:	bd08      	pop	{r3, pc}
    53c0:	2000008c 	.word	0x2000008c

000053c4 <CC_PalMutexDestroy>:
    53c4:	b508      	push	{r3, lr}
    53c6:	4b03      	ldr	r3, [pc, #12]	; (53d4 <CC_PalMutexDestroy+0x10>)
    53c8:	6802      	ldr	r2, [r0, #0]
    53ca:	685b      	ldr	r3, [r3, #4]
    53cc:	6810      	ldr	r0, [r2, #0]
    53ce:	4798      	blx	r3
    53d0:	2000      	movs	r0, #0
    53d2:	bd08      	pop	{r3, pc}
    53d4:	2000008c 	.word	0x2000008c

000053d8 <CC_PalPowerSaveModeInit>:
    53d8:	b570      	push	{r4, r5, r6, lr}
    53da:	4c09      	ldr	r4, [pc, #36]	; (5400 <CC_PalPowerSaveModeInit+0x28>)
    53dc:	4d09      	ldr	r5, [pc, #36]	; (5404 <CC_PalPowerSaveModeInit+0x2c>)
    53de:	6920      	ldr	r0, [r4, #16]
    53e0:	68ab      	ldr	r3, [r5, #8]
    53e2:	4798      	blx	r3
    53e4:	b118      	cbz	r0, 53ee <CC_PalPowerSaveModeInit+0x16>
    53e6:	4b08      	ldr	r3, [pc, #32]	; (5408 <CC_PalPowerSaveModeInit+0x30>)
    53e8:	4808      	ldr	r0, [pc, #32]	; (540c <CC_PalPowerSaveModeInit+0x34>)
    53ea:	685b      	ldr	r3, [r3, #4]
    53ec:	4798      	blx	r3
    53ee:	2100      	movs	r1, #0
    53f0:	4a07      	ldr	r2, [pc, #28]	; (5410 <CC_PalPowerSaveModeInit+0x38>)
    53f2:	68eb      	ldr	r3, [r5, #12]
    53f4:	6011      	str	r1, [r2, #0]
    53f6:	6920      	ldr	r0, [r4, #16]
    53f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53fc:	4718      	bx	r3
    53fe:	bf00      	nop
    5400:	2000009c 	.word	0x2000009c
    5404:	2000008c 	.word	0x2000008c
    5408:	2000007c 	.word	0x2000007c
    540c:	00008854 	.word	0x00008854
    5410:	20001184 	.word	0x20001184

00005414 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    5414:	b129      	cbz	r1, 5422 <flash_area_id_from_multi_image_slot+0xe>
    5416:	2901      	cmp	r1, #1
    5418:	bf14      	ite	ne
    541a:	f06f 0015 	mvnne.w	r0, #21
    541e:	2005      	moveq	r0, #5
    5420:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5422:	2002      	movs	r0, #2
#endif
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    5424:	4770      	bx	lr

00005426 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    5426:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    542a:	460e      	mov	r6, r1
    542c:	4617      	mov	r7, r2
    542e:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5430:	4604      	mov	r4, r0
    5432:	b928      	cbnz	r0, 5440 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    5434:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5438:	4640      	mov	r0, r8
    543a:	b003      	add	sp, #12
    543c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    5440:	2900      	cmp	r1, #0
    5442:	d0f7      	beq.n	5434 <bootutil_tlv_iter_begin+0xe>
    5444:	2a00      	cmp	r2, #0
    5446:	d0f5      	beq.n	5434 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5448:	68cb      	ldr	r3, [r1, #12]
    544a:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    544c:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    544e:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5450:	2304      	movs	r3, #4
    5452:	4629      	mov	r1, r5
    5454:	eb0d 0203 	add.w	r2, sp, r3
    5458:	f000 fcbb 	bl	5dd2 <flash_area_read>
    545c:	4680      	mov	r8, r0
    545e:	2800      	cmp	r0, #0
    5460:	d1e8      	bne.n	5434 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5462:	f646 1208 	movw	r2, #26888	; 0x6908
    5466:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    546a:	8973      	ldrh	r3, [r6, #10]
    546c:	4291      	cmp	r1, r2
    546e:	d123      	bne.n	54b8 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5470:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5474:	4299      	cmp	r1, r3
    5476:	d1dd      	bne.n	5434 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5478:	2304      	movs	r3, #4
    547a:	4638      	mov	r0, r7
    547c:	eb0d 0203 	add.w	r2, sp, r3
    5480:	4429      	add	r1, r5
    5482:	f000 fca6 	bl	5dd2 <flash_area_read>
    5486:	2800      	cmp	r0, #0
    5488:	d1d4      	bne.n	5434 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    548a:	f646 1307 	movw	r3, #26887	; 0x6907
    548e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5492:	429a      	cmp	r2, r3
    5494:	d1ce      	bne.n	5434 <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    5496:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    549a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    549e:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    54a0:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    54a2:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    54a6:	442b      	add	r3, r5
    54a8:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    54aa:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    54ac:	4413      	add	r3, r2
    it->type = type;
    54ae:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    54b2:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    54b4:	6125      	str	r5, [r4, #16]
    return 0;
    54b6:	e7bf      	b.n	5438 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    54b8:	2b00      	cmp	r3, #0
    54ba:	d0e6      	beq.n	548a <bootutil_tlv_iter_begin+0x64>
    54bc:	e7ba      	b.n	5434 <bootutil_tlv_iter_begin+0xe>

000054be <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    54be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    54c2:	460f      	mov	r7, r1
    54c4:	4690      	mov	r8, r2
    54c6:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    54c8:	4604      	mov	r4, r0
    54ca:	b920      	cbnz	r0, 54d6 <bootutil_tlv_iter_next+0x18>
        return -1;
    54cc:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    54d0:	b003      	add	sp, #12
    54d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    54d6:	6803      	ldr	r3, [r0, #0]
    54d8:	2b00      	cmp	r3, #0
    54da:	d0f7      	beq.n	54cc <bootutil_tlv_iter_next+0xe>
    54dc:	6843      	ldr	r3, [r0, #4]
    54de:	2b00      	cmp	r3, #0
    54e0:	d0f4      	beq.n	54cc <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    54e2:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    54e6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    54ea:	429a      	cmp	r2, r3
    54ec:	d216      	bcs.n	551c <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    54ee:	6823      	ldr	r3, [r4, #0]
    54f0:	895b      	ldrh	r3, [r3, #10]
    54f2:	b123      	cbz	r3, 54fe <bootutil_tlv_iter_next+0x40>
    54f4:	68e3      	ldr	r3, [r4, #12]
    54f6:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    54f8:	bf04      	itt	eq
    54fa:	3304      	addeq	r3, #4
    54fc:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    54fe:	2304      	movs	r3, #4
    5500:	6921      	ldr	r1, [r4, #16]
    5502:	6860      	ldr	r0, [r4, #4]
    5504:	eb0d 0203 	add.w	r2, sp, r3
    5508:	f000 fc63 	bl	5dd2 <flash_area_read>
        if (rc) {
    550c:	2800      	cmp	r0, #0
    550e:	d1dd      	bne.n	54cc <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5510:	7aa3      	ldrb	r3, [r4, #10]
    5512:	6925      	ldr	r5, [r4, #16]
    5514:	b123      	cbz	r3, 5520 <bootutil_tlv_iter_next+0x62>
    5516:	68e3      	ldr	r3, [r4, #12]
    5518:	42ab      	cmp	r3, r5
    551a:	d801      	bhi.n	5520 <bootutil_tlv_iter_next+0x62>
            return 1;
    551c:	2001      	movs	r0, #1
    551e:	e7d7      	b.n	54d0 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5520:	8921      	ldrh	r1, [r4, #8]
    5522:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5526:	4549      	cmp	r1, r9
    5528:	f103 0204 	add.w	r2, r3, #4
    552c:	d003      	beq.n	5536 <bootutil_tlv_iter_next+0x78>
    552e:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5532:	458c      	cmp	ip, r1
    5534:	d10b      	bne.n	554e <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    5536:	b116      	cbz	r6, 553e <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    5538:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    553c:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    553e:	3504      	adds	r5, #4
    5540:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    5542:	f8a8 3000 	strh.w	r3, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5546:	6923      	ldr	r3, [r4, #16]
    5548:	4413      	add	r3, r2
    554a:	6123      	str	r3, [r4, #16]
            return 0;
    554c:	e7c0      	b.n	54d0 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    554e:	4415      	add	r5, r2
    5550:	6125      	str	r5, [r4, #16]
    5552:	e7c8      	b.n	54e6 <bootutil_tlv_iter_next+0x28>

00005554 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    5554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5558:	4606      	mov	r6, r0
    555a:	460f      	mov	r7, r1
    555c:	4690      	mov	r8, r2
    555e:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    5560:	f000 fca3 	bl	5eaa <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    5564:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
    5566:	4604      	mov	r4, r0
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    5568:	d81e      	bhi.n	55a8 <boot_write_trailer+0x54>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    556a:	4630      	mov	r0, r6
    556c:	f000 fca6 	bl	5ebc <flash_area_erased_val>
    5570:	42ac      	cmp	r4, r5
    5572:	bf38      	it	cc
    5574:	462c      	movcc	r4, r5
    5576:	4681      	mov	r9, r0
    if (align < inlen) {
        align = inlen;
    }
    memcpy(buf, inbuf, inlen);
    5578:	462a      	mov	r2, r5
    557a:	4641      	mov	r1, r8
    557c:	b2e4      	uxtb	r4, r4
    557e:	4668      	mov	r0, sp
    5580:	f000 fd85 	bl	608e <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    5584:	4649      	mov	r1, r9
    5586:	1b62      	subs	r2, r4, r5
    5588:	eb0d 0005 	add.w	r0, sp, r5
    558c:	f000 fdaa 	bl	60e4 <memset>

    rc = flash_area_write(fap, off, buf, align);
    5590:	4623      	mov	r3, r4
    5592:	466a      	mov	r2, sp
    5594:	4639      	mov	r1, r7
    5596:	4630      	mov	r0, r6
    5598:	f000 fc38 	bl	5e0c <flash_area_write>
    if (rc != 0) {
    559c:	3800      	subs	r0, #0
    559e:	bf18      	it	ne
    55a0:	2001      	movne	r0, #1
        return BOOT_EFLASH;
    }

    return 0;
}
    55a2:	b003      	add	sp, #12
    55a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    55a8:	f04f 30ff 	mov.w	r0, #4294967295
    55ac:	e7f9      	b.n	55a2 <boot_write_trailer+0x4e>

000055ae <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    55ae:	f000 bd5e 	b.w	606e <memcmp>

000055b2 <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    55b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
    55b6:	4358      	muls	r0, r3
}
    55b8:	3030      	adds	r0, #48	; 0x30
    55ba:	4770      	bx	lr

000055bc <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    55bc:	780b      	ldrb	r3, [r1, #0]
    55be:	2b02      	cmp	r3, #2
    55c0:	d006      	beq.n	55d0 <boot_status_entries+0x14>
    55c2:	2b05      	cmp	r3, #5
    return -1;
    55c4:	bf0c      	ite	eq
    55c6:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    55ca:	f04f 30ff 	movne.w	r0, #4294967295
    55ce:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    55d0:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    55d4:	4770      	bx	lr

000055d6 <boot_status_off>:
{
    55d6:	b510      	push	{r4, lr}
    55d8:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    55da:	f000 fc66 	bl	5eaa <flash_area_align>
}
    55de:	f44f 72c0 	mov.w	r2, #384	; 0x180
    return fap->fa_size - off_from_end;
    55e2:	68a3      	ldr	r3, [r4, #8]
    55e4:	3b30      	subs	r3, #48	; 0x30
}
    55e6:	fb02 3010 	mls	r0, r2, r0, r3
    55ea:	bd10      	pop	{r4, pc}

000055ec <boot_write_copy_done>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    const uint8_t buf[1] = { flag_val };
    55ec:	2301      	movs	r3, #1
    return boot_write_trailer(fap, off, buf, 1);
}

int
boot_write_copy_done(const struct flash_area *fap)
{
    55ee:	b507      	push	{r0, r1, r2, lr}
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    55f0:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, buf, 1);
    55f2:	aa01      	add	r2, sp, #4
    55f4:	3920      	subs	r1, #32
    const uint8_t buf[1] = { flag_val };
    55f6:	f88d 3004 	strb.w	r3, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    55fa:	f7ff ffab 	bl	5554 <boot_write_trailer>
    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}
    55fe:	b003      	add	sp, #12
    5600:	f85d fb04 	ldr.w	pc, [sp], #4

00005604 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    5604:	b513      	push	{r0, r1, r4, lr}
    5606:	4604      	mov	r4, r0
    5608:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    560a:	f001 f807 	bl	661c <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    560e:	2304      	movs	r3, #4
    5610:	f1a0 0108 	sub.w	r1, r0, #8
    5614:	eb0d 0203 	add.w	r2, sp, r3
    5618:	4620      	mov	r0, r4
    561a:	f7ff ff9b 	bl	5554 <boot_write_trailer>
}
    561e:	b002      	add	sp, #8
    5620:	bd10      	pop	{r4, pc}

00005622 <boot_read_image_size>:
{
    5622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5624:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5626:	2000      	movs	r0, #0
{
    5628:	460c      	mov	r4, r1
    562a:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    562c:	f7ff fef2 	bl	5414 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5630:	4669      	mov	r1, sp
    5632:	b2c0      	uxtb	r0, r0
    5634:	f7fc f9e2 	bl	19fc <flash_area_open>
    if (rc != 0) {
    5638:	b130      	cbz	r0, 5648 <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    563a:	2501      	movs	r5, #1
    flash_area_close(fap);
    563c:	9800      	ldr	r0, [sp, #0]
    563e:	f000 fbc7 	bl	5dd0 <flash_area_close>
}
    5642:	4628      	mov	r0, r5
    5644:	b003      	add	sp, #12
    5646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5648:	212c      	movs	r1, #44	; 0x2c
    564a:	fb01 5404 	mla	r4, r1, r4, r5
    564e:	8921      	ldrh	r1, [r4, #8]
    5650:	68e3      	ldr	r3, [r4, #12]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5652:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5654:	18ce      	adds	r6, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5656:	2304      	movs	r3, #4
    5658:	4631      	mov	r1, r6
    565a:	eb0d 0203 	add.w	r2, sp, r3
    565e:	f000 fbb8 	bl	5dd2 <flash_area_read>
    5662:	4605      	mov	r5, r0
    5664:	2800      	cmp	r0, #0
    5666:	d1e8      	bne.n	563a <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5668:	f646 1308 	movw	r3, #26888	; 0x6908
    566c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5670:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5672:	429a      	cmp	r2, r3
    5674:	d11a      	bne.n	56ac <boot_read_image_size+0x8a>
        if (protect_tlv_size != info.it_tlv_tot) {
    5676:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    567a:	429c      	cmp	r4, r3
    567c:	d001      	beq.n	5682 <boot_read_image_size+0x60>
            rc = BOOT_EBADIMAGE;
    567e:	2503      	movs	r5, #3
    5680:	e7dc      	b.n	563c <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5682:	2304      	movs	r3, #4
    5684:	9800      	ldr	r0, [sp, #0]
    5686:	eb0d 0203 	add.w	r2, sp, r3
    568a:	19a1      	adds	r1, r4, r6
    568c:	f000 fba1 	bl	5dd2 <flash_area_read>
    5690:	2800      	cmp	r0, #0
    5692:	d1d2      	bne.n	563a <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5694:	f646 1307 	movw	r3, #26887	; 0x6907
    5698:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    569c:	429a      	cmp	r2, r3
    569e:	d1ee      	bne.n	567e <boot_read_image_size+0x5c>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    56a0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    56a4:	4421      	add	r1, r4
    56a6:	4431      	add	r1, r6
    56a8:	6039      	str	r1, [r7, #0]
    rc = 0;
    56aa:	e7c7      	b.n	563c <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    56ac:	2c00      	cmp	r4, #0
    56ae:	d0f1      	beq.n	5694 <boot_read_image_size+0x72>
    56b0:	e7e5      	b.n	567e <boot_read_image_size+0x5c>

000056b2 <boot_read_image_headers>:
{
    56b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    56b4:	4613      	mov	r3, r2
{
    56b6:	460f      	mov	r7, r1
    56b8:	4616      	mov	r6, r2
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    56ba:	2100      	movs	r1, #0
    56bc:	4602      	mov	r2, r0
{
    56be:	4605      	mov	r5, r0
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    56c0:	f7fb fbe0 	bl	e84 <boot_read_image_header>
        if (rc != 0) {
    56c4:	4604      	mov	r4, r0
    56c6:	b950      	cbnz	r0, 56de <boot_read_image_headers+0x2c>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    56c8:	4633      	mov	r3, r6
    56ca:	2101      	movs	r1, #1
    56cc:	4628      	mov	r0, r5
    56ce:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    56d2:	f7fb fbd7 	bl	e84 <boot_read_image_header>
        if (rc != 0) {
    56d6:	b110      	cbz	r0, 56de <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    56d8:	2f00      	cmp	r7, #0
    56da:	bf18      	it	ne
    56dc:	4604      	movne	r4, r0
}
    56de:	4620      	mov	r0, r4
    56e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000056e2 <boot_read_sectors>:
{
    56e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    num_sectors = BOOT_MAX_IMG_SECTORS;
    56e4:	2580      	movs	r5, #128	; 0x80
{
    56e6:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    56e8:	6a42      	ldr	r2, [r0, #36]	; 0x24
    56ea:	a901      	add	r1, sp, #4
    56ec:	2002      	movs	r0, #2
    num_sectors = BOOT_MAX_IMG_SECTORS;
    56ee:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    56f0:	f7fc f998 	bl	1a24 <flash_area_get_sectors>
    if (rc != 0) {
    56f4:	b948      	cbnz	r0, 570a <boot_read_sectors+0x28>
    *out_num_sectors = num_sectors;
    56f6:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    56f8:	2005      	movs	r0, #5
    56fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    56fc:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    56fe:	a901      	add	r1, sp, #4
    num_sectors = BOOT_MAX_IMG_SECTORS;
    5700:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5702:	f7fc f98f 	bl	1a24 <flash_area_get_sectors>
    if (rc != 0) {
    5706:	4605      	mov	r5, r0
    5708:	b108      	cbz	r0, 570e <boot_read_sectors+0x2c>
        return BOOT_EFLASH;
    570a:	2501      	movs	r5, #1
    570c:	e005      	b.n	571a <boot_read_sectors+0x38>
    *out_num_sectors = num_sectors;
    570e:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5710:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5712:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5714:	f000 fbc9 	bl	5eaa <flash_area_align>
    5718:	65e0      	str	r0, [r4, #92]	; 0x5c
}
    571a:	4628      	mov	r0, r5
    571c:	b003      	add	sp, #12
    571e:	bd30      	pop	{r4, r5, pc}

00005720 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5720:	2301      	movs	r3, #1
    5722:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5724:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5728:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    572a:	2300      	movs	r3, #0
    bs->source = 0;
    572c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5730:	4770      	bx	lr

00005732 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5732:	7943      	ldrb	r3, [r0, #5]
    5734:	2b01      	cmp	r3, #1
    5736:	d107      	bne.n	5748 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5738:	6803      	ldr	r3, [r0, #0]
    573a:	2b01      	cmp	r3, #1
    573c:	d104      	bne.n	5748 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    573e:	7900      	ldrb	r0, [r0, #4]
    5740:	1e43      	subs	r3, r0, #1
    5742:	4258      	negs	r0, r3
    5744:	4158      	adcs	r0, r3
    5746:	4770      	bx	lr
    5748:	2000      	movs	r0, #0
}
    574a:	4770      	bx	lr

0000574c <boot_write_status>:
{
    574c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    574e:	4606      	mov	r6, r0
    5750:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5752:	2002      	movs	r0, #2
    5754:	a901      	add	r1, sp, #4
    5756:	f7fc f951 	bl	19fc <flash_area_open>
    if (rc != 0) {
    575a:	bb38      	cbnz	r0, 57ac <boot_write_status+0x60>
    off = boot_status_off(fap) +
    575c:	9801      	ldr	r0, [sp, #4]
    575e:	f7ff ff3a 	bl	55d6 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5762:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5764:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5766:	4628      	mov	r0, r5
    5768:	f000 f8e3 	bl	5932 <boot_status_internal_off>
    off = boot_status_off(fap) +
    576c:	4404      	add	r4, r0
    align = flash_area_align(fap);
    576e:	9801      	ldr	r0, [sp, #4]
    5770:	f000 fb9b 	bl	5eaa <flash_area_align>
    5774:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    5776:	9801      	ldr	r0, [sp, #4]
    5778:	f000 fba0 	bl	5ebc <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    577c:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    577e:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5780:	eb0d 0002 	add.w	r0, sp, r2
    5784:	f000 fcae 	bl	60e4 <memset>
    buf[0] = bs->state;
    5788:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    578a:	4621      	mov	r1, r4
    buf[0] = bs->state;
    578c:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    5790:	9801      	ldr	r0, [sp, #4]
    5792:	4633      	mov	r3, r6
    5794:	aa02      	add	r2, sp, #8
    5796:	f000 fb39 	bl	5e0c <flash_area_write>
    if (rc != 0) {
    579a:	1e04      	subs	r4, r0, #0
    579c:	bf18      	it	ne
    579e:	2401      	movne	r4, #1
    flash_area_close(fap);
    57a0:	9801      	ldr	r0, [sp, #4]
    57a2:	f000 fb15 	bl	5dd0 <flash_area_close>
}
    57a6:	4620      	mov	r0, r4
    57a8:	b004      	add	sp, #16
    57aa:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    57ac:	2401      	movs	r4, #1
    57ae:	e7f7      	b.n	57a0 <boot_write_status+0x54>

000057b0 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    57b0:	f000 bb55 	b.w	5e5e <flash_area_erase>

000057b4 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    57b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    57b8:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    57ba:	2100      	movs	r1, #0
{
    57bc:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    57be:	4608      	mov	r0, r1
    57c0:	f7ff fe28 	bl	5414 <flash_area_id_from_multi_image_slot>
    57c4:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    57c6:	2101      	movs	r1, #1
    57c8:	2000      	movs	r0, #0
    57ca:	f7ff fe23 	bl	5414 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    57ce:	7833      	ldrb	r3, [r6, #0]
    57d0:	429c      	cmp	r4, r3
    57d2:	d020      	beq.n	5816 <swap_erase_trailer_sectors+0x62>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    57d4:	4298      	cmp	r0, r3
    57d6:	d120      	bne.n	581a <swap_erase_trailer_sectors+0x66>
        slot = BOOT_SECONDARY_SLOT;
    57d8:	2401      	movs	r4, #1
    return BOOT_IMG(state, slot).num_sectors;
    57da:	232c      	movs	r3, #44	; 0x2c
    57dc:	fb03 7404 	mla	r4, r3, r4, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    57e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    57e2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    57e4:	f7ff fee5 	bl	55b2 <boot_trailer_sz>
    total_sz = 0;
    57e8:	2700      	movs	r7, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    57ea:	4680      	mov	r8, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    57ec:	3d01      	subs	r5, #1
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    57ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    57f0:	4630      	mov	r0, r6
    57f2:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    57f6:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    57fa:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	464a      	mov	r2, r9
    5802:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5804:	444f      	add	r7, r9
        rc = boot_erase_region(fap, off, sz);
    5806:	f7ff ffd3 	bl	57b0 <boot_erase_region>
    } while (total_sz < trailer_sz);
    580a:	45b8      	cmp	r8, r7
        sector--;
    580c:	f105 35ff 	add.w	r5, r5, #4294967295
    } while (total_sz < trailer_sz);
    5810:	d8ed      	bhi.n	57ee <swap_erase_trailer_sectors+0x3a>

    return rc;
}
    5812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    5816:	2400      	movs	r4, #0
    5818:	e7df      	b.n	57da <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    581a:	2001      	movs	r0, #1
    581c:	e7f9      	b.n	5812 <swap_erase_trailer_sectors+0x5e>

0000581e <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    581e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5820:	4615      	mov	r5, r2
    5822:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5824:	2005      	movs	r0, #5
    5826:	4669      	mov	r1, sp
    5828:	f000 ff3c 	bl	66a4 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    582c:	79e9      	ldrb	r1, [r5, #7]
    582e:	2901      	cmp	r1, #1
    5830:	d003      	beq.n	583a <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5832:	2200      	movs	r2, #0
    5834:	4620      	mov	r0, r4
    5836:	f000 ff49 	bl	66cc <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    583a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    583e:	2b01      	cmp	r3, #1
    5840:	d102      	bne.n	5848 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5842:	4620      	mov	r0, r4
    5844:	f000 ff1e 	bl	6684 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5848:	68a9      	ldr	r1, [r5, #8]
    584a:	4620      	mov	r0, r4
    584c:	f7ff feda 	bl	5604 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5850:	4620      	mov	r0, r4
    5852:	f7fd fd9b 	bl	338c <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5856:	2000      	movs	r0, #0
    5858:	b003      	add	sp, #12
    585a:	bd30      	pop	{r4, r5, pc}

0000585c <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    585c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    585e:	460d      	mov	r5, r1
    5860:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5862:	f7fb fbf7 	bl	1054 <swap_status_source>
    5866:	4604      	mov	r4, r0
    5868:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    586a:	b130      	cbz	r0, 587a <swap_read_status+0x1e>
    586c:	2802      	cmp	r0, #2
    586e:	d12e      	bne.n	58ce <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5870:	a901      	add	r1, sp, #4
    5872:	f7fc f8c3 	bl	19fc <flash_area_open>
    if (rc != 0) {
    5876:	b118      	cbz	r0, 5880 <swap_read_status+0x24>
        return BOOT_EFLASH;
    5878:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    587a:	4620      	mov	r0, r4
    587c:	b002      	add	sp, #8
    587e:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    5880:	462a      	mov	r2, r5
    5882:	4631      	mov	r1, r6
    5884:	9801      	ldr	r0, [sp, #4]
    5886:	f7fb fb4b 	bl	f20 <swap_read_status_bytes>
    if (rc == 0) {
    588a:	4604      	mov	r4, r0
    588c:	b9d8      	cbnz	r0, 58c6 <swap_read_status+0x6a>
        off = boot_swap_info_off(fap);
    588e:	9801      	ldr	r0, [sp, #4]
    5890:	f000 fec4 	bl	661c <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5894:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    5896:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5898:	f10d 0203 	add.w	r2, sp, #3
    589c:	9801      	ldr	r0, [sp, #4]
    589e:	f000 fa98 	bl	5dd2 <flash_area_read>
        if (rc != 0) {
    58a2:	4604      	mov	r4, r0
    58a4:	2800      	cmp	r0, #0
    58a6:	d1e7      	bne.n	5878 <swap_read_status+0x1c>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    58a8:	2201      	movs	r2, #1
    58aa:	9801      	ldr	r0, [sp, #4]
    58ac:	f10d 0103 	add.w	r1, sp, #3
    58b0:	f000 fec5 	bl	663e <bootutil_buffer_is_erased>
    58b4:	b110      	cbz	r0, 58bc <swap_read_status+0x60>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    58b6:	2301      	movs	r3, #1
    58b8:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    58bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    58c0:	f003 030f 	and.w	r3, r3, #15
    58c4:	71eb      	strb	r3, [r5, #7]
    flash_area_close(fap);
    58c6:	9801      	ldr	r0, [sp, #4]
    58c8:	f000 fa82 	bl	5dd0 <flash_area_close>
    return rc;
    58cc:	e7d5      	b.n	587a <swap_read_status+0x1e>
    switch (bs->source) {
    58ce:	2407      	movs	r4, #7
    58d0:	e7d3      	b.n	587a <swap_read_status+0x1e>

000058d2 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    58d2:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    58d4:	2002      	movs	r0, #2
    58d6:	a901      	add	r1, sp, #4
    58d8:	f7fc f890 	bl	19fc <flash_area_open>
            &fap);
    if (rc != 0) {
    58dc:	b948      	cbnz	r0, 58f2 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    58de:	9801      	ldr	r0, [sp, #4]
    58e0:	f7ff fe84 	bl	55ec <boot_write_copy_done>
    58e4:	4604      	mov	r4, r0
    flash_area_close(fap);
    58e6:	9801      	ldr	r0, [sp, #4]
    58e8:	f000 fa72 	bl	5dd0 <flash_area_close>
    return rc;
}
    58ec:	4620      	mov	r0, r4
    58ee:	b002      	add	sp, #8
    58f0:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    58f2:	2401      	movs	r4, #1
    58f4:	e7fa      	b.n	58ec <swap_set_copy_done+0x1a>

000058f6 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    58f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    58f8:	2002      	movs	r0, #2
    58fa:	a901      	add	r1, sp, #4
    58fc:	f7fc f87e 	bl	19fc <flash_area_open>
            &fap);
    if (rc != 0) {
    5900:	b9a8      	cbnz	r0, 592e <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    5902:	9801      	ldr	r0, [sp, #4]
    5904:	a902      	add	r1, sp, #8
    5906:	f7fd fd4f 	bl	33a8 <boot_read_swap_state>
    if (rc != 0) {
    590a:	4604      	mov	r4, r0
    590c:	b968      	cbnz	r0, 592a <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    590e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5912:	2b03      	cmp	r3, #3
    5914:	d103      	bne.n	591e <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    5916:	9801      	ldr	r0, [sp, #4]
    5918:	f000 feb4 	bl	6684 <boot_write_image_ok>
    591c:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    591e:	9801      	ldr	r0, [sp, #4]
    5920:	f000 fa56 	bl	5dd0 <flash_area_close>
    return rc;
}
    5924:	4620      	mov	r0, r4
    5926:	b004      	add	sp, #16
    5928:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    592a:	2401      	movs	r4, #1
    592c:	e7f7      	b.n	591e <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    592e:	2401      	movs	r4, #1
    5930:	e7f8      	b.n	5924 <swap_set_image_ok+0x2e>

00005932 <boot_status_internal_off>:
{
    5932:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5934:	7943      	ldrb	r3, [r0, #5]
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5936:	6804      	ldr	r4, [r0, #0]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5938:	2b01      	cmp	r3, #1
    593a:	bf0a      	itet	eq
    593c:	2201      	moveq	r2, #1
    593e:	2202      	movne	r2, #2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5940:	2500      	moveq	r5, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5942:	fb01 f202 	mul.w	r2, r1, r2
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5946:	f104 34ff 	add.w	r4, r4, #4294967295
    594a:	fb02 f204 	mul.w	r2, r2, r4
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    594e:	7903      	ldrb	r3, [r0, #4]
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5950:	bf18      	it	ne
    5952:	01cd      	lslne	r5, r1, #7
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5954:	3b01      	subs	r3, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5956:	fb01 2103 	mla	r1, r1, r3, r2
}
    595a:	1948      	adds	r0, r1, r5
    595c:	bd30      	pop	{r4, r5, pc}

0000595e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    595e:	4603      	mov	r3, r0
    5960:	b158      	cbz	r0, 597a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5962:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5964:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5968:	2a01      	cmp	r2, #1
    596a:	d003      	beq.n	5974 <sys_notify_validate+0x16>
    596c:	2a03      	cmp	r2, #3
    596e:	d104      	bne.n	597a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5970:	6802      	ldr	r2, [r0, #0]
    5972:	b112      	cbz	r2, 597a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5974:	2000      	movs	r0, #0
    5976:	6098      	str	r0, [r3, #8]
    5978:	4770      	bx	lr
		return -EINVAL;
    597a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    597e:	4770      	bx	lr

00005980 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5980:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5982:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    5984:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    5988:	2a03      	cmp	r2, #3
    598a:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    598e:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = 0;
    5990:	bf14      	ite	ne
    5992:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5994:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5996:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5998:	4770      	bx	lr

0000599a <arch_printk_char_out>:
}
    599a:	2000      	movs	r0, #0
    599c:	4770      	bx	lr

0000599e <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    599e:	b40f      	push	{r0, r1, r2, r3}
    59a0:	b507      	push	{r0, r1, r2, lr}
    59a2:	a904      	add	r1, sp, #16
    59a4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    59a8:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    59aa:	f7fb fd3b 	bl	1424 <vprintk>
	}
	va_end(ap);
}
    59ae:	b003      	add	sp, #12
    59b0:	f85d eb04 	ldr.w	lr, [sp], #4
    59b4:	b004      	add	sp, #16
    59b6:	4770      	bx	lr

000059b8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    59b8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    59ba:	f013 0307 	ands.w	r3, r3, #7
    59be:	d105      	bne.n	59cc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    59c0:	6803      	ldr	r3, [r0, #0]
    59c2:	2b00      	cmp	r3, #0
		evt = EVT_START;
    59c4:	bf0c      	ite	eq
    59c6:	2000      	moveq	r0, #0
    59c8:	2003      	movne	r0, #3
    59ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    59cc:	2b02      	cmp	r3, #2
    59ce:	d105      	bne.n	59dc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    59d0:	8b43      	ldrh	r3, [r0, #26]
    59d2:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    59d4:	bf14      	ite	ne
    59d6:	2000      	movne	r0, #0
    59d8:	2004      	moveq	r0, #4
    59da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    59dc:	2b01      	cmp	r3, #1
    59de:	d105      	bne.n	59ec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    59e0:	6803      	ldr	r3, [r0, #0]
    59e2:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    59e4:	bf0c      	ite	eq
    59e6:	2000      	moveq	r0, #0
    59e8:	2005      	movne	r0, #5
    59ea:	4770      	bx	lr
	int evt = EVT_NOP;
    59ec:	2000      	movs	r0, #0
}
    59ee:	4770      	bx	lr

000059f0 <notify_one>:
{
    59f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59f4:	460d      	mov	r5, r1
    59f6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    59f8:	4619      	mov	r1, r3
    59fa:	1d28      	adds	r0, r5, #4
{
    59fc:	4690      	mov	r8, r2
    59fe:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5a00:	f7ff ffbe 	bl	5980 <sys_notify_finalize>
	if (cb) {
    5a04:	4604      	mov	r4, r0
    5a06:	b138      	cbz	r0, 5a18 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5a08:	4633      	mov	r3, r6
    5a0a:	4642      	mov	r2, r8
    5a0c:	4629      	mov	r1, r5
    5a0e:	4638      	mov	r0, r7
    5a10:	46a4      	mov	ip, r4
}
    5a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5a16:	4760      	bx	ip
}
    5a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005a1c <transition_complete>:
{
    5a1c:	b410      	push	{r4}
    5a1e:	f04f 0420 	mov.w	r4, #32
    5a22:	f3ef 8211 	mrs	r2, BASEPRI
    5a26:	f384 8811 	msr	BASEPRI, r4
    5a2a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5a2e:	6141      	str	r1, [r0, #20]
}
    5a30:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5a32:	2101      	movs	r1, #1
    5a34:	f7fb bd04 	b.w	1440 <process_event>

00005a38 <validate_args>:
{
    5a38:	b510      	push	{r4, lr}
    5a3a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5a3c:	b140      	cbz	r0, 5a50 <validate_args+0x18>
    5a3e:	b139      	cbz	r1, 5a50 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5a40:	1d08      	adds	r0, r1, #4
    5a42:	f7ff ff8c 	bl	595e <sys_notify_validate>
	if ((rv == 0)
    5a46:	b928      	cbnz	r0, 5a54 <validate_args+0x1c>
	    && ((cli->notify.flags
    5a48:	68a3      	ldr	r3, [r4, #8]
    5a4a:	f033 0303 	bics.w	r3, r3, #3
    5a4e:	d001      	beq.n	5a54 <validate_args+0x1c>
		rv = -EINVAL;
    5a50:	f06f 0015 	mvn.w	r0, #21
}
    5a54:	bd10      	pop	{r4, pc}

00005a56 <onoff_manager_init>:
{
    5a56:	b538      	push	{r3, r4, r5, lr}
    5a58:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5a5a:	4605      	mov	r5, r0
    5a5c:	b158      	cbz	r0, 5a76 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5a5e:	b151      	cbz	r1, 5a76 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5a60:	680b      	ldr	r3, [r1, #0]
    5a62:	b143      	cbz	r3, 5a76 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5a64:	684b      	ldr	r3, [r1, #4]
    5a66:	b133      	cbz	r3, 5a76 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5a68:	221c      	movs	r2, #28
    5a6a:	2100      	movs	r1, #0
    5a6c:	f000 fb3a 	bl	60e4 <memset>
	return 0;
    5a70:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5a72:	612c      	str	r4, [r5, #16]
}
    5a74:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5a76:	f06f 0015 	mvn.w	r0, #21
    5a7a:	e7fb      	b.n	5a74 <onoff_manager_init+0x1e>

00005a7c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5a7c:	b570      	push	{r4, r5, r6, lr}
    5a7e:	4604      	mov	r4, r0
    5a80:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5a82:	f7ff ffd9 	bl	5a38 <validate_args>

	if (rv < 0) {
    5a86:	1e05      	subs	r5, r0, #0
    5a88:	db31      	blt.n	5aee <onoff_request+0x72>
    5a8a:	f04f 0320 	mov.w	r3, #32
    5a8e:	f3ef 8111 	mrs	r1, BASEPRI
    5a92:	f383 8811 	msr	BASEPRI, r3
    5a96:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5a9a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    5a9e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5aa0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    5aa2:	42ab      	cmp	r3, r5
    5aa4:	f000 0207 	and.w	r2, r0, #7
    5aa8:	d02e      	beq.n	5b08 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    5aaa:	2a02      	cmp	r2, #2
    5aac:	d10e      	bne.n	5acc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    5aae:	3301      	adds	r3, #1
    5ab0:	8363      	strh	r3, [r4, #26]
	rv = state;
    5ab2:	4615      	mov	r5, r2
		notify = true;
    5ab4:	2301      	movs	r3, #1
	__asm__ volatile(
    5ab6:	f381 8811 	msr	BASEPRI, r1
    5aba:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5abe:	b1b3      	cbz	r3, 5aee <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    5ac0:	2300      	movs	r3, #0
    5ac2:	4631      	mov	r1, r6
    5ac4:	4620      	mov	r0, r4
    5ac6:	f7ff ff93 	bl	59f0 <notify_one>
    5aca:	e010      	b.n	5aee <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5acc:	0783      	lsls	r3, r0, #30
    5ace:	d001      	beq.n	5ad4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    5ad0:	2a06      	cmp	r2, #6
    5ad2:	d10e      	bne.n	5af2 <onoff_request+0x76>
	parent->next = child;
    5ad4:	2300      	movs	r3, #0
    5ad6:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    5ad8:	6863      	ldr	r3, [r4, #4]
    5ada:	b993      	cbnz	r3, 5b02 <onoff_request+0x86>
	list->head = node;
    5adc:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5ae0:	4615      	mov	r5, r2
    5ae2:	b962      	cbnz	r2, 5afe <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    5ae4:	460a      	mov	r2, r1
    5ae6:	4620      	mov	r0, r4
    5ae8:	2102      	movs	r1, #2
    5aea:	f7fb fca9 	bl	1440 <process_event>
		}
	}

	return rv;
}
    5aee:	4628      	mov	r0, r5
    5af0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    5af2:	2a05      	cmp	r2, #5
    5af4:	bf0c      	ite	eq
    5af6:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    5afa:	f06f 0504 	mvnne.w	r5, #4
    5afe:	2300      	movs	r3, #0
    5b00:	e7d9      	b.n	5ab6 <onoff_request+0x3a>
	parent->next = child;
    5b02:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5b04:	6066      	str	r6, [r4, #4]
}
    5b06:	e7eb      	b.n	5ae0 <onoff_request+0x64>
		rv = -EAGAIN;
    5b08:	f06f 050a 	mvn.w	r5, #10
    5b0c:	e7f7      	b.n	5afe <onoff_request+0x82>

00005b0e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    5b0e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    5b10:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    5b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    5b18:	bf2c      	ite	cs
    5b1a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    5b1e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    5b22:	4770      	bx	lr

00005b24 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    5b24:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    5b28:	6880      	ldr	r0, [r0, #8]
    5b2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    5b2e:	bf2c      	ite	cs
    5b30:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    5b34:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    5b38:	4770      	bx	lr

00005b3a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    5b3a:	2201      	movs	r2, #1
{
    5b3c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    5b3e:	f7ff ffe6 	bl	5b0e <chunk_field>
}
    5b42:	0840      	lsrs	r0, r0, #1
    5b44:	bd08      	pop	{r3, pc}

00005b46 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    5b46:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    5b48:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    5b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5b50:	d308      	bcc.n	5b64 <set_chunk_used+0x1e>
		if (used) {
    5b52:	684b      	ldr	r3, [r1, #4]
    5b54:	b11a      	cbz	r2, 5b5e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    5b56:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5b5a:	604b      	str	r3, [r1, #4]
    5b5c:	4770      	bx	lr
    5b5e:	f023 0301 	bic.w	r3, r3, #1
    5b62:	e7fa      	b.n	5b5a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    5b64:	884b      	ldrh	r3, [r1, #2]
    5b66:	b11a      	cbz	r2, 5b70 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    5b68:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5b6c:	804b      	strh	r3, [r1, #2]
		}
	}
}
    5b6e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5b70:	f023 0301 	bic.w	r3, r3, #1
    5b74:	e7fa      	b.n	5b6c <set_chunk_used+0x26>

00005b76 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    5b76:	0053      	lsls	r3, r2, #1
    5b78:	2201      	movs	r2, #1
    5b7a:	f7ff bfd3 	b.w	5b24 <chunk_set>

00005b7e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    5b7e:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5b80:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5b82:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    5b86:	bf2c      	ite	cs
    5b88:	2002      	movcs	r0, #2
    5b8a:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5b8c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    5b8e:	fab0 f080 	clz	r0, r0
}
    5b92:	f1c0 001f 	rsb	r0, r0, #31
    5b96:	4770      	bx	lr

00005b98 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    5b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b9c:	4604      	mov	r4, r0
    5b9e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    5ba0:	f7ff ffcb 	bl	5b3a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    5ba4:	68a3      	ldr	r3, [r4, #8]
    5ba6:	4601      	mov	r1, r0
    5ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5bac:	d301      	bcc.n	5bb2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    5bae:	2801      	cmp	r0, #1
    5bb0:	d035      	beq.n	5c1e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    5bb2:	4620      	mov	r0, r4
    5bb4:	f7ff ffe3 	bl	5b7e <bucket_idx>
	if (b->next == 0U) {
    5bb8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    5bbc:	6916      	ldr	r6, [r2, #16]
    5bbe:	b99e      	cbnz	r6, 5be8 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    5bc0:	2301      	movs	r3, #1
    5bc2:	fa03 f000 	lsl.w	r0, r3, r0
    5bc6:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    5bc8:	4629      	mov	r1, r5
    5bca:	4303      	orrs	r3, r0
    5bcc:	60e3      	str	r3, [r4, #12]
    5bce:	4620      	mov	r0, r4
		b->next = c;
    5bd0:	6115      	str	r5, [r2, #16]
    5bd2:	462b      	mov	r3, r5
    5bd4:	2202      	movs	r2, #2
    5bd6:	f7ff ffa5 	bl	5b24 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    5bda:	2203      	movs	r2, #3
    5bdc:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    5bde:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    5be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5be4:	f7ff bf9e 	b.w	5b24 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    5be8:	2202      	movs	r2, #2
    5bea:	4631      	mov	r1, r6
    5bec:	4620      	mov	r0, r4
    5bee:	f7ff ff8e 	bl	5b0e <chunk_field>
    5bf2:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    5bf4:	4603      	mov	r3, r0
    5bf6:	2202      	movs	r2, #2
    5bf8:	4629      	mov	r1, r5
    5bfa:	4620      	mov	r0, r4
    5bfc:	f7ff ff92 	bl	5b24 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    5c00:	4633      	mov	r3, r6
    5c02:	2203      	movs	r2, #3
    5c04:	4629      	mov	r1, r5
    5c06:	4620      	mov	r0, r4
    5c08:	f7ff ff8c 	bl	5b24 <chunk_set>
    5c0c:	2203      	movs	r2, #3
    5c0e:	4639      	mov	r1, r7
    5c10:	462b      	mov	r3, r5
    5c12:	4620      	mov	r0, r4
    5c14:	f7ff ff86 	bl	5b24 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    5c18:	2202      	movs	r2, #2
    5c1a:	4631      	mov	r1, r6
    5c1c:	e7df      	b.n	5bde <free_list_add+0x46>
    5c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005c22 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    5c22:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    5c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c28:	bf2c      	ite	cs
    5c2a:	2508      	movcs	r5, #8
    5c2c:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    5c2e:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    5c30:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
    5c32:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5c34:	1dcc      	adds	r4, r1, #7
    5c36:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
    5c3a:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
    5c3c:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    5c40:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    5c42:	440d      	add	r5, r1
    5c44:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5c48:	1b2d      	subs	r5, r5, r4
    5c4a:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5c4c:	4629      	mov	r1, r5
    5c4e:	4620      	mov	r0, r4
	h->len = buf_sz;
    5c50:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    5c52:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5c54:	f7ff ff93 	bl	5b7e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    5c58:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5c5a:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    5c5c:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5c5e:	361b      	adds	r6, #27
    5c60:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    5c62:	f104 0210 	add.w	r2, r4, #16
    5c66:	428b      	cmp	r3, r1
    5c68:	db29      	blt.n	5cbe <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    5c6a:	4632      	mov	r2, r6
    5c6c:	4620      	mov	r0, r4
    5c6e:	2100      	movs	r1, #0
    5c70:	f7ff ff81 	bl	5b76 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    5c74:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    5c76:	4620      	mov	r0, r4
    5c78:	2201      	movs	r2, #1
    5c7a:	2100      	movs	r1, #0
    5c7c:	f7ff ff63 	bl	5b46 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    5c80:	463a      	mov	r2, r7
    5c82:	4631      	mov	r1, r6
    5c84:	f7ff ff77 	bl	5b76 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    5c88:	4633      	mov	r3, r6
    5c8a:	4631      	mov	r1, r6
    5c8c:	4620      	mov	r0, r4
    5c8e:	2200      	movs	r2, #0
    5c90:	f7ff ff48 	bl	5b24 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    5c94:	4629      	mov	r1, r5
    5c96:	4620      	mov	r0, r4
    5c98:	2200      	movs	r2, #0
    5c9a:	f7ff ff6c 	bl	5b76 <set_chunk_size>
    5c9e:	463b      	mov	r3, r7
    5ca0:	4629      	mov	r1, r5
    5ca2:	4620      	mov	r0, r4
    5ca4:	2200      	movs	r2, #0
    5ca6:	f7ff ff3d 	bl	5b24 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    5caa:	4629      	mov	r1, r5
    5cac:	4620      	mov	r0, r4
    5cae:	2201      	movs	r2, #1
    5cb0:	f7ff ff49 	bl	5b46 <set_chunk_used>

	free_list_add(h, chunk0_size);
    5cb4:	4631      	mov	r1, r6
}
    5cb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    5cba:	f7ff bf6d 	b.w	5b98 <free_list_add>
		h->buckets[i].next = 0;
    5cbe:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    5cc2:	3301      	adds	r3, #1
    5cc4:	e7cf      	b.n	5c66 <sys_heap_init+0x44>

00005cc6 <print_digits>:
{
    5cc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cca:	b08b      	sub	sp, #44	; 0x2c
    5ccc:	469b      	mov	fp, r3
    5cce:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
    5cd2:	460e      	mov	r6, r1
    5cd4:	9303      	str	r3, [sp, #12]
		char c = num % base;
    5cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
{
    5cd8:	4692      	mov	sl, r2
		char c = num % base;
    5cda:	4619      	mov	r1, r3
    5cdc:	2200      	movs	r2, #0
{
    5cde:	4605      	mov	r5, r0
	int i = 0;
    5ce0:	2400      	movs	r4, #0
		char c = num % base;
    5ce2:	e9cd 1200 	strd	r1, r2, [sp]
{
    5ce6:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    5cea:	9f18      	ldr	r7, [sp, #96]	; 0x60
    5cec:	f10d 0910 	add.w	r9, sp, #16
		char c = num % base;
    5cf0:	4650      	mov	r0, sl
    5cf2:	e9dd 2300 	ldrd	r2, r3, [sp]
    5cf6:	4659      	mov	r1, fp
    5cf8:	f7fa fa2c 	bl	154 <__aeabi_uldivmod>
    5cfc:	b2d3      	uxtb	r3, r2
		if (c >= 10) {
    5cfe:	2b09      	cmp	r3, #9
			c += 'a' - '0' - 10;
    5d00:	bf84      	itt	hi
    5d02:	3227      	addhi	r2, #39	; 0x27
    5d04:	b2d3      	uxtbhi	r3, r2
		buf[i++] = c + '0';
    5d06:	f103 0230 	add.w	r2, r3, #48	; 0x30
    5d0a:	f809 2b01 	strb.w	r2, [r9], #1
	} while (num);
    5d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
    5d12:	459b      	cmp	fp, r3
    5d14:	bf08      	it	eq
    5d16:	4592      	cmpeq	sl, r2
		buf[i++] = c + '0';
    5d18:	f104 0401 	add.w	r4, r4, #1
	} while (num);
    5d1c:	d223      	bcs.n	5d66 <print_digits+0xa0>
	int pad = MAX(min_width - i, 0);
    5d1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5d20:	eba3 0a04 	sub.w	sl, r3, r4
    5d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    5d28:	46d3      	mov	fp, sl
    5d2a:	ebaa 090b 	sub.w	r9, sl, fp
	for (/**/; pad > 0 && pad_before; pad--) {
    5d2e:	f1bb 0f00 	cmp.w	fp, #0
    5d32:	d001      	beq.n	5d38 <print_digits+0x72>
    5d34:	9b03      	ldr	r3, [sp, #12]
    5d36:	b9cb      	cbnz	r3, 5d6c <print_digits+0xa6>
		buf[i++] = c + '0';
    5d38:	46a2      	mov	sl, r4
		OUTC(buf[--i]);
    5d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
    5d3e:	ab04      	add	r3, sp, #16
    5d40:	4631      	mov	r1, r6
    5d42:	f813 000a 	ldrb.w	r0, [r3, sl]
    5d46:	47a8      	blx	r5
	} while (i > 0);
    5d48:	f1ba 0f00 	cmp.w	sl, #0
    5d4c:	d1f5      	bne.n	5d3a <print_digits+0x74>
    5d4e:	46da      	mov	sl, fp
	for (/**/; pad > 0; pad--) {
    5d50:	f1ba 0f00 	cmp.w	sl, #0
    5d54:	d110      	bne.n	5d78 <print_digits+0xb2>
	*countp += count;
    5d56:	683b      	ldr	r3, [r7, #0]
    5d58:	441c      	add	r4, r3
    5d5a:	444c      	add	r4, r9
    5d5c:	445c      	add	r4, fp
    5d5e:	603c      	str	r4, [r7, #0]
}
    5d60:	b00b      	add	sp, #44	; 0x2c
    5d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		num /= base;
    5d66:	4682      	mov	sl, r0
    5d68:	468b      	mov	fp, r1
    5d6a:	e7c1      	b.n	5cf0 <print_digits+0x2a>
		OUTC(pad_char);
    5d6c:	4631      	mov	r1, r6
    5d6e:	4640      	mov	r0, r8
    5d70:	47a8      	blx	r5
	for (/**/; pad > 0 && pad_before; pad--) {
    5d72:	f10b 3bff 	add.w	fp, fp, #4294967295
    5d76:	e7d8      	b.n	5d2a <print_digits+0x64>
		OUTC(pad_char);
    5d78:	4631      	mov	r1, r6
    5d7a:	4640      	mov	r0, r8
    5d7c:	47a8      	blx	r5
	for (/**/; pad > 0; pad--) {
    5d7e:	f10a 3aff 	add.w	sl, sl, #4294967295
    5d82:	e7e5      	b.n	5d50 <print_digits+0x8a>

00005d84 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5d84:	4770      	bx	lr

00005d86 <z_platform_init>:
	SystemInit();
    5d86:	f7fd bbeb 	b.w	3560 <SystemInit>

00005d8a <z_impl_flash_write_protection_set>:
						    bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
    5d8a:	6883      	ldr	r3, [r0, #8]
    5d8c:	68db      	ldr	r3, [r3, #12]
    5d8e:	4718      	bx	r3

00005d90 <device_get_binding>:
    5d90:	f7fe bc94 	b.w	46bc <z_impl_device_get_binding>

00005d94 <get_sectors_cb>:
{
    5d94:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    5d96:	6802      	ldr	r2, [r0, #0]
    5d98:	684c      	ldr	r4, [r1, #4]
    5d9a:	42a2      	cmp	r2, r4
    5d9c:	d316      	bcc.n	5dcc <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    5d9e:	688b      	ldr	r3, [r1, #8]
    5da0:	4423      	add	r3, r4
    5da2:	429a      	cmp	r2, r3
    5da4:	d206      	bcs.n	5db4 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    5da6:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    5daa:	42ab      	cmp	r3, r5
    5dac:	d304      	bcc.n	5db8 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    5dae:	f06f 030b 	mvn.w	r3, #11
    5db2:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    5db4:	2000      	movs	r0, #0
    5db6:	e00a      	b.n	5dce <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5db8:	68cd      	ldr	r5, [r1, #12]
    5dba:	1b12      	subs	r2, r2, r4
    5dbc:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    5dc0:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5dc2:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    5dc6:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    5dc8:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    5dca:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    5dcc:	2001      	movs	r0, #1
}
    5dce:	bd70      	pop	{r4, r5, r6, pc}

00005dd0 <flash_area_close>:
}
    5dd0:	4770      	bx	lr

00005dd2 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    5dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dd6:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    5dd8:	6883      	ldr	r3, [r0, #8]
{
    5dda:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5ddc:	428b      	cmp	r3, r1
{
    5dde:	460c      	mov	r4, r1
    5de0:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5de2:	d30f      	bcc.n	5e04 <flash_area_read+0x32>
    5de4:	1872      	adds	r2, r6, r1
    5de6:	4293      	cmp	r3, r2
    5de8:	d30c      	bcc.n	5e04 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    5dea:	68c0      	ldr	r0, [r0, #12]
    5dec:	f7ff ffd0 	bl	5d90 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    5df0:	6869      	ldr	r1, [r5, #4]
    5df2:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
    5df4:	6883      	ldr	r3, [r0, #8]
    5df6:	463a      	mov	r2, r7
    5df8:	681c      	ldr	r4, [r3, #0]
    5dfa:	4633      	mov	r3, r6
    5dfc:	46a4      	mov	ip, r4
}
    5dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5e02:	4760      	bx	ip
    5e04:	f06f 0015 	mvn.w	r0, #21
    5e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005e0c <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    5e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e10:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    5e12:	6883      	ldr	r3, [r0, #8]
{
    5e14:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5e16:	428b      	cmp	r3, r1
{
    5e18:	460d      	mov	r5, r1
    5e1a:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5e1c:	d31c      	bcc.n	5e58 <flash_area_write+0x4c>
    5e1e:	eb08 0201 	add.w	r2, r8, r1
    5e22:	4293      	cmp	r3, r2
    5e24:	d318      	bcc.n	5e58 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    5e26:	68c0      	ldr	r0, [r0, #12]
    5e28:	f7ff ffb2 	bl	5d90 <device_get_binding>
    5e2c:	4606      	mov	r6, r0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&enable, K_SYSCALL_FLASH_WRITE_PROTECTION_SET);
	}
#endif
	compiler_barrier();
	return z_impl_flash_write_protection_set(dev, enable);
    5e2e:	2100      	movs	r1, #0
    5e30:	f7ff ffab 	bl	5d8a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    5e34:	4604      	mov	r4, r0
    5e36:	b960      	cbnz	r0, 5e52 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    5e38:	6879      	ldr	r1, [r7, #4]
    5e3a:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
    5e3c:	68b3      	ldr	r3, [r6, #8]
    5e3e:	464a      	mov	r2, r9
    5e40:	685c      	ldr	r4, [r3, #4]
    5e42:	4630      	mov	r0, r6
    5e44:	4643      	mov	r3, r8
    5e46:	47a0      	blx	r4
    5e48:	4604      	mov	r4, r0
    5e4a:	2101      	movs	r1, #1
    5e4c:	4630      	mov	r0, r6
    5e4e:	f7ff ff9c 	bl	5d8a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    5e52:	4620      	mov	r0, r4
    5e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    5e58:	f06f 0415 	mvn.w	r4, #21
    5e5c:	e7f9      	b.n	5e52 <flash_area_write+0x46>

00005e5e <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    5e5e:	6883      	ldr	r3, [r0, #8]
{
    5e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5e64:	428b      	cmp	r3, r1
{
    5e66:	4607      	mov	r7, r0
    5e68:	460d      	mov	r5, r1
    5e6a:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5e6c:	d31a      	bcc.n	5ea4 <flash_area_erase+0x46>
    5e6e:	440a      	add	r2, r1
    5e70:	4293      	cmp	r3, r2
    5e72:	d317      	bcc.n	5ea4 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    5e74:	68c0      	ldr	r0, [r0, #12]
    5e76:	f7ff ff8b 	bl	5d90 <device_get_binding>
    5e7a:	4606      	mov	r6, r0
    5e7c:	2100      	movs	r1, #0
    5e7e:	f7ff ff84 	bl	5d8a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    5e82:	4604      	mov	r4, r0
    5e84:	b958      	cbnz	r0, 5e9e <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    5e86:	6879      	ldr	r1, [r7, #4]
    5e88:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
    5e8a:	68b3      	ldr	r3, [r6, #8]
    5e8c:	4642      	mov	r2, r8
    5e8e:	4630      	mov	r0, r6
    5e90:	689b      	ldr	r3, [r3, #8]
    5e92:	4798      	blx	r3
    5e94:	4604      	mov	r4, r0
    5e96:	2101      	movs	r1, #1
    5e98:	4630      	mov	r0, r6
    5e9a:	f7ff ff76 	bl	5d8a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    5e9e:	4620      	mov	r0, r4
    5ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    5ea4:	f06f 0415 	mvn.w	r4, #21
    5ea8:	e7f9      	b.n	5e9e <flash_area_erase+0x40>

00005eaa <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    5eaa:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    5eac:	68c0      	ldr	r0, [r0, #12]
    5eae:	f7ff ff6f 	bl	5d90 <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    5eb2:	6883      	ldr	r3, [r0, #8]
    5eb4:	691b      	ldr	r3, [r3, #16]
    5eb6:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    5eb8:	7800      	ldrb	r0, [r0, #0]
    5eba:	bd08      	pop	{r3, pc}

00005ebc <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    5ebc:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    5ebe:	68c0      	ldr	r0, [r0, #12]
    5ec0:	f7ff ff66 	bl	5d90 <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    5ec4:	6883      	ldr	r3, [r0, #8]
    5ec6:	691b      	ldr	r3, [r3, #16]
    5ec8:	4798      	blx	r3

	return param->erase_value;
}
    5eca:	7900      	ldrb	r0, [r0, #4]
    5ecc:	bd08      	pop	{r3, pc}

00005ece <uart_poll_out>:
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5ece:	6883      	ldr	r3, [r0, #8]
    5ed0:	685b      	ldr	r3, [r3, #4]
    5ed2:	4718      	bx	r3

00005ed4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5ed4:	b2cb      	uxtb	r3, r1
    5ed6:	210c      	movs	r1, #12
    5ed8:	68c2      	ldr	r2, [r0, #12]
    5eda:	fb03 2101 	mla	r1, r3, r1, r2
    5ede:	6f88      	ldr	r0, [r1, #120]	; 0x78
}
    5ee0:	f000 0007 	and.w	r0, r0, #7
    5ee4:	4770      	bx	lr

00005ee6 <set_off_state>:
	__asm__ volatile(
    5ee6:	f04f 0320 	mov.w	r3, #32
    5eea:	f3ef 8211 	mrs	r2, BASEPRI
    5eee:	f383 8811 	msr	BASEPRI, r3
    5ef2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5ef6:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5ef8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5efc:	d001      	beq.n	5f02 <set_off_state+0x1c>
    5efe:	428b      	cmp	r3, r1
    5f00:	d107      	bne.n	5f12 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5f02:	2301      	movs	r3, #1
    5f04:	6003      	str	r3, [r0, #0]
	int err = 0;
    5f06:	2000      	movs	r0, #0
	__asm__ volatile(
    5f08:	f382 8811 	msr	BASEPRI, r2
    5f0c:	f3bf 8f6f 	isb	sy
}
    5f10:	4770      	bx	lr
		err = -EPERM;
    5f12:	f04f 30ff 	mov.w	r0, #4294967295
    5f16:	e7f7      	b.n	5f08 <set_off_state+0x22>

00005f18 <set_starting_state>:
{
    5f18:	b510      	push	{r4, lr}
	__asm__ volatile(
    5f1a:	f04f 0320 	mov.w	r3, #32
    5f1e:	f3ef 8211 	mrs	r2, BASEPRI
    5f22:	f383 8811 	msr	BASEPRI, r3
    5f26:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5f2a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5f2c:	f003 0407 	and.w	r4, r3, #7
    5f30:	2c01      	cmp	r4, #1
    5f32:	d106      	bne.n	5f42 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5f34:	6001      	str	r1, [r0, #0]
	int err = 0;
    5f36:	2000      	movs	r0, #0
	__asm__ volatile(
    5f38:	f382 8811 	msr	BASEPRI, r2
    5f3c:	f3bf 8f6f 	isb	sy
}
    5f40:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5f46:	428b      	cmp	r3, r1
		err = -EALREADY;
    5f48:	bf14      	ite	ne
    5f4a:	f04f 30ff 	movne.w	r0, #4294967295
    5f4e:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    5f52:	e7f1      	b.n	5f38 <set_starting_state+0x20>

00005f54 <set_on_state>:
	__asm__ volatile(
    5f54:	f04f 0320 	mov.w	r3, #32
    5f58:	f3ef 8211 	mrs	r2, BASEPRI
    5f5c:	f383 8811 	msr	BASEPRI, r3
    5f60:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5f64:	6803      	ldr	r3, [r0, #0]
    5f66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5f6a:	f043 0302 	orr.w	r3, r3, #2
    5f6e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5f70:	f382 8811 	msr	BASEPRI, r2
    5f74:	f3bf 8f6f 	isb	sy
}
    5f78:	4770      	bx	lr

00005f7a <api_blocking_start>:
}
    5f7a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5f7e:	4770      	bx	lr

00005f80 <onoff_started_callback>:
{
    5f80:	b410      	push	{r4}
	notify(mgr, 0);
    5f82:	241c      	movs	r4, #28
	return &data->mgr[type];
    5f84:	68c0      	ldr	r0, [r0, #12]
    5f86:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5f88:	fb03 0004 	mla	r0, r3, r4, r0
    5f8c:	2100      	movs	r1, #0
}
    5f8e:	bc10      	pop	{r4}
	notify(mgr, 0);
    5f90:	4710      	bx	r2

00005f92 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5f92:	2003      	movs	r0, #3
    5f94:	f7fd bb76 	b.w	3684 <nrfx_clock_start>

00005f98 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    5f98:	2002      	movs	r0, #2
    5f9a:	f7fd bb73 	b.w	3684 <nrfx_clock_start>

00005f9e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5f9e:	2000      	movs	r0, #0
    5fa0:	f7fd bb70 	b.w	3684 <nrfx_clock_start>

00005fa4 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5fa4:	2003      	movs	r0, #3
    5fa6:	f7fd bbc1 	b.w	372c <nrfx_clock_stop>

00005faa <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    5faa:	2002      	movs	r0, #2
    5fac:	f7fd bbbe 	b.w	372c <nrfx_clock_stop>

00005fb0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5fb0:	2000      	movs	r0, #0
    5fb2:	f7fd bbbb 	b.w	372c <nrfx_clock_stop>

00005fb6 <api_stop>:
{
    5fb6:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    5fb8:	240c      	movs	r4, #12
    5fba:	b2c9      	uxtb	r1, r1
    5fbc:	434c      	muls	r4, r1
{
    5fbe:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    5fc0:	68c0      	ldr	r0, [r0, #12]
    5fc2:	f104 0378 	add.w	r3, r4, #120	; 0x78
    5fc6:	2180      	movs	r1, #128	; 0x80
    5fc8:	4418      	add	r0, r3
    5fca:	f7ff ff8c 	bl	5ee6 <set_off_state>
	if (err < 0) {
    5fce:	2800      	cmp	r0, #0
    5fd0:	db04      	blt.n	5fdc <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    5fd2:	6869      	ldr	r1, [r5, #4]
    5fd4:	440c      	add	r4, r1
    5fd6:	6863      	ldr	r3, [r4, #4]
    5fd8:	4798      	blx	r3
	return 0;
    5fda:	2000      	movs	r0, #0
}
    5fdc:	bd38      	pop	{r3, r4, r5, pc}

00005fde <api_start>:
{
    5fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    5fe2:	240c      	movs	r4, #12
    5fe4:	b2c9      	uxtb	r1, r1
    5fe6:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5fe8:	68c5      	ldr	r5, [r0, #12]
{
    5fea:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    5fec:	f104 0078 	add.w	r0, r4, #120	; 0x78
    5ff0:	2180      	movs	r1, #128	; 0x80
    5ff2:	4428      	add	r0, r5
{
    5ff4:	4690      	mov	r8, r2
    5ff6:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    5ff8:	f7ff ff8e 	bl	5f18 <set_starting_state>
	if (err < 0) {
    5ffc:	2800      	cmp	r0, #0
    5ffe:	db06      	blt.n	600e <api_start+0x30>
	subdata->cb = cb;
    6000:	4425      	add	r5, r4
	subdata->user_data = user_data;
    6002:	e9c5 871c 	strd	r8, r7, [r5, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    6006:	6873      	ldr	r3, [r6, #4]
    6008:	591b      	ldr	r3, [r3, r4]
    600a:	4798      	blx	r3
	return 0;
    600c:	2000      	movs	r0, #0
}
    600e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006012 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    6012:	4770      	bx	lr

00006014 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    6014:	4770      	bx	lr

00006016 <sys_clock_disable>:
    6016:	4770      	bx	lr

00006018 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    6018:	2000      	movs	r0, #0
    601a:	f7fb bd2b 	b.w	1a74 <sys_reboot>

0000601e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    601e:	2100      	movs	r1, #0
    6020:	2001      	movs	r0, #1
    6022:	f7fc b983 	b.w	232c <z_arm_fatal_error>

00006026 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    6026:	6e83      	ldr	r3, [r0, #104]	; 0x68
    6028:	f383 880b 	msr	PSPLIM, r3
}
    602c:	4770      	bx	lr

0000602e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    602e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6030:	6800      	ldr	r0, [r0, #0]
    6032:	f7fc b97b 	b.w	232c <z_arm_fatal_error>

00006036 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6036:	b508      	push	{r3, lr}
	handler();
    6038:	f7fc f9a6 	bl	2388 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    603c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6040:	f7fc bbcc 	b.w	27dc <z_arm_exc_exit>

00006044 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    6044:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    6048:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    604c:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    604e:	bf08      	it	eq
    6050:	f06f 0015 	mvneq.w	r0, #21
    6054:	4770      	bx	lr

00006056 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6056:	1e43      	subs	r3, r0, #1
    6058:	3901      	subs	r1, #1
    605a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    605e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    6062:	4282      	cmp	r2, r0
    6064:	d101      	bne.n	606a <strcmp+0x14>
    6066:	2a00      	cmp	r2, #0
    6068:	d1f7      	bne.n	605a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    606a:	1a10      	subs	r0, r2, r0
    606c:	4770      	bx	lr

0000606e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    606e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    6070:	b15a      	cbz	r2, 608a <memcmp+0x1c>
    6072:	3901      	subs	r1, #1
    6074:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    6076:	f810 2b01 	ldrb.w	r2, [r0], #1
    607a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    607e:	42a0      	cmp	r0, r4
    6080:	d001      	beq.n	6086 <memcmp+0x18>
    6082:	429a      	cmp	r2, r3
    6084:	d0f7      	beq.n	6076 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    6086:	1ad0      	subs	r0, r2, r3
}
    6088:	bd10      	pop	{r4, pc}
		return 0;
    608a:	4610      	mov	r0, r2
    608c:	e7fc      	b.n	6088 <memcmp+0x1a>

0000608e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    608e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    6090:	ea81 0400 	eor.w	r4, r1, r0
    6094:	07a5      	lsls	r5, r4, #30
    6096:	4603      	mov	r3, r0
    6098:	d00b      	beq.n	60b2 <memcpy+0x24>
    609a:	3b01      	subs	r3, #1
    609c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    609e:	4291      	cmp	r1, r2
    60a0:	d11b      	bne.n	60da <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    60a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    60a4:	2a00      	cmp	r2, #0
    60a6:	d0fc      	beq.n	60a2 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    60a8:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    60ac:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    60ae:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    60b2:	079c      	lsls	r4, r3, #30
    60b4:	d1f6      	bne.n	60a4 <memcpy+0x16>
    60b6:	f022 0403 	bic.w	r4, r2, #3
    60ba:	1f1d      	subs	r5, r3, #4
    60bc:	0896      	lsrs	r6, r2, #2
    60be:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    60c0:	42b9      	cmp	r1, r7
    60c2:	d105      	bne.n	60d0 <memcpy+0x42>
    60c4:	f06f 0503 	mvn.w	r5, #3
    60c8:	4423      	add	r3, r4
    60ca:	fb05 2206 	mla	r2, r5, r6, r2
    60ce:	e7e4      	b.n	609a <memcpy+0xc>
			*(d_word++) = *(s_word++);
    60d0:	f851 cb04 	ldr.w	ip, [r1], #4
    60d4:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    60d8:	e7f2      	b.n	60c0 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    60da:	f811 4b01 	ldrb.w	r4, [r1], #1
    60de:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    60e2:	e7dc      	b.n	609e <memcpy+0x10>

000060e4 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    60e4:	4603      	mov	r3, r0
{
    60e6:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    60e8:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    60ea:	079c      	lsls	r4, r3, #30
    60ec:	d111      	bne.n	6112 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    60ee:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    60f2:	f022 0603 	bic.w	r6, r2, #3
    60f6:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    60fa:	441e      	add	r6, r3
    60fc:	0894      	lsrs	r4, r2, #2
    60fe:	42b3      	cmp	r3, r6
    6100:	d10d      	bne.n	611e <memset+0x3a>
    6102:	f06f 0503 	mvn.w	r5, #3
    6106:	fb05 2204 	mla	r2, r5, r4, r2
    610a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    610c:	4293      	cmp	r3, r2
    610e:	d109      	bne.n	6124 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6110:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    6112:	2a00      	cmp	r2, #0
    6114:	d0fc      	beq.n	6110 <memset+0x2c>
		*(d_byte++) = c_byte;
    6116:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    611a:	3a01      	subs	r2, #1
    611c:	e7e5      	b.n	60ea <memset+0x6>
		*(d_word++) = c_word;
    611e:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    6122:	e7ec      	b.n	60fe <memset+0x1a>
		*(d_byte++) = c_byte;
    6124:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6128:	e7f0      	b.n	610c <memset+0x28>

0000612a <_stdout_hook_default>:
}
    612a:	f04f 30ff 	mov.w	r0, #4294967295
    612e:	4770      	bx	lr

00006130 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    6130:	b570      	push	{r4, r5, r6, lr}
    6132:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6134:	6801      	ldr	r1, [r0, #0]
{
    6136:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6138:	b189      	cbz	r1, 615e <gpio_fire_callbacks+0x2e>
	return node->next;
    613a:	680c      	ldr	r4, [r1, #0]
    613c:	2c00      	cmp	r4, #0
    613e:	bf38      	it	cc
    6140:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    6142:	688a      	ldr	r2, [r1, #8]
    6144:	402a      	ands	r2, r5
    6146:	d002      	beq.n	614e <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6148:	4630      	mov	r0, r6
    614a:	684b      	ldr	r3, [r1, #4]
    614c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    614e:	b134      	cbz	r4, 615e <gpio_fire_callbacks+0x2e>
    6150:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6152:	4621      	mov	r1, r4
    6154:	2b00      	cmp	r3, #0
    6156:	bf38      	it	cc
    6158:	2300      	movcc	r3, #0
    615a:	461c      	mov	r4, r3
    615c:	e7f1      	b.n	6142 <gpio_fire_callbacks+0x12>
		}
	}
}
    615e:	bd70      	pop	{r4, r5, r6, pc}

00006160 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6160:	6843      	ldr	r3, [r0, #4]
}
    6162:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6164:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6166:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6168:	600b      	str	r3, [r1, #0]
}
    616a:	4770      	bx	lr

0000616c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    616c:	6843      	ldr	r3, [r0, #4]
    616e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6170:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6172:	4042      	eors	r2, r0
    6174:	400a      	ands	r2, r1
    6176:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6178:	605a      	str	r2, [r3, #4]
}
    617a:	2000      	movs	r0, #0
    617c:	4770      	bx	lr

0000617e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    617e:	6843      	ldr	r3, [r0, #4]
}
    6180:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6182:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6184:	6099      	str	r1, [r3, #8]
}
    6186:	4770      	bx	lr

00006188 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6188:	6843      	ldr	r3, [r0, #4]
}
    618a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    618c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    618e:	60d9      	str	r1, [r3, #12]
}
    6190:	4770      	bx	lr

00006192 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6192:	6843      	ldr	r3, [r0, #4]
}
    6194:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6196:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6198:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    619a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    619c:	6053      	str	r3, [r2, #4]
}
    619e:	4770      	bx	lr

000061a0 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    61a0:	68c3      	ldr	r3, [r0, #12]
{
    61a2:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    61a4:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    61a6:	b158      	cbz	r0, 61c0 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    61a8:	2400      	movs	r4, #0
    61aa:	4281      	cmp	r1, r0
    61ac:	d113      	bne.n	61d6 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    61ae:	6808      	ldr	r0, [r1, #0]
    61b0:	b95c      	cbnz	r4, 61ca <gpio_nrfx_manage_callback+0x2a>
    61b2:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    61b4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    61b6:	42a1      	cmp	r1, r4
    61b8:	d100      	bne.n	61bc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    61ba:	6098      	str	r0, [r3, #8]
	parent->next = child;
    61bc:	2000      	movs	r0, #0
    61be:	6008      	str	r0, [r1, #0]
	if (set) {
    61c0:	b972      	cbnz	r2, 61e0 <gpio_nrfx_manage_callback+0x40>
	return 0;
    61c2:	2000      	movs	r0, #0
}
    61c4:	bd30      	pop	{r4, r5, pc}
    61c6:	4628      	mov	r0, r5
    61c8:	e7ef      	b.n	61aa <gpio_nrfx_manage_callback+0xa>
    61ca:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    61cc:	6898      	ldr	r0, [r3, #8]
    61ce:	4281      	cmp	r1, r0
	list->tail = node;
    61d0:	bf08      	it	eq
    61d2:	609c      	streq	r4, [r3, #8]
}
    61d4:	e7f2      	b.n	61bc <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    61d6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    61d8:	4604      	mov	r4, r0
    61da:	2d00      	cmp	r5, #0
    61dc:	d1f3      	bne.n	61c6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    61de:	b13a      	cbz	r2, 61f0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    61e0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    61e2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    61e4:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    61e6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    61e8:	2800      	cmp	r0, #0
    61ea:	d1ea      	bne.n	61c2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    61ec:	6099      	str	r1, [r3, #8]
}
    61ee:	e7e9      	b.n	61c4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    61f0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    61f4:	e7e6      	b.n	61c4 <gpio_nrfx_manage_callback+0x24>

000061f6 <check_level_trigger_pins>:
{
    61f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
    61fa:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    61fc:	2700      	movs	r7, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    61fe:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    6200:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    6204:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    6206:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    620a:	430a      	orrs	r2, r1
    620c:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    6210:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    6214:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    6216:	6915      	ldr	r5, [r2, #16]
    6218:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    621a:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
    621e:	b914      	cbnz	r4, 6226 <check_level_trigger_pins+0x30>
}
    6220:	4628      	mov	r0, r5
    6222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    6226:	4234      	tst	r4, r6
    6228:	d00a      	beq.n	6240 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    622a:	f898 3008 	ldrb.w	r3, [r8, #8]
    622e:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    6232:	2100      	movs	r1, #0
    6234:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    6238:	f7fc fcd2 	bl	2be0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    623c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    6240:	3701      	adds	r7, #1
		bit <<= 1;
    6242:	0076      	lsls	r6, r6, #1
    6244:	e7eb      	b.n	621e <check_level_trigger_pins+0x28>

00006246 <cfg_level_pins>:
{
    6246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
    624a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    624c:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    624e:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    6250:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    6254:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    6256:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    625a:	4313      	orrs	r3, r2
    625c:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    6260:	b90c      	cbnz	r4, 6266 <cfg_level_pins+0x20>
}
    6262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    6266:	4226      	tst	r6, r4
    6268:	d010      	beq.n	628c <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    626a:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    626c:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    6270:	40e9      	lsrs	r1, r5
    6272:	f001 0101 	and.w	r1, r1, #1
    6276:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    627a:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    627e:	b2c9      	uxtb	r1, r1
    6280:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    6284:	f7fc fcac 	bl	2be0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    6288:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    628c:	3501      	adds	r5, #1
		bit <<= 1;
    628e:	0076      	lsls	r6, r6, #1
    6290:	e7e6      	b.n	6260 <cfg_level_pins+0x1a>

00006292 <flash_nrf_write_protection>:
}
    6292:	2000      	movs	r0, #0
    6294:	4770      	bx	lr

00006296 <is_regular_addr_valid>:
{
    6296:	b538      	push	{r3, r4, r5, lr}
    6298:	4604      	mov	r4, r0
    629a:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    629c:	f000 fa37 	bl	670e <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    62a0:	4284      	cmp	r4, r0
    62a2:	d209      	bcs.n	62b8 <is_regular_addr_valid+0x22>
    62a4:	2c00      	cmp	r4, #0
    62a6:	db07      	blt.n	62b8 <is_regular_addr_valid+0x22>
	    addr < 0 ||
    62a8:	42a8      	cmp	r0, r5
    62aa:	d305      	bcc.n	62b8 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    62ac:	442c      	add	r4, r5
	    len > flash_size ||
    62ae:	4284      	cmp	r4, r0
    62b0:	bf8c      	ite	hi
    62b2:	2000      	movhi	r0, #0
    62b4:	2001      	movls	r0, #1
}
    62b6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    62b8:	2000      	movs	r0, #0
    62ba:	e7fc      	b.n	62b6 <is_regular_addr_valid+0x20>

000062bc <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    62bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    62c0:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    62c2:	6883      	ldr	r3, [r0, #8]
{
    62c4:	b086      	sub	sp, #24
    62c6:	4688      	mov	r8, r1
    62c8:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    62ca:	695b      	ldr	r3, [r3, #20]
    62cc:	aa02      	add	r2, sp, #8
    62ce:	a901      	add	r1, sp, #4
    62d0:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    62d2:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    62d4:	4625      	mov	r5, r4
    62d6:	9b02      	ldr	r3, [sp, #8]
    62d8:	42ab      	cmp	r3, r5
    62da:	d802      	bhi.n	62e2 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    62dc:	b006      	add	sp, #24
    62de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    62e2:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    62e4:	9f01      	ldr	r7, [sp, #4]
    62e6:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    62ea:	687b      	ldr	r3, [r7, #4]
    62ec:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    62ee:	683a      	ldr	r2, [r7, #0]
    62f0:	eb0a 0306 	add.w	r3, sl, r6
    62f4:	42b2      	cmp	r2, r6
    62f6:	d802      	bhi.n	62fe <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    62f8:	469a      	mov	sl, r3
    62fa:	3501      	adds	r5, #1
    62fc:	e7eb      	b.n	62d6 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    62fe:	4649      	mov	r1, r9
    6300:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    6302:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6304:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6306:	47c0      	blx	r8
    6308:	2800      	cmp	r0, #0
    630a:	d0e7      	beq.n	62dc <flash_page_foreach+0x20>
			off += page_info.size;
    630c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    630e:	3601      	adds	r6, #1
			off += page_info.size;
    6310:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    6312:	e7ec      	b.n	62ee <flash_page_foreach+0x32>

00006314 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6314:	6843      	ldr	r3, [r0, #4]
{
    6316:	b410      	push	{r4}
	return config->uarte_regs;
    6318:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    631a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    631e:	05d2      	lsls	r2, r2, #23
    6320:	d518      	bpl.n	6354 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6322:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6326:	b1aa      	cbz	r2, 6354 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    6328:	f04f 0120 	mov.w	r1, #32
    632c:	f3ef 8211 	mrs	r2, BASEPRI
    6330:	f381 8811 	msr	BASEPRI, r1
    6334:	f3bf 8f6f 	isb	sy
    6338:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    633c:	b131      	cbz	r1, 634c <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    633e:	2100      	movs	r1, #0
    6340:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6344:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6348:	2101      	movs	r1, #1
    634a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    634c:	f382 8811 	msr	BASEPRI, r2
    6350:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    6354:	68c2      	ldr	r2, [r0, #12]
    6356:	68d2      	ldr	r2, [r2, #12]
    6358:	b15a      	cbz	r2, 6372 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    635a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    635e:	b151      	cbz	r1, 6376 <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
    6360:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
    6362:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    6364:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    6366:	b134      	cbz	r4, 6376 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
    6368:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    636c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    6370:	7391      	strb	r1, [r2, #14]
}
    6372:	bc10      	pop	{r4}
    6374:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6376:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    637a:	b121      	cbz	r1, 6386 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    637c:	2100      	movs	r1, #0
    637e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    6382:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    6386:	6813      	ldr	r3, [r2, #0]
    6388:	2b00      	cmp	r3, #0
    638a:	d0f2      	beq.n	6372 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    638c:	6851      	ldr	r1, [r2, #4]
}
    638e:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6390:	4718      	bx	r3

00006392 <uarte_nrfx_config_get>:
{
    6392:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6394:	68c2      	ldr	r2, [r0, #12]
    6396:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    639a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    639e:	2000      	movs	r0, #0
    63a0:	4770      	bx	lr

000063a2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    63a2:	6843      	ldr	r3, [r0, #4]
    63a4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    63a6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    63aa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    63ae:	4770      	bx	lr

000063b0 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    63b0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    63b2:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    63b4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    63b8:	b938      	cbnz	r0, 63ca <is_tx_ready+0x1a>
    63ba:	7992      	ldrb	r2, [r2, #6]
    63bc:	b932      	cbnz	r2, 63cc <is_tx_ready+0x1c>
    63be:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    63c2:	3800      	subs	r0, #0
    63c4:	bf18      	it	ne
    63c6:	2001      	movne	r0, #1
    63c8:	4770      	bx	lr
    63ca:	2001      	movs	r0, #1
}
    63cc:	4770      	bx	lr

000063ce <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    63ce:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    63d0:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    63d2:	681b      	ldr	r3, [r3, #0]
    63d4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    63d8:	b148      	cbz	r0, 63ee <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63da:	2000      	movs	r0, #0
	*c = data->rx_data;
    63dc:	7d52      	ldrb	r2, [r2, #21]
    63de:	700a      	strb	r2, [r1, #0]
    63e0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    63e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63e8:	2201      	movs	r2, #1
    63ea:	601a      	str	r2, [r3, #0]
	return 0;
    63ec:	4770      	bx	lr
		return -1;
    63ee:	f04f 30ff 	mov.w	r0, #4294967295
}
    63f2:	4770      	bx	lr

000063f4 <uarte_nrfx_fifo_fill>:
{
    63f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    63f6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    63f8:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    63fa:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
    63fc:	68f3      	ldr	r3, [r6, #12]
    63fe:	899c      	ldrh	r4, [r3, #12]
    6400:	3310      	adds	r3, #16
    6402:	4294      	cmp	r4, r2
    6404:	bfa8      	it	ge
    6406:	4614      	movge	r4, r2
    6408:	2201      	movs	r2, #1
    640a:	e8d3 7fef 	ldaex	r7, [r3]
    640e:	2f00      	cmp	r7, #0
    6410:	d104      	bne.n	641c <uarte_nrfx_fifo_fill+0x28>
    6412:	e8c3 2fec 	stlex	ip, r2, [r3]
    6416:	f1bc 0f00 	cmp.w	ip, #0
    641a:	d1f6      	bne.n	640a <uarte_nrfx_fifo_fill+0x16>
    641c:	bf0c      	ite	eq
    641e:	4613      	moveq	r3, r2
    6420:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    6422:	d01c      	beq.n	645e <uarte_nrfx_fifo_fill+0x6a>
		return 0;
    6424:	461c      	mov	r4, r3
}
    6426:	4620      	mov	r0, r4
    6428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    642a:	68f2      	ldr	r2, [r6, #12]
    642c:	5ccf      	ldrb	r7, [r1, r3]
    642e:	6892      	ldr	r2, [r2, #8]
    6430:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
    6432:	3301      	adds	r3, #1
    6434:	42a3      	cmp	r3, r4
    6436:	dbf8      	blt.n	642a <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
    6438:	f04f 0320 	mov.w	r3, #32
    643c:	f3ef 8111 	mrs	r1, BASEPRI
    6440:	f383 8811 	msr	BASEPRI, r3
    6444:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    6448:	f7ff ffb2 	bl	63b0 <is_tx_ready>
    644c:	68f3      	ldr	r3, [r6, #12]
    644e:	b940      	cbnz	r0, 6462 <uarte_nrfx_fifo_fill+0x6e>
		len = 0;
    6450:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    6452:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    6454:	f381 8811 	msr	BASEPRI, r1
    6458:	f3bf 8f6f 	isb	sy
	return len;
    645c:	e7e3      	b.n	6426 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
    645e:	2300      	movs	r3, #0
    6460:	e7e8      	b.n	6434 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6462:	689b      	ldr	r3, [r3, #8]
    6464:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6468:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
    646a:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    646e:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    6472:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
    6476:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
    647a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    647e:	2301      	movs	r3, #1
    6480:	60ab      	str	r3, [r5, #8]
}
    6482:	e7e7      	b.n	6454 <uarte_nrfx_fifo_fill+0x60>

00006484 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
    6484:	6843      	ldr	r3, [r0, #4]
{
    6486:	4602      	mov	r2, r0
	return config->uarte_regs;
    6488:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    648a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    648e:	b148      	cbz	r0, 64a4 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6490:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6492:	68d2      	ldr	r2, [r2, #12]
    6494:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6498:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    649c:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    649e:	7d52      	ldrb	r2, [r2, #21]
    64a0:	700a      	strb	r2, [r1, #0]
    64a2:	6018      	str	r0, [r3, #0]
}
    64a4:	4770      	bx	lr

000064a6 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    64a6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    64a8:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
    64aa:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    64ac:	f04f 0020 	mov.w	r0, #32
    64b0:	f3ef 8311 	mrs	r3, BASEPRI
    64b4:	f380 8811 	msr	BASEPRI, r0
    64b8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    64bc:	2000      	movs	r0, #0
    64be:	68c9      	ldr	r1, [r1, #12]
    64c0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    64c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    64c6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    64ca:	f383 8811 	msr	BASEPRI, r3
    64ce:	f3bf 8f6f 	isb	sy
}
    64d2:	4770      	bx	lr

000064d4 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    64d4:	2201      	movs	r2, #1
    64d6:	68c3      	ldr	r3, [r0, #12]
    64d8:	68db      	ldr	r3, [r3, #12]
    64da:	739a      	strb	r2, [r3, #14]
}
    64dc:	4770      	bx	lr

000064de <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    64de:	68c3      	ldr	r3, [r0, #12]
    64e0:	68db      	ldr	r3, [r3, #12]
    64e2:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    64e4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    64e8:	b962      	cbnz	r2, 6504 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    64ea:	6842      	ldr	r2, [r0, #4]
    64ec:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    64ee:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    64f2:	b140      	cbz	r0, 6506 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    64f4:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    64f8:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    64fc:	d003      	beq.n	6506 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    64fe:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    6500:	6119      	str	r1, [r3, #16]
    6502:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6504:	2000      	movs	r0, #0
}
    6506:	4770      	bx	lr

00006508 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    6508:	6843      	ldr	r3, [r0, #4]
    650a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    650c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    6510:	3800      	subs	r0, #0
    6512:	bf18      	it	ne
    6514:	2001      	movne	r0, #1
    6516:	4770      	bx	lr

00006518 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    6518:	2210      	movs	r2, #16
	return config->uarte_regs;
    651a:	6843      	ldr	r3, [r0, #4]
    651c:	681b      	ldr	r3, [r3, #0]
    651e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6522:	4770      	bx	lr

00006524 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    6524:	2210      	movs	r2, #16
	return config->uarte_regs;
    6526:	6843      	ldr	r3, [r0, #4]
    6528:	681b      	ldr	r3, [r3, #0]
    652a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    652e:	4770      	bx	lr

00006530 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    6530:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6534:	6843      	ldr	r3, [r0, #4]
    6536:	681b      	ldr	r3, [r3, #0]
    6538:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    653c:	4770      	bx	lr

0000653e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    653e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6542:	6843      	ldr	r3, [r0, #4]
    6544:	681b      	ldr	r3, [r3, #0]
    6546:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    654a:	4770      	bx	lr

0000654c <uarte_nrfx_irq_update>:
}
    654c:	2001      	movs	r0, #1
    654e:	4770      	bx	lr

00006550 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    6550:	68c3      	ldr	r3, [r0, #12]
    6552:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    6554:	e9c3 1200 	strd	r1, r2, [r3]
}
    6558:	4770      	bx	lr

0000655a <uarte_nrfx_irq_is_pending>:
{
    655a:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    655c:	6843      	ldr	r3, [r0, #4]
{
    655e:	4604      	mov	r4, r0
	return config->uarte_regs;
    6560:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6562:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    6566:	025b      	lsls	r3, r3, #9
    6568:	d405      	bmi.n	6576 <uarte_nrfx_irq_is_pending+0x1c>
    656a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    656e:	f010 0010 	ands.w	r0, r0, #16
    6572:	d106      	bne.n	6582 <uarte_nrfx_irq_is_pending+0x28>
}
    6574:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    6576:	f7ff ffb2 	bl	64de <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    657a:	2800      	cmp	r0, #0
    657c:	d0f5      	beq.n	656a <uarte_nrfx_irq_is_pending+0x10>
		||
    657e:	2001      	movs	r0, #1
    6580:	e7f8      	b.n	6574 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    6582:	4620      	mov	r0, r4
    6584:	f7ff ffc0 	bl	6508 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    6588:	3800      	subs	r0, #0
    658a:	bf18      	it	ne
    658c:	2001      	movne	r0, #1
    658e:	e7f1      	b.n	6574 <uarte_nrfx_irq_is_pending+0x1a>

00006590 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    6590:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6592:	f7fb fd23 	bl	1fdc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6596:	f7fb fde7 	bl	2168 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
    659a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    659e:	f7fe bdeb 	b.w	5178 <nrf_cc3xx_platform_init_no_rng>

000065a2 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    65a2:	b538      	push	{r3, r4, r5, lr}
    65a4:	460c      	mov	r4, r1
    65a6:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    65a8:	f7ff fc88 	bl	5ebc <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    65ac:	4621      	mov	r1, r4
    65ae:	4425      	add	r5, r4
    65b0:	42a9      	cmp	r1, r5
    65b2:	d101      	bne.n	65b8 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    65b4:	2001      	movs	r0, #1
}
    65b6:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    65b8:	f811 3b01 	ldrb.w	r3, [r1], #1
    65bc:	4298      	cmp	r0, r3
    65be:	d0f7      	beq.n	65b0 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    65c0:	2000      	movs	r0, #0
    65c2:	e7f8      	b.n	65b6 <bootutil_buffer_is_erased.part.0+0x14>

000065c4 <boot_write_trailer.constprop.0>:
boot_write_trailer(const struct flash_area *fap, uint32_t off,
    65c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    65c8:	4605      	mov	r5, r0
    65ca:	460e      	mov	r6, r1
    65cc:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    65ce:	f7ff fc6c 	bl	5eaa <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    65d2:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
    65d4:	4604      	mov	r4, r0
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    65d6:	d81e      	bhi.n	6616 <boot_write_trailer.constprop.0+0x52>
    erased_val = flash_area_erased_val(fap);
    65d8:	4628      	mov	r0, r5
    65da:	f7ff fc6f 	bl	5ebc <flash_area_erased_val>
    65de:	2c01      	cmp	r4, #1
    65e0:	bf38      	it	cc
    65e2:	2401      	movcc	r4, #1
    65e4:	4607      	mov	r7, r0
    memcpy(buf, inbuf, inlen);
    65e6:	2201      	movs	r2, #1
    65e8:	4641      	mov	r1, r8
    65ea:	b2e4      	uxtb	r4, r4
    65ec:	4668      	mov	r0, sp
    65ee:	f7ff fd4e 	bl	608e <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    65f2:	4639      	mov	r1, r7
    65f4:	1e62      	subs	r2, r4, #1
    65f6:	f10d 0001 	add.w	r0, sp, #1
    65fa:	f7ff fd73 	bl	60e4 <memset>
    rc = flash_area_write(fap, off, buf, align);
    65fe:	4623      	mov	r3, r4
    6600:	466a      	mov	r2, sp
    6602:	4631      	mov	r1, r6
    6604:	4628      	mov	r0, r5
    6606:	f7ff fc01 	bl	5e0c <flash_area_write>
    if (rc != 0) {
    660a:	3800      	subs	r0, #0
    660c:	bf18      	it	ne
    660e:	2001      	movne	r0, #1
}
    6610:	b002      	add	sp, #8
    6612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    6616:	f04f 30ff 	mov.w	r0, #4294967295
    661a:	e7f9      	b.n	6610 <boot_write_trailer.constprop.0+0x4c>

0000661c <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    661c:	6880      	ldr	r0, [r0, #8]
}
    661e:	3828      	subs	r0, #40	; 0x28
    6620:	4770      	bx	lr

00006622 <boot_magic_compatible_check>:
    switch (tbl_val) {
    6622:	2804      	cmp	r0, #4
    6624:	d009      	beq.n	663a <boot_magic_compatible_check+0x18>
    6626:	2805      	cmp	r0, #5
    6628:	d103      	bne.n	6632 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    662a:	1e48      	subs	r0, r1, #1
    662c:	bf18      	it	ne
    662e:	2001      	movne	r0, #1
    6630:	4770      	bx	lr
        return tbl_val == val;
    6632:	1a43      	subs	r3, r0, r1
    6634:	4258      	negs	r0, r3
    6636:	4158      	adcs	r0, r3
    6638:	4770      	bx	lr
    switch (tbl_val) {
    663a:	2001      	movs	r0, #1
}
    663c:	4770      	bx	lr

0000663e <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    663e:	b111      	cbz	r1, 6646 <bootutil_buffer_is_erased+0x8>
    6640:	b10a      	cbz	r2, 6646 <bootutil_buffer_is_erased+0x8>
    6642:	f7ff bfae 	b.w	65a2 <bootutil_buffer_is_erased.part.0>
}
    6646:	2000      	movs	r0, #0
    6648:	4770      	bx	lr

0000664a <boot_read_flag>:
{
    664a:	b538      	push	{r3, r4, r5, lr}
    664c:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    664e:	2301      	movs	r3, #1
{
    6650:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6652:	4622      	mov	r2, r4
{
    6654:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6656:	f7ff fbbc 	bl	5dd2 <flash_area_read>
    if (rc < 0) {
    665a:	2800      	cmp	r0, #0
    665c:	db10      	blt.n	6680 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    665e:	2201      	movs	r2, #1
    6660:	4621      	mov	r1, r4
    6662:	4628      	mov	r0, r5
    6664:	f7ff ffeb 	bl	663e <bootutil_buffer_is_erased>
    6668:	b118      	cbz	r0, 6672 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    666a:	2303      	movs	r3, #3
    return 0;
    666c:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    666e:	7023      	strb	r3, [r4, #0]
}
    6670:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    6672:	7823      	ldrb	r3, [r4, #0]
    6674:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
    6676:	bf0c      	ite	eq
    6678:	2301      	moveq	r3, #1
    667a:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    667c:	7023      	strb	r3, [r4, #0]
    667e:	e7f7      	b.n	6670 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    6680:	2001      	movs	r0, #1
    6682:	e7f5      	b.n	6670 <boot_read_flag+0x26>

00006684 <boot_write_image_ok>:
    const uint8_t buf[1] = { flag_val };
    6684:	2301      	movs	r3, #1
{
    6686:	b507      	push	{r0, r1, r2, lr}
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6688:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, buf, 1);
    668a:	aa01      	add	r2, sp, #4
    668c:	3918      	subs	r1, #24
    const uint8_t buf[1] = { flag_val };
    668e:	f88d 3004 	strb.w	r3, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6692:	f7ff ff97 	bl	65c4 <boot_write_trailer.constprop.0>
}
    6696:	b003      	add	sp, #12
    6698:	f85d fb04 	ldr.w	pc, [sp], #4

0000669c <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    669c:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    669e:	3a18      	subs	r2, #24
    66a0:	f7ff bfd3 	b.w	664a <boot_read_flag>

000066a4 <boot_read_swap_state_by_id>:
{
    66a4:	b513      	push	{r0, r1, r4, lr}
    66a6:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    66a8:	b2c0      	uxtb	r0, r0
    66aa:	a901      	add	r1, sp, #4
    66ac:	f7fb f9a6 	bl	19fc <flash_area_open>
    if (rc != 0) {
    66b0:	b950      	cbnz	r0, 66c8 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    66b2:	4621      	mov	r1, r4
    66b4:	9801      	ldr	r0, [sp, #4]
    66b6:	f7fc fe77 	bl	33a8 <boot_read_swap_state>
    66ba:	4604      	mov	r4, r0
    flash_area_close(fap);
    66bc:	9801      	ldr	r0, [sp, #4]
    66be:	f7ff fb87 	bl	5dd0 <flash_area_close>
}
    66c2:	4620      	mov	r0, r4
    66c4:	b002      	add	sp, #8
    66c6:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    66c8:	2401      	movs	r4, #1
    66ca:	e7fa      	b.n	66c2 <boot_read_swap_state_by_id+0x1e>

000066cc <boot_write_swap_info>:
{
    66cc:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    66ce:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    66d2:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    66d6:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    66d8:	f10d 0207 	add.w	r2, sp, #7
    66dc:	3928      	subs	r1, #40	; 0x28
    66de:	f7ff ff71 	bl	65c4 <boot_write_trailer.constprop.0>
}
    66e2:	b003      	add	sp, #12
    66e4:	f85d fb04 	ldr.w	pc, [sp], #4

000066e8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    66e8:	4700      	bx	r0

000066ea <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    66ea:	f001 bd50 	b.w	818e <z_impl_k_busy_wait>

000066ee <nrfx_clock_enable>:
{
    66ee:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    66f0:	2005      	movs	r0, #5
    66f2:	f7fb fdb5 	bl	2260 <arch_irq_is_enabled>
    66f6:	b910      	cbnz	r0, 66fe <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    66f8:	2005      	movs	r0, #5
    66fa:	f7fb fda1 	bl	2240 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    66fe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6702:	2201      	movs	r2, #1
    6704:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    6708:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    670c:	bd08      	pop	{r3, pc}

0000670e <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    670e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6712:	4770      	bx	lr

00006714 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    6714:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6718:	4770      	bx	lr

0000671a <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    671a:	f44f 7080 	mov.w	r0, #256	; 0x100
    671e:	4770      	bx	lr

00006720 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    6720:	2000      	movs	r0, #0
    6722:	4770      	bx	lr

00006724 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    6724:	6803      	ldr	r3, [r0, #0]
{
    6726:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    6728:	1acd      	subs	r5, r1, r3
    672a:	2d00      	cmp	r5, #0
    672c:	dd0d      	ble.n	674a <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    672e:	f993 6000 	ldrsb.w	r6, [r3]
    6732:	781c      	ldrb	r4, [r3, #0]
    6734:	2e00      	cmp	r6, #0
    6736:	db0b      	blt.n	6750 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    6738:	1c5c      	adds	r4, r3, #1
    673a:	6004      	str	r4, [r0, #0]
    673c:	781b      	ldrb	r3, [r3, #0]
    673e:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    6740:	6803      	ldr	r3, [r0, #0]
    6742:	1ac9      	subs	r1, r1, r3
    6744:	6813      	ldr	r3, [r2, #0]
    6746:	428b      	cmp	r3, r1
    6748:	d932      	bls.n	67b0 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    674a:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    674e:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    6750:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6754:	3c01      	subs	r4, #1
    6756:	2c03      	cmp	r4, #3
    6758:	d827      	bhi.n	67aa <mbedtls_asn1_get_len+0x86>
    675a:	e8df f004 	tbb	[pc, r4]
    675e:	0902      	.short	0x0902
    6760:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    6762:	2d01      	cmp	r5, #1
    6764:	d0f1      	beq.n	674a <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    6766:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    6768:	3302      	adds	r3, #2
            *len = (*p)[1];
    676a:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    676c:	6003      	str	r3, [r0, #0]
            break;
    676e:	e7e7      	b.n	6740 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    6770:	2d02      	cmp	r5, #2
    6772:	ddea      	ble.n	674a <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6774:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    6778:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    677a:	ba64      	rev16	r4, r4
    677c:	b2a4      	uxth	r4, r4
    677e:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    6780:	e7f4      	b.n	676c <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    6782:	2d03      	cmp	r5, #3
    6784:	dde1      	ble.n	674a <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6786:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6788:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    678a:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    678c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6790:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    6792:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6794:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    6796:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    6798:	e7e8      	b.n	676c <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    679a:	2d04      	cmp	r5, #4
    679c:	ddd5      	ble.n	674a <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    679e:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    67a2:	3305      	adds	r3, #5
    67a4:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    67a6:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    67a8:	e7e0      	b.n	676c <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
    67aa:	f06f 0063 	mvn.w	r0, #99	; 0x63
    67ae:	e7ce      	b.n	674e <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    67b0:	2000      	movs	r0, #0
    67b2:	e7cc      	b.n	674e <mbedtls_asn1_get_len+0x2a>

000067b4 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    67b4:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    67b6:	6804      	ldr	r4, [r0, #0]
    67b8:	1b0e      	subs	r6, r1, r4
    67ba:	2e00      	cmp	r6, #0
    67bc:	dd07      	ble.n	67ce <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    67be:	7826      	ldrb	r6, [r4, #0]
    67c0:	429e      	cmp	r6, r3
    67c2:	d108      	bne.n	67d6 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    67c4:	3401      	adds	r4, #1
    67c6:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    67c8:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    67ca:	f7ff bfab 	b.w	6724 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    67ce:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    67d2:	bc70      	pop	{r4, r5, r6}
    67d4:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    67d6:	f06f 0061 	mvn.w	r0, #97	; 0x61
    67da:	e7fa      	b.n	67d2 <mbedtls_asn1_get_tag+0x1e>

000067dc <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    67dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    67de:	2302      	movs	r3, #2
{
    67e0:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    67e2:	aa01      	add	r2, sp, #4
{
    67e4:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    67e6:	f7ff ffe5 	bl	67b4 <mbedtls_asn1_get_tag>
    67ea:	b940      	cbnz	r0, 67fe <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    67ec:	9a01      	ldr	r2, [sp, #4]
    67ee:	4628      	mov	r0, r5
    67f0:	6821      	ldr	r1, [r4, #0]
    67f2:	f000 fbe4 	bl	6fbe <mbedtls_mpi_read_binary>

    *p += len;
    67f6:	6823      	ldr	r3, [r4, #0]
    67f8:	9a01      	ldr	r2, [sp, #4]
    67fa:	4413      	add	r3, r2
    67fc:	6023      	str	r3, [r4, #0]

    return( ret );
}
    67fe:	b003      	add	sp, #12
    6800:	bd30      	pop	{r4, r5, pc}

00006802 <mpi_sub_hlp>:
 *                      0 if `d >= s`.
 */
static mbedtls_mpi_uint mpi_sub_hlp( size_t n,
                                     mbedtls_mpi_uint *d,
                                     const mbedtls_mpi_uint *s )
{
    6802:	b5f0      	push	{r4, r5, r6, r7, lr}
    6804:	4605      	mov	r5, r0
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    6806:	2000      	movs	r0, #0
    6808:	4604      	mov	r4, r0
    680a:	3904      	subs	r1, #4
    680c:	42ac      	cmp	r4, r5
    680e:	d100      	bne.n	6812 <mpi_sub_hlp+0x10>
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    return( c );
}
    6810:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
    6812:	f851 7f04 	ldr.w	r7, [r1, #4]!
    6816:	1a3b      	subs	r3, r7, r0
    6818:	600b      	str	r3, [r1, #0]
        c = ( *d < *s ) + z; *d -= *s;
    681a:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    for( i = c = 0; i < n; i++, s++, d++ )
    681e:	3401      	adds	r4, #1
        c = ( *d < *s ) + z; *d -= *s;
    6820:	42b3      	cmp	r3, r6
    6822:	bf2c      	ite	cs
    6824:	f04f 0c00 	movcs.w	ip, #0
    6828:	f04f 0c01 	movcc.w	ip, #1
    682c:	1b9b      	subs	r3, r3, r6
    682e:	4287      	cmp	r7, r0
    6830:	bf2c      	ite	cs
    6832:	4660      	movcs	r0, ip
    6834:	f10c 0001 	addcc.w	r0, ip, #1
    6838:	600b      	str	r3, [r1, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
    683a:	e7e7      	b.n	680c <mpi_sub_hlp+0xa>

0000683c <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    683c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    6840:	4684      	mov	ip, r0
    6842:	460d      	mov	r5, r1
    mbedtls_mpi_uint c = 0, t = 0;
    6844:	f04f 0e00 	mov.w	lr, #0
    6848:	f102 0440 	add.w	r4, r2, #64	; 0x40
    for( ; i >= 16; i -= 16 )
    684c:	f1bc 0f0f 	cmp.w	ip, #15
    6850:	f854 8c40 	ldr.w	r8, [r4, #-64]
    6854:	f105 0540 	add.w	r5, r5, #64	; 0x40
    6858:	f104 0440 	add.w	r4, r4, #64	; 0x40
    685c:	f200 80bf 	bhi.w	69de <mpi_mul_hlp+0x1a2>
    6860:	f06f 050f 	mvn.w	r5, #15
    6864:	0904      	lsrs	r4, r0, #4
    6866:	fb05 0004 	mla	r0, r5, r4, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    686a:	2807      	cmp	r0, #7
    686c:	ea4f 1984 	mov.w	r9, r4, lsl #6
    6870:	eb01 1584 	add.w	r5, r1, r4, lsl #6
    6874:	eb02 1484 	add.w	r4, r2, r4, lsl #6
    6878:	f240 809c 	bls.w	69b4 <mpi_mul_hlp+0x178>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    687c:	f851 6009 	ldr.w	r6, [r1, r9]
    for( ; i >= 8; i -= 8 )
    6880:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    6882:	fba3 6706 	umull	r6, r7, r3, r6
    6886:	eb1e 0e06 	adds.w	lr, lr, r6
    688a:	bf2c      	ite	cs
    688c:	f04f 0c01 	movcs.w	ip, #1
    6890:	f04f 0c00 	movcc.w	ip, #0
    6894:	eb18 010e 	adds.w	r1, r8, lr
    6898:	f842 1009 	str.w	r1, [r2, r9]
    689c:	bf2c      	ite	cs
    689e:	2201      	movcs	r2, #1
    68a0:	2200      	movcc	r2, #0
    68a2:	686e      	ldr	r6, [r5, #4]
    68a4:	44bc      	add	ip, r7
    68a6:	fba3 6706 	umull	r6, r7, r3, r6
    68aa:	4462      	add	r2, ip
    68ac:	1992      	adds	r2, r2, r6
    68ae:	bf2c      	ite	cs
    68b0:	2101      	movcs	r1, #1
    68b2:	2100      	movcc	r1, #0
    68b4:	eb01 0c07 	add.w	ip, r1, r7
    68b8:	6861      	ldr	r1, [r4, #4]
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
    68ba:	3520      	adds	r5, #32
    68bc:	1852      	adds	r2, r2, r1
        MULADDC_CORE   MULADDC_CORE
    68be:	bf2c      	ite	cs
    68c0:	2101      	movcs	r1, #1
    68c2:	2100      	movcc	r1, #0
    68c4:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
    68c6:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
    68ca:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    68cc:	fba3 6706 	umull	r6, r7, r3, r6
    68d0:	1989      	adds	r1, r1, r6
    68d2:	bf2c      	ite	cs
    68d4:	2201      	movcs	r2, #1
    68d6:	2200      	movcc	r2, #0
    68d8:	eb02 0c07 	add.w	ip, r2, r7
    68dc:	68a2      	ldr	r2, [r4, #8]
        MULADDC_CORE   MULADDC_CORE
    68de:	3420      	adds	r4, #32
    68e0:	1889      	adds	r1, r1, r2
        MULADDC_CORE   MULADDC_CORE
    68e2:	bf2c      	ite	cs
    68e4:	2201      	movcs	r2, #1
    68e6:	2200      	movcc	r2, #0
    68e8:	f844 1c18 	str.w	r1, [r4, #-24]
    68ec:	f855 6c14 	ldr.w	r6, [r5, #-20]
    68f0:	4462      	add	r2, ip
    68f2:	fba3 6706 	umull	r6, r7, r3, r6
    68f6:	1992      	adds	r2, r2, r6
    68f8:	bf2c      	ite	cs
    68fa:	2101      	movcs	r1, #1
    68fc:	2100      	movcc	r1, #0
    68fe:	eb01 0c07 	add.w	ip, r1, r7
    6902:	f854 1c14 	ldr.w	r1, [r4, #-20]
    6906:	1852      	adds	r2, r2, r1
    6908:	bf2c      	ite	cs
    690a:	2101      	movcs	r1, #1
    690c:	2100      	movcc	r1, #0
    690e:	f844 2c14 	str.w	r2, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    6912:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
    6916:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    6918:	fba3 6706 	umull	r6, r7, r3, r6
    691c:	1989      	adds	r1, r1, r6
    691e:	bf2c      	ite	cs
    6920:	2201      	movcs	r2, #1
    6922:	2200      	movcc	r2, #0
    6924:	eb02 0c07 	add.w	ip, r2, r7
    6928:	f854 2c10 	ldr.w	r2, [r4, #-16]
    692c:	1889      	adds	r1, r1, r2
    692e:	bf2c      	ite	cs
    6930:	2201      	movcs	r2, #1
    6932:	2200      	movcc	r2, #0
    6934:	f844 1c10 	str.w	r1, [r4, #-16]
    6938:	f855 6c0c 	ldr.w	r6, [r5, #-12]
    693c:	4462      	add	r2, ip
    693e:	fba3 6706 	umull	r6, r7, r3, r6
    6942:	1992      	adds	r2, r2, r6
    6944:	bf2c      	ite	cs
    6946:	2101      	movcs	r1, #1
    6948:	2100      	movcc	r1, #0
    694a:	eb01 0c07 	add.w	ip, r1, r7
    694e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    6952:	1852      	adds	r2, r2, r1
    6954:	bf2c      	ite	cs
    6956:	2101      	movcs	r1, #1
    6958:	2100      	movcc	r1, #0
    695a:	f844 2c0c 	str.w	r2, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    695e:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
    6962:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    6964:	fba3 6706 	umull	r6, r7, r3, r6
    6968:	1989      	adds	r1, r1, r6
    696a:	bf2c      	ite	cs
    696c:	2201      	movcs	r2, #1
    696e:	2200      	movcc	r2, #0
    6970:	eb02 0c07 	add.w	ip, r2, r7
    6974:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6978:	1889      	adds	r1, r1, r2
    697a:	bf2c      	ite	cs
    697c:	2201      	movcs	r2, #1
    697e:	2200      	movcc	r2, #0
    6980:	f844 1c08 	str.w	r1, [r4, #-8]
    6984:	f855 6c04 	ldr.w	r6, [r5, #-4]
    6988:	4462      	add	r2, ip
    698a:	fba3 6706 	umull	r6, r7, r3, r6
    698e:	1992      	adds	r2, r2, r6
    6990:	bf2c      	ite	cs
    6992:	f04f 0e01 	movcs.w	lr, #1
    6996:	f04f 0e00 	movcc.w	lr, #0
    699a:	f854 6c04 	ldr.w	r6, [r4, #-4]
    699e:	eb0e 0107 	add.w	r1, lr, r7
    69a2:	1992      	adds	r2, r2, r6
    69a4:	bf2c      	ite	cs
    69a6:	f04f 0e01 	movcs.w	lr, #1
    69aa:	f04f 0e00 	movcc.w	lr, #0
    69ae:	f844 2c04 	str.w	r2, [r4, #-4]
    69b2:	448e      	add	lr, r1
    69b4:	4621      	mov	r1, r4
    69b6:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    69ba:	eb05 0080 	add.w	r0, r5, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    69be:	4285      	cmp	r5, r0
    69c0:	f851 2b04 	ldr.w	r2, [r1], #4
    69c4:	f040 819a 	bne.w	6cfc <mpi_mul_hlp+0x4c0>
    69c8:	4464      	add	r4, ip
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    69ca:	6823      	ldr	r3, [r4, #0]
    69cc:	eb13 030e 	adds.w	r3, r3, lr
    69d0:	f844 3b04 	str.w	r3, [r4], #4
    69d4:	f04f 0e01 	mov.w	lr, #1
    }
    while( c != 0 );
    69d8:	d2f7      	bcs.n	69ca <mpi_mul_hlp+0x18e>
}
    69da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MULADDC_CORE   MULADDC_CORE
    69de:	f855 6c40 	ldr.w	r6, [r5, #-64]
    for( ; i >= 16; i -= 16 )
    69e2:	f1ac 0c10 	sub.w	ip, ip, #16
        MULADDC_CORE   MULADDC_CORE
    69e6:	fba3 6706 	umull	r6, r7, r3, r6
    69ea:	eb1e 0e06 	adds.w	lr, lr, r6
    69ee:	bf2c      	ite	cs
    69f0:	f04f 0901 	movcs.w	r9, #1
    69f4:	f04f 0900 	movcc.w	r9, #0
    69f8:	eb1e 0608 	adds.w	r6, lr, r8
    69fc:	bf2c      	ite	cs
    69fe:	f04f 0801 	movcs.w	r8, #1
    6a02:	f04f 0800 	movcc.w	r8, #0
    6a06:	f844 6c80 	str.w	r6, [r4, #-128]
    6a0a:	f855 6c3c 	ldr.w	r6, [r5, #-60]
    6a0e:	44b9      	add	r9, r7
    6a10:	fba3 6706 	umull	r6, r7, r3, r6
    6a14:	44c8      	add	r8, r9
    6a16:	eb18 0806 	adds.w	r8, r8, r6
    6a1a:	bf2c      	ite	cs
    6a1c:	f04f 0e01 	movcs.w	lr, #1
    6a20:	f04f 0e00 	movcc.w	lr, #0
    6a24:	f854 6c7c 	ldr.w	r6, [r4, #-124]
    6a28:	eb0e 0907 	add.w	r9, lr, r7
    6a2c:	eb16 0608 	adds.w	r6, r6, r8
    6a30:	bf2c      	ite	cs
    6a32:	f04f 0e01 	movcs.w	lr, #1
    6a36:	f04f 0e00 	movcc.w	lr, #0
    6a3a:	f844 6c7c 	str.w	r6, [r4, #-124]
        MULADDC_CORE   MULADDC_CORE
    6a3e:	f855 6c38 	ldr.w	r6, [r5, #-56]
        MULADDC_CORE   MULADDC_CORE
    6a42:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6a44:	fba3 6706 	umull	r6, r7, r3, r6
    6a48:	eb1e 0e06 	adds.w	lr, lr, r6
    6a4c:	bf2c      	ite	cs
    6a4e:	f04f 0801 	movcs.w	r8, #1
    6a52:	f04f 0800 	movcc.w	r8, #0
    6a56:	eb08 0907 	add.w	r9, r8, r7
    6a5a:	f854 7c78 	ldr.w	r7, [r4, #-120]
    6a5e:	eb17 070e 	adds.w	r7, r7, lr
    6a62:	bf2c      	ite	cs
    6a64:	f04f 0801 	movcs.w	r8, #1
    6a68:	f04f 0800 	movcc.w	r8, #0
    6a6c:	f844 7c78 	str.w	r7, [r4, #-120]
    6a70:	f855 6c34 	ldr.w	r6, [r5, #-52]
    6a74:	44c8      	add	r8, r9
    6a76:	fba3 6706 	umull	r6, r7, r3, r6
    6a7a:	eb18 0806 	adds.w	r8, r8, r6
    6a7e:	bf2c      	ite	cs
    6a80:	f04f 0e01 	movcs.w	lr, #1
    6a84:	f04f 0e00 	movcc.w	lr, #0
    6a88:	f854 6c74 	ldr.w	r6, [r4, #-116]
    6a8c:	eb0e 0907 	add.w	r9, lr, r7
    6a90:	eb16 0608 	adds.w	r6, r6, r8
    6a94:	bf2c      	ite	cs
    6a96:	f04f 0e01 	movcs.w	lr, #1
    6a9a:	f04f 0e00 	movcc.w	lr, #0
    6a9e:	f844 6c74 	str.w	r6, [r4, #-116]
        MULADDC_CORE   MULADDC_CORE
    6aa2:	f855 6c30 	ldr.w	r6, [r5, #-48]
        MULADDC_CORE   MULADDC_CORE
    6aa6:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6aa8:	fba3 6706 	umull	r6, r7, r3, r6
    6aac:	eb1e 0e06 	adds.w	lr, lr, r6
    6ab0:	bf2c      	ite	cs
    6ab2:	f04f 0801 	movcs.w	r8, #1
    6ab6:	f04f 0800 	movcc.w	r8, #0
    6aba:	eb08 0907 	add.w	r9, r8, r7
    6abe:	f854 7c70 	ldr.w	r7, [r4, #-112]
    6ac2:	eb17 070e 	adds.w	r7, r7, lr
    6ac6:	bf2c      	ite	cs
    6ac8:	f04f 0801 	movcs.w	r8, #1
    6acc:	f04f 0800 	movcc.w	r8, #0
    6ad0:	f844 7c70 	str.w	r7, [r4, #-112]
    6ad4:	f855 6c2c 	ldr.w	r6, [r5, #-44]
    6ad8:	44c8      	add	r8, r9
    6ada:	fba3 6706 	umull	r6, r7, r3, r6
    6ade:	eb18 0806 	adds.w	r8, r8, r6
    6ae2:	bf2c      	ite	cs
    6ae4:	f04f 0e01 	movcs.w	lr, #1
    6ae8:	f04f 0e00 	movcc.w	lr, #0
    6aec:	f854 6c6c 	ldr.w	r6, [r4, #-108]
    6af0:	eb0e 0907 	add.w	r9, lr, r7
    6af4:	eb16 0608 	adds.w	r6, r6, r8
    6af8:	bf2c      	ite	cs
    6afa:	f04f 0e01 	movcs.w	lr, #1
    6afe:	f04f 0e00 	movcc.w	lr, #0
    6b02:	f844 6c6c 	str.w	r6, [r4, #-108]
        MULADDC_CORE   MULADDC_CORE
    6b06:	f855 6c28 	ldr.w	r6, [r5, #-40]
        MULADDC_CORE   MULADDC_CORE
    6b0a:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6b0c:	fba3 6706 	umull	r6, r7, r3, r6
    6b10:	eb1e 0e06 	adds.w	lr, lr, r6
    6b14:	bf2c      	ite	cs
    6b16:	f04f 0801 	movcs.w	r8, #1
    6b1a:	f04f 0800 	movcc.w	r8, #0
    6b1e:	eb08 0907 	add.w	r9, r8, r7
    6b22:	f854 7c68 	ldr.w	r7, [r4, #-104]
    6b26:	eb17 070e 	adds.w	r7, r7, lr
    6b2a:	bf2c      	ite	cs
    6b2c:	f04f 0801 	movcs.w	r8, #1
    6b30:	f04f 0800 	movcc.w	r8, #0
    6b34:	f844 7c68 	str.w	r7, [r4, #-104]
    6b38:	f855 6c24 	ldr.w	r6, [r5, #-36]
    6b3c:	44c8      	add	r8, r9
    6b3e:	fba3 6706 	umull	r6, r7, r3, r6
    6b42:	eb18 0806 	adds.w	r8, r8, r6
    6b46:	bf2c      	ite	cs
    6b48:	f04f 0e01 	movcs.w	lr, #1
    6b4c:	f04f 0e00 	movcc.w	lr, #0
    6b50:	f854 6c64 	ldr.w	r6, [r4, #-100]
    6b54:	eb0e 0907 	add.w	r9, lr, r7
    6b58:	eb16 0608 	adds.w	r6, r6, r8
    6b5c:	bf2c      	ite	cs
    6b5e:	f04f 0e01 	movcs.w	lr, #1
    6b62:	f04f 0e00 	movcc.w	lr, #0
    6b66:	f844 6c64 	str.w	r6, [r4, #-100]
        MULADDC_CORE   MULADDC_CORE
    6b6a:	f855 6c20 	ldr.w	r6, [r5, #-32]
        MULADDC_CORE   MULADDC_CORE
    6b6e:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6b70:	fba3 6706 	umull	r6, r7, r3, r6
    6b74:	eb1e 0e06 	adds.w	lr, lr, r6
    6b78:	bf2c      	ite	cs
    6b7a:	f04f 0801 	movcs.w	r8, #1
    6b7e:	f04f 0800 	movcc.w	r8, #0
    6b82:	eb08 0907 	add.w	r9, r8, r7
    6b86:	f854 7c60 	ldr.w	r7, [r4, #-96]
    6b8a:	eb17 070e 	adds.w	r7, r7, lr
    6b8e:	bf2c      	ite	cs
    6b90:	f04f 0801 	movcs.w	r8, #1
    6b94:	f04f 0800 	movcc.w	r8, #0
    6b98:	f844 7c60 	str.w	r7, [r4, #-96]
    6b9c:	f855 6c1c 	ldr.w	r6, [r5, #-28]
    6ba0:	44c8      	add	r8, r9
    6ba2:	fba3 6706 	umull	r6, r7, r3, r6
    6ba6:	eb18 0806 	adds.w	r8, r8, r6
    6baa:	bf2c      	ite	cs
    6bac:	f04f 0e01 	movcs.w	lr, #1
    6bb0:	f04f 0e00 	movcc.w	lr, #0
    6bb4:	f854 6c5c 	ldr.w	r6, [r4, #-92]
    6bb8:	eb0e 0907 	add.w	r9, lr, r7
    6bbc:	eb16 0608 	adds.w	r6, r6, r8
    6bc0:	bf2c      	ite	cs
    6bc2:	f04f 0e01 	movcs.w	lr, #1
    6bc6:	f04f 0e00 	movcc.w	lr, #0
    6bca:	f844 6c5c 	str.w	r6, [r4, #-92]
        MULADDC_CORE   MULADDC_CORE
    6bce:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
    6bd2:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6bd4:	fba3 6706 	umull	r6, r7, r3, r6
    6bd8:	eb1e 0e06 	adds.w	lr, lr, r6
    6bdc:	bf2c      	ite	cs
    6bde:	f04f 0801 	movcs.w	r8, #1
    6be2:	f04f 0800 	movcc.w	r8, #0
    6be6:	eb08 0907 	add.w	r9, r8, r7
    6bea:	f854 7c58 	ldr.w	r7, [r4, #-88]
    6bee:	eb17 070e 	adds.w	r7, r7, lr
    6bf2:	bf2c      	ite	cs
    6bf4:	f04f 0801 	movcs.w	r8, #1
    6bf8:	f04f 0800 	movcc.w	r8, #0
    6bfc:	f844 7c58 	str.w	r7, [r4, #-88]
    6c00:	f855 6c14 	ldr.w	r6, [r5, #-20]
    6c04:	44c8      	add	r8, r9
    6c06:	fba3 6706 	umull	r6, r7, r3, r6
    6c0a:	eb18 0806 	adds.w	r8, r8, r6
    6c0e:	bf2c      	ite	cs
    6c10:	f04f 0e01 	movcs.w	lr, #1
    6c14:	f04f 0e00 	movcc.w	lr, #0
    6c18:	f854 6c54 	ldr.w	r6, [r4, #-84]
    6c1c:	eb0e 0907 	add.w	r9, lr, r7
    6c20:	eb16 0608 	adds.w	r6, r6, r8
    6c24:	bf2c      	ite	cs
    6c26:	f04f 0e01 	movcs.w	lr, #1
    6c2a:	f04f 0e00 	movcc.w	lr, #0
    6c2e:	f844 6c54 	str.w	r6, [r4, #-84]
        MULADDC_CORE   MULADDC_CORE
    6c32:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
    6c36:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6c38:	fba3 6706 	umull	r6, r7, r3, r6
    6c3c:	eb1e 0e06 	adds.w	lr, lr, r6
    6c40:	bf2c      	ite	cs
    6c42:	f04f 0801 	movcs.w	r8, #1
    6c46:	f04f 0800 	movcc.w	r8, #0
    6c4a:	eb08 0907 	add.w	r9, r8, r7
    6c4e:	f854 7c50 	ldr.w	r7, [r4, #-80]
    6c52:	eb17 070e 	adds.w	r7, r7, lr
    6c56:	bf2c      	ite	cs
    6c58:	f04f 0801 	movcs.w	r8, #1
    6c5c:	f04f 0800 	movcc.w	r8, #0
    6c60:	f844 7c50 	str.w	r7, [r4, #-80]
    6c64:	f855 6c0c 	ldr.w	r6, [r5, #-12]
    6c68:	44c8      	add	r8, r9
    6c6a:	fba3 6706 	umull	r6, r7, r3, r6
    6c6e:	eb18 0806 	adds.w	r8, r8, r6
    6c72:	bf2c      	ite	cs
    6c74:	f04f 0e01 	movcs.w	lr, #1
    6c78:	f04f 0e00 	movcc.w	lr, #0
    6c7c:	f854 6c4c 	ldr.w	r6, [r4, #-76]
    6c80:	eb0e 0907 	add.w	r9, lr, r7
    6c84:	eb16 0608 	adds.w	r6, r6, r8
    6c88:	bf2c      	ite	cs
    6c8a:	f04f 0e01 	movcs.w	lr, #1
    6c8e:	f04f 0e00 	movcc.w	lr, #0
    6c92:	f844 6c4c 	str.w	r6, [r4, #-76]
        MULADDC_CORE   MULADDC_CORE
    6c96:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
    6c9a:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6c9c:	fba3 6706 	umull	r6, r7, r3, r6
    6ca0:	eb1e 0e06 	adds.w	lr, lr, r6
    6ca4:	bf2c      	ite	cs
    6ca6:	f04f 0801 	movcs.w	r8, #1
    6caa:	f04f 0800 	movcc.w	r8, #0
    6cae:	eb08 0907 	add.w	r9, r8, r7
    6cb2:	f854 7c48 	ldr.w	r7, [r4, #-72]
    6cb6:	eb17 070e 	adds.w	r7, r7, lr
    6cba:	bf2c      	ite	cs
    6cbc:	f04f 0801 	movcs.w	r8, #1
    6cc0:	f04f 0800 	movcc.w	r8, #0
    6cc4:	f844 7c48 	str.w	r7, [r4, #-72]
    6cc8:	f855 6c04 	ldr.w	r6, [r5, #-4]
    6ccc:	44c8      	add	r8, r9
    6cce:	fba3 6706 	umull	r6, r7, r3, r6
    6cd2:	eb18 0806 	adds.w	r8, r8, r6
    6cd6:	bf2c      	ite	cs
    6cd8:	f04f 0e01 	movcs.w	lr, #1
    6cdc:	f04f 0e00 	movcc.w	lr, #0
    6ce0:	f854 6c44 	ldr.w	r6, [r4, #-68]
    6ce4:	4477      	add	r7, lr
    6ce6:	eb16 0608 	adds.w	r6, r6, r8
    6cea:	bf2c      	ite	cs
    6cec:	f04f 0e01 	movcs.w	lr, #1
    6cf0:	f04f 0e00 	movcc.w	lr, #0
    6cf4:	f844 6c44 	str.w	r6, [r4, #-68]
    6cf8:	44be      	add	lr, r7
    for( ; i >= 16; i -= 16 )
    6cfa:	e5a7      	b.n	684c <mpi_mul_hlp+0x10>
        MULADDC_CORE
    6cfc:	f855 6b04 	ldr.w	r6, [r5], #4
    6d00:	fba3 7806 	umull	r7, r8, r3, r6
    6d04:	eb1e 0e07 	adds.w	lr, lr, r7
    6d08:	bf2c      	ite	cs
    6d0a:	2601      	movcs	r6, #1
    6d0c:	2600      	movcc	r6, #0
    6d0e:	eb12 020e 	adds.w	r2, r2, lr
    6d12:	bf2c      	ite	cs
    6d14:	f04f 0e01 	movcs.w	lr, #1
    6d18:	f04f 0e00 	movcc.w	lr, #0
    6d1c:	4446      	add	r6, r8
    6d1e:	44b6      	add	lr, r6
    6d20:	f841 2c04 	str.w	r2, [r1, #-4]
    for( ; i > 0; i-- )
    6d24:	e64b      	b.n	69be <mpi_mul_hlp+0x182>

00006d26 <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    6d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    6d28:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6d2c:	3901      	subs	r1, #1
    6d2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6d32:	4281      	cmp	r1, r0
    6d34:	d201      	bcs.n	6d3a <mpi_bigendian_to_host.part.0+0x14>
}
    6d36:	b002      	add	sp, #8
    6d38:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    6d3a:	6803      	ldr	r3, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    6d3c:	2500      	movs	r5, #0
    6d3e:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    6d40:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6d42:	eb0d 0203 	add.w	r2, sp, r3
    6d46:	4614      	mov	r4, r2
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    6d48:	f812 6b01 	ldrb.w	r6, [r2], #1
    6d4c:	3b01      	subs	r3, #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6d4e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    6d52:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6d56:	d1f7      	bne.n	6d48 <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    6d58:	680a      	ldr	r2, [r1, #0]
    6d5a:	9201      	str	r2, [sp, #4]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    6d5c:	2204      	movs	r2, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    6d5e:	f814 6b01 	ldrb.w	r6, [r4], #1
    6d62:	3a01      	subs	r2, #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6d64:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    6d68:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6d6c:	d1f7      	bne.n	6d5e <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    6d6e:	f840 3b04 	str.w	r3, [r0], #4
        *cur_limb_right = tmp;
    6d72:	f841 5904 	str.w	r5, [r1], #-4
         cur_limb_left++, cur_limb_right-- )
    6d76:	e7dc      	b.n	6d32 <mpi_bigendian_to_host.part.0+0xc>

00006d78 <mpi_montmul.isra.0>:
 *                      Its initial content is unused and
 *                      its final content is indeterminate.
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
    6d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d7c:	468a      	mov	sl, r1
    6d7e:	4617      	mov	r7, r2
    6d80:	b085      	sub	sp, #20
    6d82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    6d84:	9000      	str	r0, [sp, #0]
                         const mbedtls_mpi *T )
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    6d86:	6862      	ldr	r2, [r4, #4]
    6d88:	68a0      	ldr	r0, [r4, #8]
    6d8a:	2100      	movs	r1, #0
    6d8c:	0092      	lsls	r2, r2, #2
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
    6d8e:	9303      	str	r3, [sp, #12]
    memset( T->p, 0, T->n * ciL );
    6d90:	f7ff f9a8 	bl	60e4 <memset>

    d = T->p;
    n = N->n;
    6d94:	f8d7 9004 	ldr.w	r9, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    6d98:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    6d9c:	68a6      	ldr	r6, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    6d9e:	454b      	cmp	r3, r9
    6da0:	bf28      	it	cs
    6da2:	464b      	movcs	r3, r9
    d = T->p;
    6da4:	46b0      	mov	r8, r6

    for( i = 0; i < n; i++ )
    6da6:	2500      	movs	r5, #0
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    6da8:	f109 0401 	add.w	r4, r9, #1
    m = ( B->n < n ) ? B->n : n;
    6dac:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    6dae:	00a4      	lsls	r4, r4, #2
    for( i = 0; i < n; i++ )
    6db0:	9b00      	ldr	r3, [sp, #0]
    6db2:	45a9      	cmp	r9, r5
    6db4:	6818      	ldr	r0, [r3, #0]
    6db6:	d120      	bne.n	6dfa <mpi_montmul.isra.0+0x82>
    6db8:	3c04      	subs	r4, #4
    6dba:	eb06 0804 	add.w	r8, r6, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    6dbe:	4622      	mov	r2, r4
    6dc0:	4641      	mov	r1, r8
    6dc2:	f7ff f964 	bl	608e <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    6dc6:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    6dca:	4641      	mov	r1, r8
    d[n] += 1;
    6dcc:	3301      	adds	r3, #1
    6dce:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    6dd2:	4628      	mov	r0, r5
    6dd4:	68ba      	ldr	r2, [r7, #8]
    6dd6:	f7ff fd14 	bl	6802 <mpi_sub_hlp>
    6dda:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    6dde:	1a18      	subs	r0, r3, r0
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    6de0:	9b00      	ldr	r3, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    6de2:	f846 0014 	str.w	r0, [r6, r4, lsl #1]
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    6de6:	681c      	ldr	r4, [r3, #0]
    for( i = 0; i < n; i++ )
    6de8:	2300      	movs	r3, #0
    6dea:	b2c0      	uxtb	r0, r0
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    6dec:	f1c0 0601 	rsb	r6, r0, #1
    for( i = 0; i < n; i++ )
    6df0:	429d      	cmp	r5, r3
    6df2:	d120      	bne.n	6e36 <mpi_montmul.isra.0+0xbe>
}
    6df4:	b005      	add	sp, #20
    6df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    6dfa:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    6dfe:	f850 b025 	ldr.w	fp, [r0, r5, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    6e02:	680b      	ldr	r3, [r1, #0]
    6e04:	f8d8 0000 	ldr.w	r0, [r8]
    6e08:	9a03      	ldr	r2, [sp, #12]
    6e0a:	fb03 030b 	mla	r3, r3, fp, r0
    6e0e:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    6e10:	9801      	ldr	r0, [sp, #4]
    6e12:	4642      	mov	r2, r8
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    6e14:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    6e16:	465b      	mov	r3, fp
    6e18:	f7ff fd10 	bl	683c <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    6e1c:	4642      	mov	r2, r8
    6e1e:	9b02      	ldr	r3, [sp, #8]
    6e20:	4648      	mov	r0, r9
    6e22:	68b9      	ldr	r1, [r7, #8]
    6e24:	f7ff fd0a 	bl	683c <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    6e28:	2300      	movs	r3, #0
    6e2a:	f848 bb04 	str.w	fp, [r8], #4
    6e2e:	f848 3004 	str.w	r3, [r8, r4]
    for( i = 0; i < n; i++ )
    6e32:	3501      	adds	r5, #1
    6e34:	e7bc      	b.n	6db0 <mpi_montmul.isra.0+0x38>
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    6e36:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    6e3a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    6e3e:	4341      	muls	r1, r0
    6e40:	fb02 1206 	mla	r2, r2, r6, r1
    6e44:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < n; i++ )
    6e48:	3301      	adds	r3, #1
    6e4a:	e7d1      	b.n	6df0 <mpi_montmul.isra.0+0x78>

00006e4c <mbedtls_mpi_init>:
    X->n = 0;
    6e4c:	2300      	movs	r3, #0
    6e4e:	2201      	movs	r2, #1
    X->p = NULL;
    6e50:	6083      	str	r3, [r0, #8]
    X->n = 0;
    6e52:	e9c0 2300 	strd	r2, r3, [r0]
}
    6e56:	4770      	bx	lr

00006e58 <mbedtls_mpi_free>:
{
    6e58:	b510      	push	{r4, lr}
    if( X == NULL )
    6e5a:	4604      	mov	r4, r0
    6e5c:	b168      	cbz	r0, 6e7a <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    6e5e:	6880      	ldr	r0, [r0, #8]
    6e60:	b130      	cbz	r0, 6e70 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    6e62:	6861      	ldr	r1, [r4, #4]
    6e64:	0089      	lsls	r1, r1, #2
    6e66:	f7fc ff71 	bl	3d4c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    6e6a:	68a0      	ldr	r0, [r4, #8]
    6e6c:	f7fc ff5e 	bl	3d2c <mbedtls_free>
    X->n = 0;
    6e70:	2300      	movs	r3, #0
    6e72:	2201      	movs	r2, #1
    6e74:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    6e78:	60a3      	str	r3, [r4, #8]
}
    6e7a:	bd10      	pop	{r4, pc}

00006e7c <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    6e7c:	f242 7310 	movw	r3, #10000	; 0x2710
    6e80:	4299      	cmp	r1, r3
{
    6e82:	b570      	push	{r4, r5, r6, lr}
    6e84:	4604      	mov	r4, r0
    6e86:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    6e88:	d902      	bls.n	6e90 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    6e8a:	f06f 000f 	mvn.w	r0, #15
}
    6e8e:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    6e90:	6843      	ldr	r3, [r0, #4]
    6e92:	428b      	cmp	r3, r1
    6e94:	d216      	bcs.n	6ec4 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    6e96:	2104      	movs	r1, #4
    6e98:	4628      	mov	r0, r5
    6e9a:	f7fc ff41 	bl	3d20 <mbedtls_calloc>
    6e9e:	4606      	mov	r6, r0
    6ea0:	2800      	cmp	r0, #0
    6ea2:	d0f2      	beq.n	6e8a <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    6ea4:	68a1      	ldr	r1, [r4, #8]
    6ea6:	b159      	cbz	r1, 6ec0 <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
    6ea8:	6862      	ldr	r2, [r4, #4]
    6eaa:	0092      	lsls	r2, r2, #2
    6eac:	f7ff f8ef 	bl	608e <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    6eb0:	6861      	ldr	r1, [r4, #4]
    6eb2:	68a0      	ldr	r0, [r4, #8]
    6eb4:	0089      	lsls	r1, r1, #2
    6eb6:	f7fc ff49 	bl	3d4c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    6eba:	68a0      	ldr	r0, [r4, #8]
    6ebc:	f7fc ff36 	bl	3d2c <mbedtls_free>
        X->p = p;
    6ec0:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
    6ec4:	2000      	movs	r0, #0
    6ec6:	e7e2      	b.n	6e8e <mbedtls_mpi_grow+0x12>

00006ec8 <mbedtls_mpi_copy>:
    if( X == Y )
    6ec8:	4288      	cmp	r0, r1
{
    6eca:	b570      	push	{r4, r5, r6, lr}
    6ecc:	4605      	mov	r5, r0
    6ece:	460e      	mov	r6, r1
    if( X == Y )
    6ed0:	d003      	beq.n	6eda <mbedtls_mpi_copy+0x12>
    if( Y->n == 0 )
    6ed2:	684c      	ldr	r4, [r1, #4]
    6ed4:	b93c      	cbnz	r4, 6ee6 <mbedtls_mpi_copy+0x1e>
        mbedtls_mpi_free( X );
    6ed6:	f7ff ffbf 	bl	6e58 <mbedtls_mpi_free>
        return( 0 );
    6eda:	2000      	movs	r0, #0
    6edc:	e011      	b.n	6f02 <mbedtls_mpi_copy+0x3a>
        if( Y->p[i] != 0 )
    6ede:	68b3      	ldr	r3, [r6, #8]
    6ee0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    6ee4:	b913      	cbnz	r3, 6eec <mbedtls_mpi_copy+0x24>
    for( i = Y->n - 1; i > 0; i-- )
    6ee6:	3c01      	subs	r4, #1
    6ee8:	2c00      	cmp	r4, #0
    6eea:	d1f8      	bne.n	6ede <mbedtls_mpi_copy+0x16>
    if( X->n < i )
    6eec:	686a      	ldr	r2, [r5, #4]
    X->s = Y->s;
    6eee:	6833      	ldr	r3, [r6, #0]
    i++;
    6ef0:	3401      	adds	r4, #1
    if( X->n < i )
    6ef2:	42a2      	cmp	r2, r4
    X->s = Y->s;
    6ef4:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    6ef6:	d205      	bcs.n	6f04 <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    6ef8:	4621      	mov	r1, r4
    6efa:	4628      	mov	r0, r5
    6efc:	f7ff ffbe 	bl	6e7c <mbedtls_mpi_grow>
    6f00:	b140      	cbz	r0, 6f14 <mbedtls_mpi_copy+0x4c>
}
    6f02:	bd70      	pop	{r4, r5, r6, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    6f04:	68a8      	ldr	r0, [r5, #8]
    6f06:	1b12      	subs	r2, r2, r4
    6f08:	2100      	movs	r1, #0
    6f0a:	0092      	lsls	r2, r2, #2
    6f0c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6f10:	f7ff f8e8 	bl	60e4 <memset>
    memcpy( X->p, Y->p, i * ciL );
    6f14:	68b1      	ldr	r1, [r6, #8]
    6f16:	68a8      	ldr	r0, [r5, #8]
    6f18:	00a2      	lsls	r2, r4, #2
    6f1a:	f7ff f8b8 	bl	608e <memcpy>
    6f1e:	e7dc      	b.n	6eda <mbedtls_mpi_copy+0x12>

00006f20 <mbedtls_mpi_lset>:
{
    6f20:	b570      	push	{r4, r5, r6, lr}
    6f22:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    6f24:	2101      	movs	r1, #1
{
    6f26:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    6f28:	f7ff ffa8 	bl	6e7c <mbedtls_mpi_grow>
    6f2c:	4605      	mov	r5, r0
    6f2e:	b988      	cbnz	r0, 6f54 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    6f30:	6862      	ldr	r2, [r4, #4]
    6f32:	4601      	mov	r1, r0
    6f34:	0092      	lsls	r2, r2, #2
    6f36:	68a0      	ldr	r0, [r4, #8]
    6f38:	f7ff f8d4 	bl	60e4 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    6f3c:	68a3      	ldr	r3, [r4, #8]
    6f3e:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    6f42:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    6f44:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    6f48:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    6f4a:	bfb4      	ite	lt
    6f4c:	f04f 33ff 	movlt.w	r3, #4294967295
    6f50:	2301      	movge	r3, #1
    6f52:	6023      	str	r3, [r4, #0]
}
    6f54:	4628      	mov	r0, r5
    6f56:	bd70      	pop	{r4, r5, r6, pc}

00006f58 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    6f58:	6843      	ldr	r3, [r0, #4]
    6f5a:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    6f5e:	bf3f      	itttt	cc
    6f60:	6883      	ldrcc	r3, [r0, #8]
    6f62:	094a      	lsrcc	r2, r1, #5
    6f64:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    6f68:	f001 011f 	andcc.w	r1, r1, #31
    6f6c:	bf3a      	itte	cc
    6f6e:	fa20 f101 	lsrcc.w	r1, r0, r1
    6f72:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
    6f76:	2000      	movcs	r0, #0
}
    6f78:	4770      	bx	lr

00006f7a <mbedtls_mpi_bitlen>:
{
    6f7a:	4602      	mov	r2, r0
    if( X->n == 0 )
    6f7c:	6840      	ldr	r0, [r0, #4]
    6f7e:	b188      	cbz	r0, 6fa4 <mbedtls_mpi_bitlen+0x2a>
    for( i = X->n - 1; i > 0; i-- )
    6f80:	6892      	ldr	r2, [r2, #8]
    6f82:	1e43      	subs	r3, r0, #1
    6f84:	b97b      	cbnz	r3, 6fa6 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
    6f86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    6f8a:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    6f8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
    6f90:	4211      	tst	r1, r2
    6f92:	d104      	bne.n	6f9e <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
    6f94:	3001      	adds	r0, #1
    6f96:	2820      	cmp	r0, #32
        mask >>= 1;
    6f98:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    6f9c:	d1f8      	bne.n	6f90 <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
    6f9e:	3301      	adds	r3, #1
    6fa0:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    6fa4:	4770      	bx	lr
        if( X->p[i] != 0 )
    6fa6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    6faa:	2900      	cmp	r1, #0
    6fac:	d1eb      	bne.n	6f86 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    6fae:	3b01      	subs	r3, #1
    6fb0:	e7e8      	b.n	6f84 <mbedtls_mpi_bitlen+0xa>

00006fb2 <mbedtls_mpi_size>:
{
    6fb2:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    6fb4:	f7ff ffe1 	bl	6f7a <mbedtls_mpi_bitlen>
    6fb8:	3007      	adds	r0, #7
}
    6fba:	08c0      	lsrs	r0, r0, #3
    6fbc:	bd08      	pop	{r3, pc}

00006fbe <mbedtls_mpi_read_binary>:
{
    6fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    6fc2:	f012 0503 	ands.w	r5, r2, #3
    6fc6:	bf18      	it	ne
    6fc8:	2501      	movne	r5, #1
    if( X->n != limbs )
    6fca:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    6fcc:	eb05 0592 	add.w	r5, r5, r2, lsr #2
    if( X->n != limbs )
    6fd0:	42ab      	cmp	r3, r5
{
    6fd2:	4604      	mov	r4, r0
    6fd4:	4688      	mov	r8, r1
    6fd6:	4617      	mov	r7, r2
    if( X->n != limbs )
    6fd8:	d108      	bne.n	6fec <mbedtls_mpi_read_binary+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    6fda:	2100      	movs	r1, #0
    6fdc:	4620      	mov	r0, r4
    6fde:	f7ff ff9f 	bl	6f20 <mbedtls_mpi_lset>
    6fe2:	4606      	mov	r6, r0
    6fe4:	b188      	cbz	r0, 700a <mbedtls_mpi_read_binary+0x4c>
}
    6fe6:	4630      	mov	r0, r6
    6fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_mpi_free( X );
    6fec:	f7ff ff34 	bl	6e58 <mbedtls_mpi_free>
    X->n = 0;
    6ff0:	2300      	movs	r3, #0
    6ff2:	2201      	movs	r2, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    6ff4:	4629      	mov	r1, r5
    6ff6:	4620      	mov	r0, r4
    X->n = 0;
    6ff8:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    6ffc:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    6ffe:	f7ff ff3d 	bl	6e7c <mbedtls_mpi_grow>
    7002:	4606      	mov	r6, r0
    7004:	2800      	cmp	r0, #0
    7006:	d0e8      	beq.n	6fda <mbedtls_mpi_read_binary+0x1c>
    7008:	e7ed      	b.n	6fe6 <mbedtls_mpi_read_binary+0x28>
    if( buf != NULL )
    700a:	f1b8 0f00 	cmp.w	r8, #0
    700e:	d0ea      	beq.n	6fe6 <mbedtls_mpi_read_binary+0x28>
        memcpy( Xp + overhead, buf, buflen );
    7010:	68a3      	ldr	r3, [r4, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    7012:	ebc7 0085 	rsb	r0, r7, r5, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    7016:	463a      	mov	r2, r7
    7018:	4641      	mov	r1, r8
    701a:	4418      	add	r0, r3
    701c:	f7ff f837 	bl	608e <memcpy>
    if( limbs == 0 )
    7020:	2d00      	cmp	r5, #0
    7022:	d0e0      	beq.n	6fe6 <mbedtls_mpi_read_binary+0x28>
    7024:	4629      	mov	r1, r5
    7026:	68a0      	ldr	r0, [r4, #8]
    7028:	f7ff fe7d 	bl	6d26 <mpi_bigendian_to_host.part.0>
    return( ret );
    702c:	e7db      	b.n	6fe6 <mbedtls_mpi_read_binary+0x28>

0000702e <mbedtls_mpi_write_binary>:
{
    702e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7030:	4604      	mov	r4, r0
    stored_bytes = X->n * ciL;
    7032:	6863      	ldr	r3, [r4, #4]
{
    7034:	4608      	mov	r0, r1
    if( stored_bytes < buflen )
    7036:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    703a:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    703e:	d91c      	bls.n	707a <mbedtls_mpi_write_binary+0x4c>
        p = buf + buflen - stored_bytes;
    7040:	1b52      	subs	r2, r2, r5
    7042:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    7044:	2100      	movs	r1, #0
    7046:	f7ff f84d 	bl	60e4 <memset>
        p = buf + buflen - stored_bytes;
    704a:	4630      	mov	r0, r6
    704c:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    704e:	2300      	movs	r3, #0
    7050:	1881      	adds	r1, r0, r2
    7052:	429a      	cmp	r2, r3
    7054:	d113      	bne.n	707e <mbedtls_mpi_write_binary+0x50>
    return( 0 );
    7056:	2000      	movs	r0, #0
}
    7058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    705a:	68a7      	ldr	r7, [r4, #8]
    705c:	f003 0103 	and.w	r1, r3, #3
    7060:	f023 0c03 	bic.w	ip, r3, #3
    7064:	00ce      	lsls	r6, r1, #3
    7066:	f857 100c 	ldr.w	r1, [r7, ip]
    706a:	40f1      	lsrs	r1, r6
    706c:	f011 0fff 	tst.w	r1, #255	; 0xff
    7070:	d111      	bne.n	7096 <mbedtls_mpi_write_binary+0x68>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    7072:	3301      	adds	r3, #1
    7074:	42ab      	cmp	r3, r5
    7076:	d1f0      	bne.n	705a <mbedtls_mpi_write_binary+0x2c>
    7078:	e7e9      	b.n	704e <mbedtls_mpi_write_binary+0x20>
    707a:	4613      	mov	r3, r2
    707c:	e7fa      	b.n	7074 <mbedtls_mpi_write_binary+0x46>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    707e:	68a7      	ldr	r7, [r4, #8]
    7080:	f003 0003 	and.w	r0, r3, #3
    7084:	f023 0603 	bic.w	r6, r3, #3
    7088:	00c5      	lsls	r5, r0, #3
    708a:	59b8      	ldr	r0, [r7, r6]
    for( i = 0; i < bytes_to_copy; i++ )
    708c:	3301      	adds	r3, #1
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    708e:	40e8      	lsrs	r0, r5
    7090:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    7094:	e7dd      	b.n	7052 <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    7096:	f06f 0007 	mvn.w	r0, #7
    709a:	e7dd      	b.n	7058 <mbedtls_mpi_write_binary+0x2a>

0000709c <mbedtls_mpi_shift_l>:
{
    709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    709e:	4604      	mov	r4, r0
    70a0:	460e      	mov	r6, r1
    v0 = count / (biL    );
    70a2:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
    70a4:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    70a8:	f7ff ff67 	bl	6f7a <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    70ac:	6863      	ldr	r3, [r4, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    70ae:	4430      	add	r0, r6
    if( X->n * biL < i )
    70b0:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    70b4:	d805      	bhi.n	70c2 <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    70b6:	2e1f      	cmp	r6, #31
    70b8:	d80f      	bhi.n	70da <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    70ba:	2f00      	cmp	r7, #0
    70bc:	d13a      	bne.n	7134 <mbedtls_mpi_shift_l+0x98>
    ret = 0;
    70be:	2000      	movs	r0, #0
    70c0:	e00a      	b.n	70d8 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    70c2:	f010 011f 	ands.w	r1, r0, #31
    70c6:	bf18      	it	ne
    70c8:	2101      	movne	r1, #1
    70ca:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    70ce:	4620      	mov	r0, r4
    70d0:	f7ff fed4 	bl	6e7c <mbedtls_mpi_grow>
    70d4:	2800      	cmp	r0, #0
    70d6:	d0ee      	beq.n	70b6 <mbedtls_mpi_shift_l+0x1a>
}
    70d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    70da:	f06f 0003 	mvn.w	r0, #3
    70de:	6863      	ldr	r3, [r4, #4]
    70e0:	4368      	muls	r0, r5
    70e2:	4619      	mov	r1, r3
    70e4:	009a      	lsls	r2, r3, #2
    70e6:	42a9      	cmp	r1, r5
    70e8:	f1a2 0204 	sub.w	r2, r2, #4
    70ec:	d80a      	bhi.n	7104 <mbedtls_mpi_shift_l+0x68>
    70ee:	42ab      	cmp	r3, r5
    70f0:	bf28      	it	cs
    70f2:	462b      	movcs	r3, r5
            X->p[i - 1] = 0;
    70f4:	2200      	movs	r2, #0
    70f6:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    70f8:	3b04      	subs	r3, #4
    70fa:	1d19      	adds	r1, r3, #4
    70fc:	d0dd      	beq.n	70ba <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    70fe:	68a1      	ldr	r1, [r4, #8]
    7100:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    7102:	e7f9      	b.n	70f8 <mbedtls_mpi_shift_l+0x5c>
            X->p[i - 1] = X->p[i - v0 - 1];
    7104:	68a6      	ldr	r6, [r4, #8]
        for( i = X->n; i > v0; i-- )
    7106:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    7108:	eb06 0c02 	add.w	ip, r6, r2
    710c:	f85c c000 	ldr.w	ip, [ip, r0]
    7110:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    7114:	e7e7      	b.n	70e6 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    7116:	68a0      	ldr	r0, [r4, #8]
    7118:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
            X->p[i] <<= t1;
    711c:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    7120:	4313      	orrs	r3, r2
    7122:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            r0 = r1;
    7126:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    712a:	3501      	adds	r5, #1
    712c:	6863      	ldr	r3, [r4, #4]
    712e:	42ab      	cmp	r3, r5
    7130:	d8f1      	bhi.n	7116 <mbedtls_mpi_shift_l+0x7a>
    7132:	e7c4      	b.n	70be <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    7134:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    7136:	f1c7 0620 	rsb	r6, r7, #32
    713a:	e7f7      	b.n	712c <mbedtls_mpi_shift_l+0x90>

0000713c <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    713c:	6843      	ldr	r3, [r0, #4]
{
    713e:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    7140:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7142:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    7144:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7148:	d301      	bcc.n	714e <mbedtls_mpi_shift_r+0x12>
    714a:	d104      	bne.n	7156 <mbedtls_mpi_shift_r+0x1a>
    714c:	b36a      	cbz	r2, 71aa <mbedtls_mpi_shift_r+0x6e>
}
    714e:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    7150:	2100      	movs	r1, #0
    7152:	f7ff bee5 	b.w	6f20 <mbedtls_mpi_lset>
    if( v0 > 0 )
    7156:	291f      	cmp	r1, #31
    7158:	d829      	bhi.n	71ae <mbedtls_mpi_shift_r+0x72>
    if( v1 > 0 )
    715a:	b9aa      	cbnz	r2, 7188 <mbedtls_mpi_shift_r+0x4c>
}
    715c:	bcf0      	pop	{r4, r5, r6, r7}
    715e:	2000      	movs	r0, #0
    7160:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
    7162:	6885      	ldr	r5, [r0, #8]
    7164:	586e      	ldr	r6, [r5, r1]
    7166:	3104      	adds	r1, #4
    7168:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    716c:	3301      	adds	r3, #1
    716e:	6845      	ldr	r5, [r0, #4]
    7170:	1b2d      	subs	r5, r5, r4
    7172:	429d      	cmp	r5, r3
    7174:	d8f5      	bhi.n	7162 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
    7176:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    7178:	6841      	ldr	r1, [r0, #4]
    717a:	4299      	cmp	r1, r3
    717c:	d9ed      	bls.n	715a <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
    717e:	6881      	ldr	r1, [r0, #8]
    7180:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    7184:	3301      	adds	r3, #1
    7186:	e7f7      	b.n	7178 <mbedtls_mpi_shift_r+0x3c>
    mbedtls_mpi_uint r0 = 0, r1;
    7188:	2400      	movs	r4, #0
        for( i = X->n; i > 0; i-- )
    718a:	6843      	ldr	r3, [r0, #4]
            r1 = X->p[i - 1] << (biL - v1);
    718c:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    7190:	3b01      	subs	r3, #1
    7192:	d3e3      	bcc.n	715c <mbedtls_mpi_shift_r+0x20>
            r1 = X->p[i - 1] << (biL - v1);
    7194:	6886      	ldr	r6, [r0, #8]
    7196:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    719a:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    719e:	4321      	orrs	r1, r4
    71a0:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    71a4:	fa05 f407 	lsl.w	r4, r5, r7
    71a8:	e7f2      	b.n	7190 <mbedtls_mpi_shift_r+0x54>
    if( v0 > 0 )
    71aa:	291f      	cmp	r1, #31
    71ac:	d9d6      	bls.n	715c <mbedtls_mpi_shift_r+0x20>
{
    71ae:	2300      	movs	r3, #0
    71b0:	00a1      	lsls	r1, r4, #2
    71b2:	e7dc      	b.n	716e <mbedtls_mpi_shift_r+0x32>

000071b4 <mbedtls_mpi_cmp_abs>:
{
    71b4:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    71b6:	6843      	ldr	r3, [r0, #4]
    71b8:	b92b      	cbnz	r3, 71c6 <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
    71ba:	684a      	ldr	r2, [r1, #4]
    71bc:	b962      	cbnz	r2, 71d8 <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
    71be:	1e18      	subs	r0, r3, #0
    71c0:	bf18      	it	ne
    71c2:	2001      	movne	r0, #1
    71c4:	e028      	b.n	7218 <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
    71c6:	6882      	ldr	r2, [r0, #8]
    71c8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    71cc:	f852 2c04 	ldr.w	r2, [r2, #-4]
    71d0:	2a00      	cmp	r2, #0
    71d2:	d1f2      	bne.n	71ba <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    71d4:	3b01      	subs	r3, #1
    71d6:	e7ef      	b.n	71b8 <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    71d8:	688c      	ldr	r4, [r1, #8]
    71da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
    71de:	f855 5c04 	ldr.w	r5, [r5, #-4]
    71e2:	b985      	cbnz	r5, 7206 <mbedtls_mpi_cmp_abs+0x52>
    for( j = Y->n; j > 0; j-- )
    71e4:	3a01      	subs	r2, #1
    71e6:	e7e9      	b.n	71bc <mbedtls_mpi_cmp_abs+0x8>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    71e8:	6882      	ldr	r2, [r0, #8]
    71ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    71ee:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    71f2:	4291      	cmp	r1, r2
    71f4:	d805      	bhi.n	7202 <mbedtls_mpi_cmp_abs+0x4e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    71f6:	f103 33ff 	add.w	r3, r3, #4294967295
    71fa:	d20a      	bcs.n	7212 <mbedtls_mpi_cmp_abs+0x5e>
    if( j > i ) return( -1 );
    71fc:	f04f 30ff 	mov.w	r0, #4294967295
    7200:	e00a      	b.n	7218 <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
    7202:	2001      	movs	r0, #1
    7204:	e008      	b.n	7218 <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
    7206:	b10b      	cbz	r3, 720c <mbedtls_mpi_cmp_abs+0x58>
    if( i > j ) return(  1 );
    7208:	4293      	cmp	r3, r2
    720a:	d8fa      	bhi.n	7202 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
    720c:	4293      	cmp	r3, r2
    720e:	d3f5      	bcc.n	71fc <mbedtls_mpi_cmp_abs+0x48>
    7210:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
    7212:	1c5a      	adds	r2, r3, #1
    7214:	d1e8      	bne.n	71e8 <mbedtls_mpi_cmp_abs+0x34>
    return( 0 );
    7216:	2000      	movs	r0, #0
}
    7218:	bd30      	pop	{r4, r5, pc}

0000721a <mbedtls_mpi_cmp_mpi>:
{
    721a:	4602      	mov	r2, r0
    721c:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    721e:	6843      	ldr	r3, [r0, #4]
    7220:	b923      	cbnz	r3, 722c <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    7222:	6848      	ldr	r0, [r1, #4]
    7224:	b958      	cbnz	r0, 723e <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    7226:	2b00      	cmp	r3, #0
    7228:	d138      	bne.n	729c <mbedtls_mpi_cmp_mpi+0x82>
    722a:	e031      	b.n	7290 <mbedtls_mpi_cmp_mpi+0x76>
        if( X->p[i - 1] != 0 )
    722c:	6890      	ldr	r0, [r2, #8]
    722e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7232:	f850 0c04 	ldr.w	r0, [r0, #-4]
    7236:	2800      	cmp	r0, #0
    7238:	d1f3      	bne.n	7222 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    723a:	3b01      	subs	r3, #1
    723c:	e7f0      	b.n	7220 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    723e:	688c      	ldr	r4, [r1, #8]
    7240:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    7244:	f855 5c04 	ldr.w	r5, [r5, #-4]
    7248:	bb25      	cbnz	r5, 7294 <mbedtls_mpi_cmp_mpi+0x7a>
    for( j = Y->n; j > 0; j-- )
    724a:	3801      	subs	r0, #1
    724c:	e7ea      	b.n	7224 <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
    724e:	4283      	cmp	r3, r0
    7250:	6809      	ldr	r1, [r1, #0]
    7252:	d201      	bcs.n	7258 <mbedtls_mpi_cmp_mpi+0x3e>
    7254:	4248      	negs	r0, r1
    7256:	e022      	b.n	729e <mbedtls_mpi_cmp_mpi+0x84>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    7258:	6810      	ldr	r0, [r2, #0]
    725a:	2800      	cmp	r0, #0
    725c:	dd03      	ble.n	7266 <mbedtls_mpi_cmp_mpi+0x4c>
    725e:	2900      	cmp	r1, #0
    7260:	da13      	bge.n	728a <mbedtls_mpi_cmp_mpi+0x70>
    7262:	2001      	movs	r0, #1
    7264:	e01b      	b.n	729e <mbedtls_mpi_cmp_mpi+0x84>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    7266:	2900      	cmp	r1, #0
    7268:	dd0f      	ble.n	728a <mbedtls_mpi_cmp_mpi+0x70>
    726a:	b170      	cbz	r0, 728a <mbedtls_mpi_cmp_mpi+0x70>
    726c:	f04f 30ff 	mov.w	r0, #4294967295
    7270:	e015      	b.n	729e <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    7272:	6891      	ldr	r1, [r2, #8]
    7274:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    7278:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    727c:	428d      	cmp	r5, r1
    727e:	d80e      	bhi.n	729e <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    7280:	f103 33ff 	add.w	r3, r3, #4294967295
    7284:	d202      	bcs.n	728c <mbedtls_mpi_cmp_mpi+0x72>
    7286:	4240      	negs	r0, r0
    7288:	e009      	b.n	729e <mbedtls_mpi_cmp_mpi+0x84>
    728a:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
    728c:	1c59      	adds	r1, r3, #1
    728e:	d1f0      	bne.n	7272 <mbedtls_mpi_cmp_mpi+0x58>
    return( 0 );
    7290:	2000      	movs	r0, #0
    7292:	e004      	b.n	729e <mbedtls_mpi_cmp_mpi+0x84>
    if( i == 0 && j == 0 )
    7294:	2b00      	cmp	r3, #0
    7296:	d0da      	beq.n	724e <mbedtls_mpi_cmp_mpi+0x34>
    if( i > j ) return(  X->s );
    7298:	4283      	cmp	r3, r0
    729a:	d9d8      	bls.n	724e <mbedtls_mpi_cmp_mpi+0x34>
    729c:	6810      	ldr	r0, [r2, #0]
}
    729e:	bd30      	pop	{r4, r5, pc}

000072a0 <mbedtls_mpi_cmp_int>:
{
    72a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    72a2:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    72a6:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    72aa:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    72ac:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    72ae:	bfb4      	ite	lt
    72b0:	f04f 33ff 	movlt.w	r3, #4294967295
    72b4:	2301      	movge	r3, #1
    72b6:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    72b8:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    72ba:	a901      	add	r1, sp, #4
    Y.n = 1;
    72bc:	9302      	str	r3, [sp, #8]
    Y.p = p;
    72be:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    72c2:	f7ff ffaa 	bl	721a <mbedtls_mpi_cmp_mpi>
}
    72c6:	b005      	add	sp, #20
    72c8:	f85d fb04 	ldr.w	pc, [sp], #4

000072cc <mbedtls_mpi_add_abs>:
    if( X == B )
    72cc:	4290      	cmp	r0, r2
{
    72ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72d2:	4607      	mov	r7, r0
    72d4:	460d      	mov	r5, r1
    72d6:	4616      	mov	r6, r2
    if( X == B )
    72d8:	d002      	beq.n	72e0 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    72da:	4288      	cmp	r0, r1
    72dc:	d129      	bne.n	7332 <mbedtls_mpi_add_abs+0x66>
{
    72de:	4635      	mov	r5, r6
    X->s = 1;
    72e0:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    72e2:	686e      	ldr	r6, [r5, #4]
    X->s = 1;
    72e4:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    72e6:	bb66      	cbnz	r6, 7342 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    72e8:	4631      	mov	r1, r6
    72ea:	4638      	mov	r0, r7
    72ec:	f7ff fdc6 	bl	6e7c <mbedtls_mpi_grow>
    72f0:	4604      	mov	r4, r0
    72f2:	bb18      	cbnz	r0, 733c <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    72f4:	68a9      	ldr	r1, [r5, #8]
    72f6:	4605      	mov	r5, r0
    72f8:	68bb      	ldr	r3, [r7, #8]
    for( i = 0; i < j; i++, o++, p++ )
    72fa:	4286      	cmp	r6, r0
    72fc:	d12a      	bne.n	7354 <mbedtls_mpi_add_abs+0x88>
    72fe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    while( c != 0 )
    7302:	b1dd      	cbz	r5, 733c <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    7304:	687a      	ldr	r2, [r7, #4]
    7306:	f106 0801 	add.w	r8, r6, #1
    730a:	42b2      	cmp	r2, r6
    730c:	d808      	bhi.n	7320 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    730e:	4641      	mov	r1, r8
    7310:	4638      	mov	r0, r7
    7312:	f7ff fdb3 	bl	6e7c <mbedtls_mpi_grow>
    7316:	2800      	cmp	r0, #0
    7318:	d12f      	bne.n	737a <mbedtls_mpi_add_abs+0xae>
            p = X->p + i;
    731a:	68bb      	ldr	r3, [r7, #8]
    731c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    7320:	681a      	ldr	r2, [r3, #0]
    7322:	4646      	mov	r6, r8
    7324:	1955      	adds	r5, r2, r5
    7326:	f843 5b04 	str.w	r5, [r3], #4
    732a:	bf2c      	ite	cs
    732c:	2501      	movcs	r5, #1
    732e:	2500      	movcc	r5, #0
    7330:	e7e7      	b.n	7302 <mbedtls_mpi_add_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    7332:	f7ff fdc9 	bl	6ec8 <mbedtls_mpi_copy>
    7336:	4604      	mov	r4, r0
    7338:	2800      	cmp	r0, #0
    733a:	d0d0      	beq.n	72de <mbedtls_mpi_add_abs+0x12>
}
    733c:	4620      	mov	r0, r4
    733e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    7342:	68ab      	ldr	r3, [r5, #8]
    7344:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    7348:	f853 3c04 	ldr.w	r3, [r3, #-4]
    734c:	2b00      	cmp	r3, #0
    734e:	d1cb      	bne.n	72e8 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    7350:	3e01      	subs	r6, #1
    7352:	e7c8      	b.n	72e6 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    7354:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    7358:	eb12 0c05 	adds.w	ip, r2, r5
    735c:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
    7360:	bf2c      	ite	cs
    7362:	2501      	movcs	r5, #1
    7364:	2500      	movcc	r5, #0
        *p += tmp; c += ( *p < tmp );
    7366:	eb1c 0202 	adds.w	r2, ip, r2
    736a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    736e:	bf2c      	ite	cs
    7370:	2201      	movcs	r2, #1
    7372:	2200      	movcc	r2, #0
    for( i = 0; i < j; i++, o++, p++ )
    7374:	3001      	adds	r0, #1
        *p += tmp; c += ( *p < tmp );
    7376:	4415      	add	r5, r2
    for( i = 0; i < j; i++, o++, p++ )
    7378:	e7bf      	b.n	72fa <mbedtls_mpi_add_abs+0x2e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    737a:	4604      	mov	r4, r0
    return( ret );
    737c:	e7de      	b.n	733c <mbedtls_mpi_add_abs+0x70>

0000737e <mbedtls_mpi_sub_abs>:
{
    737e:	b5f0      	push	{r4, r5, r6, r7, lr}
    7380:	4617      	mov	r7, r2
    X->n = 0;
    7382:	2300      	movs	r3, #0
    7384:	2201      	movs	r2, #1
{
    7386:	b085      	sub	sp, #20
    if( X == B )
    7388:	42b8      	cmp	r0, r7
{
    738a:	4606      	mov	r6, r0
    738c:	460d      	mov	r5, r1
    X->n = 0;
    738e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
    7392:	9303      	str	r3, [sp, #12]
    if( X == B )
    7394:	d106      	bne.n	73a4 <mbedtls_mpi_sub_abs+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    7396:	4601      	mov	r1, r0
    7398:	a801      	add	r0, sp, #4
    739a:	f7ff fd95 	bl	6ec8 <mbedtls_mpi_copy>
    739e:	4604      	mov	r4, r0
    73a0:	bb28      	cbnz	r0, 73ee <mbedtls_mpi_sub_abs+0x70>
        B = &TB;
    73a2:	af01      	add	r7, sp, #4
    if( X != A )
    73a4:	42ae      	cmp	r6, r5
    73a6:	d11b      	bne.n	73e0 <mbedtls_mpi_sub_abs+0x62>
    X->s = 1;
    73a8:	e9d7 5201 	ldrd	r5, r2, [r7, #4]
    73ac:	2301      	movs	r3, #1
    73ae:	6033      	str	r3, [r6, #0]
    for( n = B->n; n > 0; n-- )
    73b0:	bb1d      	cbnz	r5, 73fa <mbedtls_mpi_sub_abs+0x7c>
    carry = mpi_sub_hlp( n, X->p, B->p );
    73b2:	4628      	mov	r0, r5
    73b4:	68b1      	ldr	r1, [r6, #8]
    73b6:	f7ff fa24 	bl	6802 <mpi_sub_hlp>
    if( carry != 0 )
    73ba:	4604      	mov	r4, r0
    73bc:	b1b8      	cbz	r0, 73ee <mbedtls_mpi_sub_abs+0x70>
            --X->p[n];
    73be:	f04f 31ff 	mov.w	r1, #4294967295
        for( ; n < X->n && X->p[n] == 0; n++ )
    73c2:	6873      	ldr	r3, [r6, #4]
    73c4:	42ab      	cmp	r3, r5
    73c6:	d924      	bls.n	7412 <mbedtls_mpi_sub_abs+0x94>
    73c8:	68b3      	ldr	r3, [r6, #8]
    73ca:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    73ce:	b1e2      	cbz	r2, 740a <mbedtls_mpi_sub_abs+0x8c>
        --X->p[n];
    73d0:	68b2      	ldr	r2, [r6, #8]
    ret = 0;
    73d2:	2400      	movs	r4, #0
        --X->p[n];
    73d4:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    73d8:	3b01      	subs	r3, #1
    73da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    73de:	e006      	b.n	73ee <mbedtls_mpi_sub_abs+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    73e0:	4629      	mov	r1, r5
    73e2:	4630      	mov	r0, r6
    73e4:	f7ff fd70 	bl	6ec8 <mbedtls_mpi_copy>
    73e8:	4604      	mov	r4, r0
    73ea:	2800      	cmp	r0, #0
    73ec:	d0dc      	beq.n	73a8 <mbedtls_mpi_sub_abs+0x2a>
    mbedtls_mpi_free( &TB );
    73ee:	a801      	add	r0, sp, #4
    73f0:	f7ff fd32 	bl	6e58 <mbedtls_mpi_free>
}
    73f4:	4620      	mov	r0, r4
    73f6:	b005      	add	sp, #20
    73f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
    73fa:	eb02 0385 	add.w	r3, r2, r5, lsl #2
    73fe:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7402:	2b00      	cmp	r3, #0
    7404:	d1d5      	bne.n	73b2 <mbedtls_mpi_sub_abs+0x34>
    for( n = B->n; n > 0; n-- )
    7406:	3d01      	subs	r5, #1
    7408:	e7d2      	b.n	73b0 <mbedtls_mpi_sub_abs+0x32>
            --X->p[n];
    740a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    740e:	3501      	adds	r5, #1
    7410:	e7d7      	b.n	73c2 <mbedtls_mpi_sub_abs+0x44>
        if( n == X->n )
    7412:	d1dd      	bne.n	73d0 <mbedtls_mpi_sub_abs+0x52>
            return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7414:	f06f 0409 	mvn.w	r4, #9
    7418:	e7ec      	b.n	73f4 <mbedtls_mpi_sub_abs+0x76>

0000741a <mbedtls_mpi_add_mpi>:
{
    741a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    741c:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
    741e:	6813      	ldr	r3, [r2, #0]
{
    7420:	4604      	mov	r4, r0
    if( A->s * B->s < 0 )
    7422:	436b      	muls	r3, r5
{
    7424:	460f      	mov	r7, r1
    7426:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    7428:	d516      	bpl.n	7458 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    742a:	4611      	mov	r1, r2
    742c:	4638      	mov	r0, r7
    742e:	f7ff fec1 	bl	71b4 <mbedtls_mpi_cmp_abs>
    7432:	2800      	cmp	r0, #0
    7434:	db06      	blt.n	7444 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    7436:	4632      	mov	r2, r6
    7438:	4639      	mov	r1, r7
    743a:	4620      	mov	r0, r4
    743c:	f7ff ff9f 	bl	737e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7440:	b140      	cbz	r0, 7454 <mbedtls_mpi_add_mpi+0x3a>
}
    7442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7444:	463a      	mov	r2, r7
    7446:	4631      	mov	r1, r6
    7448:	4620      	mov	r0, r4
    744a:	f7ff ff98 	bl	737e <mbedtls_mpi_sub_abs>
    744e:	2800      	cmp	r0, #0
    7450:	d1f7      	bne.n	7442 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    7452:	426d      	negs	r5, r5
        X->s = s;
    7454:	6025      	str	r5, [r4, #0]
    return( ret );
    7456:	e7f4      	b.n	7442 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7458:	f7ff ff38 	bl	72cc <mbedtls_mpi_add_abs>
    745c:	e7f0      	b.n	7440 <mbedtls_mpi_add_mpi+0x26>

0000745e <mbedtls_mpi_sub_mpi>:
{
    745e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    7460:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
    7462:	6813      	ldr	r3, [r2, #0]
{
    7464:	4604      	mov	r4, r0
    if( A->s * B->s > 0 )
    7466:	436b      	muls	r3, r5
    7468:	2b00      	cmp	r3, #0
{
    746a:	460f      	mov	r7, r1
    746c:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    746e:	dd16      	ble.n	749e <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    7470:	4611      	mov	r1, r2
    7472:	4638      	mov	r0, r7
    7474:	f7ff fe9e 	bl	71b4 <mbedtls_mpi_cmp_abs>
    7478:	2800      	cmp	r0, #0
    747a:	db06      	blt.n	748a <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    747c:	4632      	mov	r2, r6
    747e:	4639      	mov	r1, r7
    7480:	4620      	mov	r0, r4
    7482:	f7ff ff7c 	bl	737e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7486:	b140      	cbz	r0, 749a <mbedtls_mpi_sub_mpi+0x3c>
}
    7488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    748a:	463a      	mov	r2, r7
    748c:	4631      	mov	r1, r6
    748e:	4620      	mov	r0, r4
    7490:	f7ff ff75 	bl	737e <mbedtls_mpi_sub_abs>
    7494:	2800      	cmp	r0, #0
    7496:	d1f7      	bne.n	7488 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    7498:	426d      	negs	r5, r5
        X->s = s;
    749a:	6025      	str	r5, [r4, #0]
    return( ret );
    749c:	e7f4      	b.n	7488 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    749e:	f7ff ff15 	bl	72cc <mbedtls_mpi_add_abs>
    74a2:	e7f0      	b.n	7486 <mbedtls_mpi_sub_mpi+0x28>

000074a4 <mbedtls_mpi_mul_mpi>:
{
    74a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
    74a8:	2300      	movs	r3, #0
{
    74aa:	4615      	mov	r5, r2
    X->n = 0;
    74ac:	2201      	movs	r2, #1
{
    74ae:	b087      	sub	sp, #28
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    74b0:	4288      	cmp	r0, r1
{
    74b2:	4680      	mov	r8, r0
    74b4:	460e      	mov	r6, r1
    X->n = 0;
    74b6:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
    74ba:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
    74be:	e9cd 3304 	strd	r3, r3, [sp, #16]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    74c2:	d105      	bne.n	74d0 <mbedtls_mpi_mul_mpi+0x2c>
    74c4:	4668      	mov	r0, sp
    74c6:	f7ff fcff 	bl	6ec8 <mbedtls_mpi_copy>
    74ca:	4604      	mov	r4, r0
    74cc:	b9e8      	cbnz	r0, 750a <mbedtls_mpi_mul_mpi+0x66>
    74ce:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    74d0:	45a8      	cmp	r8, r5
    74d2:	d106      	bne.n	74e2 <mbedtls_mpi_mul_mpi+0x3e>
    74d4:	4641      	mov	r1, r8
    74d6:	a803      	add	r0, sp, #12
    74d8:	f7ff fcf6 	bl	6ec8 <mbedtls_mpi_copy>
    74dc:	4604      	mov	r4, r0
    74de:	b9a0      	cbnz	r0, 750a <mbedtls_mpi_mul_mpi+0x66>
    74e0:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
    74e2:	f8d6 9004 	ldr.w	r9, [r6, #4]
    74e6:	f1b9 0f00 	cmp.w	r9, #0
    74ea:	d118      	bne.n	751e <mbedtls_mpi_mul_mpi+0x7a>
    for( j = B->n; j > 0; j-- )
    74ec:	686f      	ldr	r7, [r5, #4]
    74ee:	bb07      	cbnz	r7, 7532 <mbedtls_mpi_mul_mpi+0x8e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    74f0:	4640      	mov	r0, r8
    74f2:	eb09 0107 	add.w	r1, r9, r7
    74f6:	f7ff fcc1 	bl	6e7c <mbedtls_mpi_grow>
    74fa:	4604      	mov	r4, r0
    74fc:	b928      	cbnz	r0, 750a <mbedtls_mpi_mul_mpi+0x66>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    74fe:	4601      	mov	r1, r0
    7500:	4640      	mov	r0, r8
    7502:	f7ff fd0d 	bl	6f20 <mbedtls_mpi_lset>
    7506:	4604      	mov	r4, r0
    7508:	b338      	cbz	r0, 755a <mbedtls_mpi_mul_mpi+0xb6>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    750a:	a803      	add	r0, sp, #12
    750c:	f7ff fca4 	bl	6e58 <mbedtls_mpi_free>
    7510:	4668      	mov	r0, sp
    7512:	f7ff fca1 	bl	6e58 <mbedtls_mpi_free>
}
    7516:	4620      	mov	r0, r4
    7518:	b007      	add	sp, #28
    751a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( A->p[i - 1] != 0 )
    751e:	68b3      	ldr	r3, [r6, #8]
    7520:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    7524:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7528:	2b00      	cmp	r3, #0
    752a:	d1df      	bne.n	74ec <mbedtls_mpi_mul_mpi+0x48>
    for( i = A->n; i > 0; i-- )
    752c:	f109 39ff 	add.w	r9, r9, #4294967295
    7530:	e7d9      	b.n	74e6 <mbedtls_mpi_mul_mpi+0x42>
        if( B->p[j - 1] != 0 )
    7532:	68ab      	ldr	r3, [r5, #8]
    7534:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    7538:	f853 3c04 	ldr.w	r3, [r3, #-4]
    753c:	2b00      	cmp	r3, #0
    753e:	d1d7      	bne.n	74f0 <mbedtls_mpi_mul_mpi+0x4c>
    for( j = B->n; j > 0; j-- )
    7540:	3f01      	subs	r7, #1
    7542:	e7d4      	b.n	74ee <mbedtls_mpi_mul_mpi+0x4a>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    7544:	68ab      	ldr	r3, [r5, #8]
    7546:	f8d8 2008 	ldr.w	r2, [r8, #8]
    754a:	4648      	mov	r0, r9
    754c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    7550:	68b1      	ldr	r1, [r6, #8]
    7552:	eb02 0287 	add.w	r2, r2, r7, lsl #2
    7556:	f7ff f971 	bl	683c <mpi_mul_hlp>
    for( ; j > 0; j-- )
    755a:	3f01      	subs	r7, #1
    755c:	d2f2      	bcs.n	7544 <mbedtls_mpi_mul_mpi+0xa0>
    X->s = A->s * B->s;
    755e:	6832      	ldr	r2, [r6, #0]
    7560:	682b      	ldr	r3, [r5, #0]
    7562:	4353      	muls	r3, r2
    7564:	f8c8 3000 	str.w	r3, [r8]
    7568:	e7cf      	b.n	750a <mbedtls_mpi_mul_mpi+0x66>

0000756a <mbedtls_mpi_mul_int>:
{
    756a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
    756c:	2301      	movs	r3, #1
    p[0] = b;
    756e:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    7570:	aa01      	add	r2, sp, #4
    _B.n = 1;
    7572:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
    7576:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    757a:	f7ff ff93 	bl	74a4 <mbedtls_mpi_mul_mpi>
}
    757e:	b005      	add	sp, #20
    7580:	f85d fb04 	ldr.w	pc, [sp], #4

00007584 <mbedtls_mpi_div_mpi>:
{
    7584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7588:	b097      	sub	sp, #92	; 0x5c
    758a:	460f      	mov	r7, r1
    758c:	9000      	str	r0, [sp, #0]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    758e:	2100      	movs	r1, #0
    7590:	4618      	mov	r0, r3
{
    7592:	4690      	mov	r8, r2
    7594:	9302      	str	r3, [sp, #8]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    7596:	f7ff fe83 	bl	72a0 <mbedtls_mpi_cmp_int>
    759a:	2800      	cmp	r0, #0
    759c:	f000 819d 	beq.w	78da <mbedtls_mpi_div_mpi+0x356>
    X->n = 0;
    75a0:	2400      	movs	r4, #0
    75a2:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    75a4:	4640      	mov	r0, r8
    75a6:	9902      	ldr	r1, [sp, #8]
    X->n = 0;
    75a8:	e9cd 5407 	strd	r5, r4, [sp, #28]
    X->s = 1;
    75ac:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    X->p = NULL;
    75b0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    X->n = 0;
    75b4:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    X->s = 1;
    75b8:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
    X->p = NULL;
    75bc:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
    X->n = 0;
    75c0:	e9cd 5413 	strd	r5, r4, [sp, #76]	; 0x4c
    X->p = NULL;
    75c4:	9415      	str	r4, [sp, #84]	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    75c6:	f7ff fdf5 	bl	71b4 <mbedtls_mpi_cmp_abs>
    75ca:	42a0      	cmp	r0, r4
    75cc:	da26      	bge.n	761c <mbedtls_mpi_div_mpi+0x98>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    75ce:	9b00      	ldr	r3, [sp, #0]
    75d0:	b92b      	cbnz	r3, 75de <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    75d2:	b9df      	cbnz	r7, 760c <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
    75d4:	2400      	movs	r4, #0
}
    75d6:	4620      	mov	r0, r4
    75d8:	b017      	add	sp, #92	; 0x5c
    75da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    75de:	4621      	mov	r1, r4
    75e0:	9800      	ldr	r0, [sp, #0]
    75e2:	f7ff fc9d 	bl	6f20 <mbedtls_mpi_lset>
    75e6:	4604      	mov	r4, r0
    75e8:	2800      	cmp	r0, #0
    75ea:	d0f2      	beq.n	75d2 <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    75ec:	a807      	add	r0, sp, #28
    75ee:	f7ff fc33 	bl	6e58 <mbedtls_mpi_free>
    75f2:	a80a      	add	r0, sp, #40	; 0x28
    75f4:	f7ff fc30 	bl	6e58 <mbedtls_mpi_free>
    75f8:	a80d      	add	r0, sp, #52	; 0x34
    75fa:	f7ff fc2d 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
    75fe:	a810      	add	r0, sp, #64	; 0x40
    7600:	f7ff fc2a 	bl	6e58 <mbedtls_mpi_free>
    7604:	a813      	add	r0, sp, #76	; 0x4c
    7606:	f7ff fc27 	bl	6e58 <mbedtls_mpi_free>
    return( ret );
    760a:	e7e4      	b.n	75d6 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    760c:	4641      	mov	r1, r8
    760e:	4638      	mov	r0, r7
    7610:	f7ff fc5a 	bl	6ec8 <mbedtls_mpi_copy>
    7614:	4604      	mov	r4, r0
    7616:	2800      	cmp	r0, #0
    7618:	d1e8      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
    761a:	e7db      	b.n	75d4 <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    761c:	4641      	mov	r1, r8
    761e:	a807      	add	r0, sp, #28
    7620:	f7ff fc52 	bl	6ec8 <mbedtls_mpi_copy>
    7624:	4604      	mov	r4, r0
    7626:	2800      	cmp	r0, #0
    7628:	d1e0      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    762a:	ae0a      	add	r6, sp, #40	; 0x28
    762c:	4630      	mov	r0, r6
    762e:	9902      	ldr	r1, [sp, #8]
    7630:	f7ff fc4a 	bl	6ec8 <mbedtls_mpi_copy>
    7634:	4604      	mov	r4, r0
    7636:	2800      	cmp	r0, #0
    7638:	d1d8      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    763a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    763e:	a80d      	add	r0, sp, #52	; 0x34
    7640:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    7642:	950a      	str	r5, [sp, #40]	; 0x28
    7644:	9507      	str	r5, [sp, #28]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7646:	f7ff fc19 	bl	6e7c <mbedtls_mpi_grow>
    764a:	4604      	mov	r4, r0
    764c:	2800      	cmp	r0, #0
    764e:	d1cd      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    7650:	4601      	mov	r1, r0
    7652:	a80d      	add	r0, sp, #52	; 0x34
    7654:	f7ff fc64 	bl	6f20 <mbedtls_mpi_lset>
    7658:	4604      	mov	r4, r0
    765a:	2800      	cmp	r0, #0
    765c:	d1c6      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    765e:	2102      	movs	r1, #2
    7660:	a810      	add	r0, sp, #64	; 0x40
    7662:	f7ff fc0b 	bl	6e7c <mbedtls_mpi_grow>
    7666:	4604      	mov	r4, r0
    7668:	2800      	cmp	r0, #0
    766a:	d1bf      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
    766c:	2103      	movs	r1, #3
    766e:	a813      	add	r0, sp, #76	; 0x4c
    7670:	f7ff fc04 	bl	6e7c <mbedtls_mpi_grow>
    7674:	4604      	mov	r4, r0
    7676:	2800      	cmp	r0, #0
    7678:	d1b8      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    767a:	4630      	mov	r0, r6
    767c:	f7ff fc7d 	bl	6f7a <mbedtls_mpi_bitlen>
    7680:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    7684:	281f      	cmp	r0, #31
    7686:	d06f      	beq.n	7768 <mbedtls_mpi_div_mpi+0x1e4>
        k = biL - 1 - k;
    7688:	f1c0 091f 	rsb	r9, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    768c:	4649      	mov	r1, r9
    768e:	a807      	add	r0, sp, #28
    7690:	f7ff fd04 	bl	709c <mbedtls_mpi_shift_l>
    7694:	4604      	mov	r4, r0
    7696:	2800      	cmp	r0, #0
    7698:	d1a8      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    769a:	4649      	mov	r1, r9
    769c:	4630      	mov	r0, r6
    769e:	f7ff fcfd 	bl	709c <mbedtls_mpi_shift_l>
    76a2:	4604      	mov	r4, r0
    76a4:	2800      	cmp	r0, #0
    76a6:	d1a1      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
    76a8:	9d08      	ldr	r5, [sp, #32]
    t = Y.n - 1;
    76aa:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    76ae:	4630      	mov	r0, r6
    76b0:	eba5 030a 	sub.w	r3, r5, sl
    76b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    76b8:	4659      	mov	r1, fp
    76ba:	9301      	str	r3, [sp, #4]
    76bc:	f7ff fcee 	bl	709c <mbedtls_mpi_shift_l>
    76c0:	4604      	mov	r4, r0
    76c2:	2800      	cmp	r0, #0
    76c4:	d192      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
    76c6:	9b01      	ldr	r3, [sp, #4]
    76c8:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    76ca:	4631      	mov	r1, r6
    76cc:	a807      	add	r0, sp, #28
    76ce:	9301      	str	r3, [sp, #4]
    76d0:	f7ff fda3 	bl	721a <mbedtls_mpi_cmp_mpi>
    76d4:	2800      	cmp	r0, #0
    76d6:	9b01      	ldr	r3, [sp, #4]
    76d8:	da48      	bge.n	776c <mbedtls_mpi_div_mpi+0x1e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    76da:	4659      	mov	r1, fp
    76dc:	4630      	mov	r0, r6
    76de:	f7ff fd2d 	bl	713c <mbedtls_mpi_shift_r>
    76e2:	4604      	mov	r4, r0
    76e4:	2800      	cmp	r0, #0
    76e6:	d181      	bne.n	75ec <mbedtls_mpi_div_mpi+0x68>
    t = Y.n - 1;
    76e8:	f10a 33ff 	add.w	r3, sl, #4294967295
    76ec:	9301      	str	r3, [sp, #4]
        if( X.p[i] >= Y.p[t] )
    76ee:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    76f0:	1e6e      	subs	r6, r5, #1
        if( X.p[i] >= Y.p[t] )
    76f2:	9303      	str	r3, [sp, #12]
    76f4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    76f8:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    76fc:	3b02      	subs	r3, #2
    76fe:	3d01      	subs	r5, #1
    7700:	009b      	lsls	r3, r3, #2
    7702:	eba5 0a0a 	sub.w	sl, r5, sl
    7706:	9305      	str	r3, [sp, #20]
    7708:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    for( i = n; i > t ; i-- )
    770c:	9b01      	ldr	r3, [sp, #4]
    770e:	429e      	cmp	r6, r3
    7710:	d83b      	bhi.n	778a <mbedtls_mpi_div_mpi+0x206>
    if( Q != NULL )
    7712:	9b00      	ldr	r3, [sp, #0]
    7714:	b15b      	cbz	r3, 772e <mbedtls_mpi_div_mpi+0x1aa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    7716:	4618      	mov	r0, r3
    7718:	a90d      	add	r1, sp, #52	; 0x34
    771a:	f7ff fbd5 	bl	6ec8 <mbedtls_mpi_copy>
    771e:	bb08      	cbnz	r0, 7764 <mbedtls_mpi_div_mpi+0x1e0>
        Q->s = A->s * B->s;
    7720:	9b02      	ldr	r3, [sp, #8]
    7722:	f8d8 2000 	ldr.w	r2, [r8]
    7726:	681b      	ldr	r3, [r3, #0]
    7728:	4353      	muls	r3, r2
    772a:	9a00      	ldr	r2, [sp, #0]
    772c:	6013      	str	r3, [r2, #0]
    if( R != NULL )
    772e:	2f00      	cmp	r7, #0
    7730:	f43f af5c 	beq.w	75ec <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    7734:	4649      	mov	r1, r9
    7736:	a807      	add	r0, sp, #28
    7738:	f7ff fd00 	bl	713c <mbedtls_mpi_shift_r>
    773c:	b990      	cbnz	r0, 7764 <mbedtls_mpi_div_mpi+0x1e0>
        X.s = A->s;
    773e:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7742:	a907      	add	r1, sp, #28
    7744:	4638      	mov	r0, r7
        X.s = A->s;
    7746:	9307      	str	r3, [sp, #28]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7748:	f7ff fbbe 	bl	6ec8 <mbedtls_mpi_copy>
    774c:	4601      	mov	r1, r0
    774e:	2800      	cmp	r0, #0
    7750:	f040 80c1 	bne.w	78d6 <mbedtls_mpi_div_mpi+0x352>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    7754:	4638      	mov	r0, r7
    7756:	f7ff fda3 	bl	72a0 <mbedtls_mpi_cmp_int>
    775a:	2800      	cmp	r0, #0
    775c:	f47f af46 	bne.w	75ec <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
    7760:	2301      	movs	r3, #1
    7762:	603b      	str	r3, [r7, #0]
    7764:	4604      	mov	r4, r0
    7766:	e741      	b.n	75ec <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
    7768:	46a1      	mov	r9, r4
    776a:	e79d      	b.n	76a8 <mbedtls_mpi_div_mpi+0x124>
        Z.p[n - t]++;
    776c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    776e:	9301      	str	r3, [sp, #4]
    7770:	58ca      	ldr	r2, [r1, r3]
    7772:	3201      	adds	r2, #1
    7774:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7776:	a907      	add	r1, sp, #28
    7778:	4632      	mov	r2, r6
    777a:	4608      	mov	r0, r1
    777c:	f7ff fe6f 	bl	745e <mbedtls_mpi_sub_mpi>
    7780:	9b01      	ldr	r3, [sp, #4]
    7782:	4604      	mov	r4, r0
    7784:	2800      	cmp	r0, #0
    7786:	d0a0      	beq.n	76ca <mbedtls_mpi_div_mpi+0x146>
    7788:	e730      	b.n	75ec <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
    778a:	9803      	ldr	r0, [sp, #12]
    778c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    778e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7790:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    7794:	5812      	ldr	r2, [r2, r0]
    7796:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    779a:	f1ab 0004 	sub.w	r0, fp, #4
    779e:	9004      	str	r0, [sp, #16]
    77a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    77a2:	4291      	cmp	r1, r2
    77a4:	eb00 050a 	add.w	r5, r0, sl
    77a8:	d37e      	bcc.n	78a8 <mbedtls_mpi_div_mpi+0x324>
            Z.p[i - t - 1] = ~0;
    77aa:	f04f 33ff 	mov.w	r3, #4294967295
    77ae:	f840 300a 	str.w	r3, [r0, sl]
        Z.p[i - t - 1]++;
    77b2:	682b      	ldr	r3, [r5, #0]
    77b4:	3301      	adds	r3, #1
    77b6:	602b      	str	r3, [r5, #0]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    77b8:	f1ab 0508 	sub.w	r5, fp, #8
            Z.p[i - t - 1]--;
    77bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    77be:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    77c0:	f852 300a 	ldr.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    77c4:	a810      	add	r0, sp, #64	; 0x40
            Z.p[i - t - 1]--;
    77c6:	3b01      	subs	r3, #1
    77c8:	f842 300a 	str.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    77cc:	f7ff fba8 	bl	6f20 <mbedtls_mpi_lset>
    77d0:	2800      	cmp	r0, #0
    77d2:	d1c7      	bne.n	7764 <mbedtls_mpi_div_mpi+0x1e0>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    77d4:	9b01      	ldr	r3, [sp, #4]
    77d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    77d8:	2b00      	cmp	r3, #0
    77da:	d07a      	beq.n	78d2 <mbedtls_mpi_div_mpi+0x34e>
    77dc:	9b05      	ldr	r3, [sp, #20]
    77de:	58d1      	ldr	r1, [r2, r3]
    77e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    77e2:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
    77e4:	9903      	ldr	r1, [sp, #12]
    77e6:	5852      	ldr	r2, [r2, r1]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    77e8:	a910      	add	r1, sp, #64	; 0x40
            T1.p[1] = Y.p[t];
    77ea:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    77ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    77ee:	4608      	mov	r0, r1
    77f0:	f853 200a 	ldr.w	r2, [r3, sl]
    77f4:	f7ff feb9 	bl	756a <mbedtls_mpi_mul_int>
    77f8:	4601      	mov	r1, r0
    77fa:	2800      	cmp	r0, #0
    77fc:	d16b      	bne.n	78d6 <mbedtls_mpi_div_mpi+0x352>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
    77fe:	a813      	add	r0, sp, #76	; 0x4c
    7800:	f7ff fb8e 	bl	6f20 <mbedtls_mpi_lset>
    7804:	2800      	cmp	r0, #0
    7806:	d1ad      	bne.n	7764 <mbedtls_mpi_div_mpi+0x1e0>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7808:	9a09      	ldr	r2, [sp, #36]	; 0x24
    780a:	2e01      	cmp	r6, #1
    780c:	bf18      	it	ne
    780e:	5950      	ldrne	r0, [r2, r5]
    7810:	9b15      	ldr	r3, [sp, #84]	; 0x54
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7812:	9904      	ldr	r1, [sp, #16]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7814:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7816:	5851      	ldr	r1, [r2, r1]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7818:	a810      	add	r0, sp, #64	; 0x40
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    781a:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
    781c:	f852 200b 	ldr.w	r2, [r2, fp]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7820:	a913      	add	r1, sp, #76	; 0x4c
            T2.p[2] = X.p[i];
    7822:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7824:	f7ff fcf9 	bl	721a <mbedtls_mpi_cmp_mpi>
    7828:	2800      	cmp	r0, #0
    782a:	dcc7      	bgt.n	77bc <mbedtls_mpi_div_mpi+0x238>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    782c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    782e:	a90a      	add	r1, sp, #40	; 0x28
    7830:	f853 200a 	ldr.w	r2, [r3, sl]
    7834:	a810      	add	r0, sp, #64	; 0x40
    7836:	f7ff fe98 	bl	756a <mbedtls_mpi_mul_int>
    783a:	2800      	cmp	r0, #0
    783c:	d192      	bne.n	7764 <mbedtls_mpi_div_mpi+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    783e:	ea4f 05ca 	mov.w	r5, sl, lsl #3
    7842:	4629      	mov	r1, r5
    7844:	a810      	add	r0, sp, #64	; 0x40
    7846:	f7ff fc29 	bl	709c <mbedtls_mpi_shift_l>
    784a:	2800      	cmp	r0, #0
    784c:	d18a      	bne.n	7764 <mbedtls_mpi_div_mpi+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    784e:	a907      	add	r1, sp, #28
    7850:	4608      	mov	r0, r1
    7852:	aa10      	add	r2, sp, #64	; 0x40
    7854:	f7ff fe03 	bl	745e <mbedtls_mpi_sub_mpi>
    7858:	4601      	mov	r1, r0
    785a:	2800      	cmp	r0, #0
    785c:	d13b      	bne.n	78d6 <mbedtls_mpi_div_mpi+0x352>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    785e:	a807      	add	r0, sp, #28
    7860:	f7ff fd1e 	bl	72a0 <mbedtls_mpi_cmp_int>
    7864:	2800      	cmp	r0, #0
    7866:	da1b      	bge.n	78a0 <mbedtls_mpi_div_mpi+0x31c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    7868:	a90a      	add	r1, sp, #40	; 0x28
    786a:	a810      	add	r0, sp, #64	; 0x40
    786c:	f7ff fb2c 	bl	6ec8 <mbedtls_mpi_copy>
    7870:	2800      	cmp	r0, #0
    7872:	f47f af77 	bne.w	7764 <mbedtls_mpi_div_mpi+0x1e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    7876:	4629      	mov	r1, r5
    7878:	a810      	add	r0, sp, #64	; 0x40
    787a:	f7ff fc0f 	bl	709c <mbedtls_mpi_shift_l>
    787e:	2800      	cmp	r0, #0
    7880:	f47f af70 	bne.w	7764 <mbedtls_mpi_div_mpi+0x1e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    7884:	a907      	add	r1, sp, #28
    7886:	4608      	mov	r0, r1
    7888:	aa10      	add	r2, sp, #64	; 0x40
    788a:	f7ff fdc6 	bl	741a <mbedtls_mpi_add_mpi>
    788e:	2800      	cmp	r0, #0
    7890:	f47f af68 	bne.w	7764 <mbedtls_mpi_div_mpi+0x1e0>
            Z.p[i - t - 1]--;
    7894:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7896:	f852 300a 	ldr.w	r3, [r2, sl]
    789a:	3b01      	subs	r3, #1
    789c:	f842 300a 	str.w	r3, [r2, sl]
    for( i = n; i > t ; i-- )
    78a0:	3e01      	subs	r6, #1
    78a2:	f1aa 0a04 	sub.w	sl, sl, #4
    78a6:	e731      	b.n	770c <mbedtls_mpi_div_mpi+0x188>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    78a8:	9804      	ldr	r0, [sp, #16]
    78aa:	5818      	ldr	r0, [r3, r0]
    if( 0 == d || u1 >= d )
    78ac:	b172      	cbz	r2, 78cc <mbedtls_mpi_div_mpi+0x348>
    quotient = dividend / d;
    78ae:	2300      	movs	r3, #0
    78b0:	f7f8 fc50 	bl	154 <__aeabi_uldivmod>
    78b4:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
    78b6:	2100      	movs	r1, #0
    quotient = dividend / d;
    78b8:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
    78ba:	f04f 30ff 	mov.w	r0, #4294967295
    78be:	4299      	cmp	r1, r3
    78c0:	bf08      	it	eq
    78c2:	4290      	cmpeq	r0, r2
    78c4:	d200      	bcs.n	78c8 <mbedtls_mpi_div_mpi+0x344>
    78c6:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    78c8:	602a      	str	r2, [r5, #0]
    78ca:	e772      	b.n	77b2 <mbedtls_mpi_div_mpi+0x22e>
        return ( ~0 );
    78cc:	f04f 32ff 	mov.w	r2, #4294967295
    78d0:	e7fa      	b.n	78c8 <mbedtls_mpi_div_mpi+0x344>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    78d2:	9901      	ldr	r1, [sp, #4]
    78d4:	e784      	b.n	77e0 <mbedtls_mpi_div_mpi+0x25c>
    78d6:	460c      	mov	r4, r1
    78d8:	e688      	b.n	75ec <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    78da:	f06f 040b 	mvn.w	r4, #11
    78de:	e67a      	b.n	75d6 <mbedtls_mpi_div_mpi+0x52>

000078e0 <mbedtls_mpi_mod_mpi>:
{
    78e0:	b570      	push	{r4, r5, r6, lr}
    78e2:	4604      	mov	r4, r0
    78e4:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    78e6:	4610      	mov	r0, r2
    78e8:	2100      	movs	r1, #0
{
    78ea:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    78ec:	f7ff fcd8 	bl	72a0 <mbedtls_mpi_cmp_int>
    78f0:	2800      	cmp	r0, #0
    78f2:	db24      	blt.n	793e <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    78f4:	462a      	mov	r2, r5
    78f6:	4633      	mov	r3, r6
    78f8:	4621      	mov	r1, r4
    78fa:	2000      	movs	r0, #0
    78fc:	f7ff fe42 	bl	7584 <mbedtls_mpi_div_mpi>
    7900:	4605      	mov	r5, r0
    7902:	b138      	cbz	r0, 7914 <mbedtls_mpi_mod_mpi+0x34>
}
    7904:	4628      	mov	r0, r5
    7906:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    7908:	4632      	mov	r2, r6
    790a:	4621      	mov	r1, r4
    790c:	4620      	mov	r0, r4
    790e:	f7ff fd84 	bl	741a <mbedtls_mpi_add_mpi>
    7912:	b990      	cbnz	r0, 793a <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    7914:	2100      	movs	r1, #0
    7916:	4620      	mov	r0, r4
    7918:	f7ff fcc2 	bl	72a0 <mbedtls_mpi_cmp_int>
    791c:	2800      	cmp	r0, #0
    791e:	dbf3      	blt.n	7908 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    7920:	4631      	mov	r1, r6
    7922:	4620      	mov	r0, r4
    7924:	f7ff fc79 	bl	721a <mbedtls_mpi_cmp_mpi>
    7928:	2800      	cmp	r0, #0
    792a:	dbeb      	blt.n	7904 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    792c:	4632      	mov	r2, r6
    792e:	4621      	mov	r1, r4
    7930:	4620      	mov	r0, r4
    7932:	f7ff fd94 	bl	745e <mbedtls_mpi_sub_mpi>
    7936:	2800      	cmp	r0, #0
    7938:	d0f2      	beq.n	7920 <mbedtls_mpi_mod_mpi+0x40>
    793a:	4605      	mov	r5, r0
    793c:	e7e2      	b.n	7904 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    793e:	f06f 0509 	mvn.w	r5, #9
    7942:	e7df      	b.n	7904 <mbedtls_mpi_mod_mpi+0x24>

00007944 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    7944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7948:	f2ad 6d64 	subw	sp, sp, #1636	; 0x664
    794c:	9004      	str	r0, [sp, #16]
    794e:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7950:	4618      	mov	r0, r3
    7952:	2100      	movs	r1, #0
{
    7954:	461d      	mov	r5, r3
    7956:	9206      	str	r2, [sp, #24]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7958:	f7ff fca2 	bl	72a0 <mbedtls_mpi_cmp_int>
    795c:	2800      	cmp	r0, #0
    795e:	f340 81ed 	ble.w	7d3c <mbedtls_mpi_exp_mod+0x3f8>
    7962:	68ab      	ldr	r3, [r5, #8]
    7964:	681c      	ldr	r4, [r3, #0]
    7966:	f014 0301 	ands.w	r3, r4, #1
    796a:	9308      	str	r3, [sp, #32]
    796c:	f000 81e6 	beq.w	7d3c <mbedtls_mpi_exp_mod+0x3f8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    7970:	2100      	movs	r1, #0
    7972:	9806      	ldr	r0, [sp, #24]
    7974:	f7ff fc94 	bl	72a0 <mbedtls_mpi_cmp_int>
    7978:	2800      	cmp	r0, #0
    797a:	f2c0 81df 	blt.w	7d3c <mbedtls_mpi_exp_mod+0x3f8>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    797e:	2103      	movs	r1, #3
    7980:	1ca6      	adds	r6, r4, #2
    7982:	0076      	lsls	r6, r6, #1
    7984:	f006 0608 	and.w	r6, r6, #8
    7988:	4426      	add	r6, r4
        x *= ( 2 - ( m0 * x ) );
    798a:	fb06 f304 	mul.w	r3, r6, r4
    for( i = biL; i >= 8; i /= 2 )
    798e:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    7990:	f1c3 0302 	rsb	r3, r3, #2
    7994:	fb03 f606 	mul.w	r6, r3, r6
    for( i = biL; i >= 8; i /= 2 )
    7998:	d1f7      	bne.n	798a <mbedtls_mpi_exp_mod+0x46>
    X->s = 1;
    799a:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
    799c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    79a0:	a818      	add	r0, sp, #96	; 0x60
    X->n = 0;
    79a2:	e9cd 310c 	strd	r3, r1, [sp, #48]	; 0x30
    X->s = 1;
    79a6:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
    X->p = NULL;
    79aa:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
    X->n = 0;
    79ae:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
    X->p = NULL;
    79b2:	9114      	str	r1, [sp, #80]	; 0x50
    memset( W, 0, sizeof( W ) );
    79b4:	f7fe fb96 	bl	60e4 <memset>

    i = mbedtls_mpi_bitlen( E );
    79b8:	9806      	ldr	r0, [sp, #24]
    79ba:	f7ff fade 	bl	6f7a <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    79be:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    79c2:	f080 80f2 	bcs.w	7baa <mbedtls_mpi_exp_mod+0x266>
    79c6:	28ef      	cmp	r0, #239	; 0xef
    79c8:	f200 80f1 	bhi.w	7bae <mbedtls_mpi_exp_mod+0x26a>
    79cc:	284f      	cmp	r0, #79	; 0x4f
    79ce:	f200 80f0 	bhi.w	7bb2 <mbedtls_mpi_exp_mod+0x26e>
    79d2:	2817      	cmp	r0, #23
    79d4:	9b08      	ldr	r3, [sp, #32]
    79d6:	bf88      	it	hi
    79d8:	2303      	movhi	r3, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    79da:	6869      	ldr	r1, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    79dc:	9804      	ldr	r0, [sp, #16]
    j = N->n + 1;
    79de:	f101 0801 	add.w	r8, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    79e2:	4641      	mov	r1, r8
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    79e4:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    79e6:	f7ff fa49 	bl	6e7c <mbedtls_mpi_grow>
    79ea:	4604      	mov	r4, r0
    79ec:	2800      	cmp	r0, #0
    79ee:	f040 80ba 	bne.w	7b66 <mbedtls_mpi_exp_mod+0x222>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    79f2:	4641      	mov	r1, r8
    79f4:	a81b      	add	r0, sp, #108	; 0x6c
    79f6:	f7ff fa41 	bl	6e7c <mbedtls_mpi_grow>
    79fa:	4604      	mov	r4, r0
    79fc:	2800      	cmp	r0, #0
    79fe:	f040 80b2 	bne.w	7b66 <mbedtls_mpi_exp_mod+0x222>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    7a02:	ea4f 0148 	mov.w	r1, r8, lsl #1
    7a06:	a80f      	add	r0, sp, #60	; 0x3c
    7a08:	f7ff fa38 	bl	6e7c <mbedtls_mpi_grow>
    7a0c:	4604      	mov	r4, r0
    7a0e:	2800      	cmp	r0, #0
    7a10:	f040 80a9 	bne.w	7b66 <mbedtls_mpi_exp_mod+0x222>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    7a14:	683b      	ldr	r3, [r7, #0]
    7a16:	9307      	str	r3, [sp, #28]
    if( neg )
    7a18:	3301      	adds	r3, #1
    7a1a:	d10a      	bne.n	7a32 <mbedtls_mpi_exp_mod+0xee>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    7a1c:	4639      	mov	r1, r7
    7a1e:	a812      	add	r0, sp, #72	; 0x48
    7a20:	f7ff fa52 	bl	6ec8 <mbedtls_mpi_copy>
    7a24:	4604      	mov	r4, r0
    7a26:	2800      	cmp	r0, #0
    7a28:	f040 809d 	bne.w	7b66 <mbedtls_mpi_exp_mod+0x222>
        Apos.s = 1;
    7a2c:	2301      	movs	r3, #1
        A = &Apos;
    7a2e:	af12      	add	r7, sp, #72	; 0x48
        Apos.s = 1;
    7a30:	9312      	str	r3, [sp, #72]	; 0x48
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
    7a32:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
    7a36:	b11b      	cbz	r3, 7a40 <mbedtls_mpi_exp_mod+0xfc>
    7a38:	689b      	ldr	r3, [r3, #8]
    7a3a:	2b00      	cmp	r3, #0
    7a3c:	f040 80bb 	bne.w	7bb6 <mbedtls_mpi_exp_mod+0x272>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    7a40:	2101      	movs	r1, #1
    7a42:	a80c      	add	r0, sp, #48	; 0x30
    7a44:	f7ff fa6c 	bl	6f20 <mbedtls_mpi_lset>
    7a48:	4604      	mov	r4, r0
    7a4a:	2800      	cmp	r0, #0
    7a4c:	f040 808b 	bne.w	7b66 <mbedtls_mpi_exp_mod+0x222>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    7a50:	6869      	ldr	r1, [r5, #4]
    7a52:	a80c      	add	r0, sp, #48	; 0x30
    7a54:	0189      	lsls	r1, r1, #6
    7a56:	f7ff fb21 	bl	709c <mbedtls_mpi_shift_l>
    7a5a:	4604      	mov	r4, r0
    7a5c:	2800      	cmp	r0, #0
    7a5e:	f040 8082 	bne.w	7b66 <mbedtls_mpi_exp_mod+0x222>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    7a62:	a90c      	add	r1, sp, #48	; 0x30
    7a64:	462a      	mov	r2, r5
    7a66:	4608      	mov	r0, r1
    7a68:	f7ff ff3a 	bl	78e0 <mbedtls_mpi_mod_mpi>
    7a6c:	4604      	mov	r4, r0
    7a6e:	2800      	cmp	r0, #0
    7a70:	d179      	bne.n	7b66 <mbedtls_mpi_exp_mod+0x222>

        if( _RR != NULL )
    7a72:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
    7a76:	b123      	cbz	r3, 7a82 <mbedtls_mpi_exp_mod+0x13e>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    7a78:	220c      	movs	r2, #12
    7a7a:	4618      	mov	r0, r3
    7a7c:	a90c      	add	r1, sp, #48	; 0x30
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    7a7e:	f7fe fb06 	bl	608e <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    7a82:	4629      	mov	r1, r5
    7a84:	4638      	mov	r0, r7
    7a86:	f7ff fbc8 	bl	721a <mbedtls_mpi_cmp_mpi>
    7a8a:	2800      	cmp	r0, #0
    7a8c:	f2c0 8098 	blt.w	7bc0 <mbedtls_mpi_exp_mod+0x27c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    7a90:	462a      	mov	r2, r5
    7a92:	4639      	mov	r1, r7
    7a94:	a81b      	add	r0, sp, #108	; 0x6c
    7a96:	f7ff ff23 	bl	78e0 <mbedtls_mpi_mod_mpi>
    7a9a:	4604      	mov	r4, r0
    7a9c:	2800      	cmp	r0, #0
    7a9e:	d162      	bne.n	7b66 <mbedtls_mpi_exp_mod+0x222>
    *mm = ~x + 1;
    7aa0:	4276      	negs	r6, r6
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    mpi_montmul( &W[1], &RR, N, mm, &T );
    7aa2:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
    7aa6:	4633      	mov	r3, r6
    7aa8:	462a      	mov	r2, r5
    7aaa:	a90c      	add	r1, sp, #48	; 0x30
    7aac:	a81d      	add	r0, sp, #116	; 0x74
    7aae:	f8cd 9000 	str.w	r9, [sp]
    7ab2:	f7ff f961 	bl	6d78 <mpi_montmul.isra.0>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    7ab6:	9804      	ldr	r0, [sp, #16]
    7ab8:	a90c      	add	r1, sp, #48	; 0x30
    7aba:	f7ff fa05 	bl	6ec8 <mbedtls_mpi_copy>
    7abe:	4604      	mov	r4, r0
    7ac0:	2800      	cmp	r0, #0
    7ac2:	d150      	bne.n	7b66 <mbedtls_mpi_exp_mod+0x222>
    mbedtls_mpi_uint z = 1;
    7ac4:	2701      	movs	r7, #1
    7ac6:	ab0b      	add	r3, sp, #44	; 0x2c
    U.p = &z;
    7ac8:	9317      	str	r3, [sp, #92]	; 0x5c
    7aca:	9b04      	ldr	r3, [sp, #16]
    mpi_montmul( A, &U, N, mm, T );
    7acc:	462a      	mov	r2, r5
    7ace:	f103 0808 	add.w	r8, r3, #8
    7ad2:	4640      	mov	r0, r8
    7ad4:	4633      	mov	r3, r6
    7ad6:	f8cd 9000 	str.w	r9, [sp]
    7ada:	a915      	add	r1, sp, #84	; 0x54
    U.n = U.s = (int) z;
    7adc:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
    mbedtls_mpi_uint z = 1;
    7ae0:	970b      	str	r7, [sp, #44]	; 0x2c
    mpi_montmul( A, &U, N, mm, T );
    7ae2:	f7ff f949 	bl	6d78 <mpi_montmul.isra.0>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    7ae6:	9b03      	ldr	r3, [sp, #12]
    7ae8:	42bb      	cmp	r3, r7
    7aea:	d16e      	bne.n	7bca <mbedtls_mpi_exp_mod+0x286>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    7aec:	f04f 0a00 	mov.w	sl, #0
    nbits   = 0;
    7af0:	46d1      	mov	r9, sl
    bufsize = 0;
    7af2:	46d3      	mov	fp, sl
    wbits   = 0;
    7af4:	4657      	mov	r7, sl
    nblimbs = E->n;
    7af6:	9b06      	ldr	r3, [sp, #24]
    7af8:	685b      	ldr	r3, [r3, #4]
    7afa:	9305      	str	r3, [sp, #20]

    while( 1 )
    {
        if( bufsize == 0 )
    7afc:	f1bb 0f00 	cmp.w	fp, #0
    7b00:	f040 80b9 	bne.w	7c76 <mbedtls_mpi_exp_mod+0x332>
        {
            if( nblimbs == 0 )
    7b04:	9b05      	ldr	r3, [sp, #20]
    7b06:	2b00      	cmp	r3, #0
    7b08:	f040 80b0 	bne.w	7c6c <mbedtls_mpi_exp_mod+0x328>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    7b0c:	f04f 0b01 	mov.w	fp, #1
    7b10:	9b03      	ldr	r3, [sp, #12]
    7b12:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    7b16:	fa0b fb03 	lsl.w	fp, fp, r3
    for( i = 0; i < nbits; i++ )
    7b1a:	9b05      	ldr	r3, [sp, #20]
    7b1c:	454b      	cmp	r3, r9
    7b1e:	f040 80ee 	bne.w	7cfe <mbedtls_mpi_exp_mod+0x3ba>
    mbedtls_mpi_uint z = 1;
    7b22:	2301      	movs	r3, #1
    7b24:	aa0b      	add	r2, sp, #44	; 0x2c
    U.n = U.s = (int) z;
    7b26:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    mbedtls_mpi_uint z = 1;
    7b2a:	930b      	str	r3, [sp, #44]	; 0x2c
    U.p = &z;
    7b2c:	9217      	str	r2, [sp, #92]	; 0x5c
    mpi_montmul( A, &U, N, mm, T );
    7b2e:	4633      	mov	r3, r6
    7b30:	462a      	mov	r2, r5
    7b32:	4640      	mov	r0, r8
    7b34:	f8cd a000 	str.w	sl, [sp]
    7b38:	a915      	add	r1, sp, #84	; 0x54
    7b3a:	f7ff f91d 	bl	6d78 <mpi_montmul.isra.0>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    7b3e:	9b07      	ldr	r3, [sp, #28]
    7b40:	3301      	adds	r3, #1
    7b42:	d110      	bne.n	7b66 <mbedtls_mpi_exp_mod+0x222>
    7b44:	9b06      	ldr	r3, [sp, #24]
    7b46:	685b      	ldr	r3, [r3, #4]
    7b48:	b16b      	cbz	r3, 7b66 <mbedtls_mpi_exp_mod+0x222>
    7b4a:	9b06      	ldr	r3, [sp, #24]
    7b4c:	689b      	ldr	r3, [r3, #8]
    7b4e:	681b      	ldr	r3, [r3, #0]
    7b50:	07db      	lsls	r3, r3, #31
    7b52:	d508      	bpl.n	7b66 <mbedtls_mpi_exp_mod+0x222>
    {
        X->s = -1;
    7b54:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    7b56:	4629      	mov	r1, r5
        X->s = -1;
    7b58:	461a      	mov	r2, r3
    7b5a:	9b07      	ldr	r3, [sp, #28]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    7b5c:	4610      	mov	r0, r2
        X->s = -1;
    7b5e:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    7b60:	f7ff fc5b 	bl	741a <mbedtls_mpi_add_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    7b64:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7b66:	9b03      	ldr	r3, [sp, #12]
        mbedtls_mpi_free( &W[i] );
    7b68:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7b6a:	1e5d      	subs	r5, r3, #1
    7b6c:	2301      	movs	r3, #1
    7b6e:	9a03      	ldr	r2, [sp, #12]
    7b70:	fa03 f505 	lsl.w	r5, r3, r5
    7b74:	fa03 f602 	lsl.w	r6, r3, r2
    7b78:	42ae      	cmp	r6, r5
    7b7a:	f200 80d8 	bhi.w	7d2e <mbedtls_mpi_exp_mod+0x3ea>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    7b7e:	a81b      	add	r0, sp, #108	; 0x6c
    7b80:	f7ff f96a 	bl	6e58 <mbedtls_mpi_free>
    7b84:	a80f      	add	r0, sp, #60	; 0x3c
    7b86:	f7ff f967 	bl	6e58 <mbedtls_mpi_free>
    7b8a:	a812      	add	r0, sp, #72	; 0x48
    7b8c:	f7ff f964 	bl	6e58 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    7b90:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
    7b94:	b10b      	cbz	r3, 7b9a <mbedtls_mpi_exp_mod+0x256>
    7b96:	689b      	ldr	r3, [r3, #8]
    7b98:	b913      	cbnz	r3, 7ba0 <mbedtls_mpi_exp_mod+0x25c>
        mbedtls_mpi_free( &RR );
    7b9a:	a80c      	add	r0, sp, #48	; 0x30
    7b9c:	f7ff f95c 	bl	6e58 <mbedtls_mpi_free>

    return( ret );
}
    7ba0:	4620      	mov	r0, r4
    7ba2:	f20d 6d64 	addw	sp, sp, #1636	; 0x664
    7ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7baa:	2306      	movs	r3, #6
    7bac:	e715      	b.n	79da <mbedtls_mpi_exp_mod+0x96>
    7bae:	2305      	movs	r3, #5
    7bb0:	e713      	b.n	79da <mbedtls_mpi_exp_mod+0x96>
    7bb2:	2304      	movs	r3, #4
    7bb4:	e711      	b.n	79da <mbedtls_mpi_exp_mod+0x96>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    7bb6:	220c      	movs	r2, #12
    7bb8:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
    7bbc:	a80c      	add	r0, sp, #48	; 0x30
    7bbe:	e75e      	b.n	7a7e <mbedtls_mpi_exp_mod+0x13a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    7bc0:	4639      	mov	r1, r7
    7bc2:	a81b      	add	r0, sp, #108	; 0x6c
    7bc4:	f7ff f980 	bl	6ec8 <mbedtls_mpi_copy>
    7bc8:	e767      	b.n	7a9a <mbedtls_mpi_exp_mod+0x156>
    7bca:	9b03      	ldr	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    7bcc:	6869      	ldr	r1, [r5, #4]
    7bce:	f103 3aff 	add.w	sl, r3, #4294967295
    7bd2:	fa07 f30a 	lsl.w	r3, r7, sl
    7bd6:	270c      	movs	r7, #12
    7bd8:	9305      	str	r3, [sp, #20]
    7bda:	fa07 f70a 	lsl.w	r7, r7, sl
    7bde:	ab18      	add	r3, sp, #96	; 0x60
    7be0:	441f      	add	r7, r3
    7be2:	4638      	mov	r0, r7
    7be4:	3101      	adds	r1, #1
    7be6:	f7ff f949 	bl	6e7c <mbedtls_mpi_grow>
    7bea:	2800      	cmp	r0, #0
    7bec:	d1ba      	bne.n	7b64 <mbedtls_mpi_exp_mod+0x220>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    7bee:	4638      	mov	r0, r7
    7bf0:	a91b      	add	r1, sp, #108	; 0x6c
    7bf2:	f7ff f969 	bl	6ec8 <mbedtls_mpi_copy>
    7bf6:	2800      	cmp	r0, #0
    7bf8:	d1b4      	bne.n	7b64 <mbedtls_mpi_exp_mod+0x220>
        for( i = 0; i < wsize - 1; i++ )
    7bfa:	46a3      	mov	fp, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    7bfc:	f107 0008 	add.w	r0, r7, #8
    7c00:	4633      	mov	r3, r6
    7c02:	462a      	mov	r2, r5
    7c04:	4639      	mov	r1, r7
    7c06:	f8cd 9000 	str.w	r9, [sp]
        for( i = 0; i < wsize - 1; i++ )
    7c0a:	f10b 0b01 	add.w	fp, fp, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    7c0e:	9009      	str	r0, [sp, #36]	; 0x24
    7c10:	f7ff f8b2 	bl	6d78 <mpi_montmul.isra.0>
        for( i = 0; i < wsize - 1; i++ )
    7c14:	45d3      	cmp	fp, sl
    7c16:	9809      	ldr	r0, [sp, #36]	; 0x24
    7c18:	d3f2      	bcc.n	7c00 <mbedtls_mpi_exp_mod+0x2bc>
        for( i = j + 1; i < ( one << wsize ); i++ )
    7c1a:	9b05      	ldr	r3, [sp, #20]
    7c1c:	9a03      	ldr	r2, [sp, #12]
    7c1e:	f103 0901 	add.w	r9, r3, #1
    7c22:	2301      	movs	r3, #1
    7c24:	fa03 fb02 	lsl.w	fp, r3, r2
    7c28:	45cb      	cmp	fp, r9
    7c2a:	f67f af5f 	bls.w	7aec <mbedtls_mpi_exp_mod+0x1a8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    7c2e:	6869      	ldr	r1, [r5, #4]
    7c30:	f107 0a0c 	add.w	sl, r7, #12
    7c34:	4650      	mov	r0, sl
    7c36:	3101      	adds	r1, #1
    7c38:	f7ff f920 	bl	6e7c <mbedtls_mpi_grow>
    7c3c:	2800      	cmp	r0, #0
    7c3e:	d191      	bne.n	7b64 <mbedtls_mpi_exp_mod+0x220>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    7c40:	4639      	mov	r1, r7
    7c42:	4650      	mov	r0, sl
    7c44:	f7ff f940 	bl	6ec8 <mbedtls_mpi_copy>
    7c48:	2800      	cmp	r0, #0
    7c4a:	d18b      	bne.n	7b64 <mbedtls_mpi_exp_mod+0x220>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    7c4c:	ab0f      	add	r3, sp, #60	; 0x3c
    7c4e:	9300      	str	r3, [sp, #0]
    7c50:	f107 0014 	add.w	r0, r7, #20
    7c54:	4633      	mov	r3, r6
    7c56:	462a      	mov	r2, r5
    7c58:	a91b      	add	r1, sp, #108	; 0x6c
    7c5a:	f7ff f88d 	bl	6d78 <mpi_montmul.isra.0>
        for( i = j + 1; i < ( one << wsize ); i++ )
    7c5e:	4657      	mov	r7, sl
    7c60:	f109 0901 	add.w	r9, r9, #1
    7c64:	e7e0      	b.n	7c28 <mbedtls_mpi_exp_mod+0x2e4>
        state = 2;
    7c66:	f04f 0a02 	mov.w	sl, #2
    7c6a:	e747      	b.n	7afc <mbedtls_mpi_exp_mod+0x1b8>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    7c6c:	f04f 0b20 	mov.w	fp, #32
            nblimbs--;
    7c70:	9b05      	ldr	r3, [sp, #20]
    7c72:	3b01      	subs	r3, #1
    7c74:	9305      	str	r3, [sp, #20]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    7c76:	9b06      	ldr	r3, [sp, #24]
    7c78:	9a05      	ldr	r2, [sp, #20]
    7c7a:	689b      	ldr	r3, [r3, #8]
        bufsize--;
    7c7c:	f10b 3bff 	add.w	fp, fp, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
    7c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c84:	fa23 f30b 	lsr.w	r3, r3, fp
        if( ei == 0 && state == 0 )
    7c88:	f013 0301 	ands.w	r3, r3, #1
    7c8c:	d10f      	bne.n	7cae <mbedtls_mpi_exp_mod+0x36a>
    7c8e:	f1ba 0f00 	cmp.w	sl, #0
    7c92:	f43f af33 	beq.w	7afc <mbedtls_mpi_exp_mod+0x1b8>
        if( ei == 0 && state == 1 )
    7c96:	f1ba 0f01 	cmp.w	sl, #1
    7c9a:	d108      	bne.n	7cae <mbedtls_mpi_exp_mod+0x36a>
            mpi_montmul( X, X, N, mm, &T );
    7c9c:	ab0f      	add	r3, sp, #60	; 0x3c
    7c9e:	9300      	str	r3, [sp, #0]
    7ca0:	462a      	mov	r2, r5
    7ca2:	4633      	mov	r3, r6
    7ca4:	4640      	mov	r0, r8
    7ca6:	9904      	ldr	r1, [sp, #16]
    7ca8:	f7ff f866 	bl	6d78 <mpi_montmul.isra.0>
            continue;
    7cac:	e726      	b.n	7afc <mbedtls_mpi_exp_mod+0x1b8>
        wbits |= ( ei << ( wsize - nbits ) );
    7cae:	9a03      	ldr	r2, [sp, #12]
        nbits++;
    7cb0:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
    7cb4:	eba2 0209 	sub.w	r2, r2, r9
    7cb8:	4093      	lsls	r3, r2
    7cba:	431f      	orrs	r7, r3
        if( nbits == wsize )
    7cbc:	9b03      	ldr	r3, [sp, #12]
    7cbe:	454b      	cmp	r3, r9
    7cc0:	d1d1      	bne.n	7c66 <mbedtls_mpi_exp_mod+0x322>
            for( i = 0; i < wsize; i++ )
    7cc2:	f04f 0a00 	mov.w	sl, #0
                mpi_montmul( X, X, N, mm, &T );
    7cc6:	ab0f      	add	r3, sp, #60	; 0x3c
    7cc8:	9300      	str	r3, [sp, #0]
    7cca:	462a      	mov	r2, r5
    7ccc:	4633      	mov	r3, r6
    7cce:	4640      	mov	r0, r8
    7cd0:	9904      	ldr	r1, [sp, #16]
            for( i = 0; i < wsize; i++ )
    7cd2:	f10a 0a01 	add.w	sl, sl, #1
                mpi_montmul( X, X, N, mm, &T );
    7cd6:	f7ff f84f 	bl	6d78 <mpi_montmul.isra.0>
            for( i = 0; i < wsize; i++ )
    7cda:	45d1      	cmp	r9, sl
    7cdc:	d8f3      	bhi.n	7cc6 <mbedtls_mpi_exp_mod+0x382>
            mpi_montmul( X, &W[wbits], N, mm, &T );
    7cde:	210c      	movs	r1, #12
    7ce0:	a818      	add	r0, sp, #96	; 0x60
    7ce2:	fb01 0107 	mla	r1, r1, r7, r0
            nbits = 0;
    7ce6:	2700      	movs	r7, #0
            mpi_montmul( X, &W[wbits], N, mm, &T );
    7ce8:	ab0f      	add	r3, sp, #60	; 0x3c
    7cea:	9300      	str	r3, [sp, #0]
    7cec:	462a      	mov	r2, r5
    7cee:	4633      	mov	r3, r6
    7cf0:	4640      	mov	r0, r8
    7cf2:	f7ff f841 	bl	6d78 <mpi_montmul.isra.0>
            wbits = 0;
    7cf6:	46b9      	mov	r9, r7
            state--;
    7cf8:	f8dd a020 	ldr.w	sl, [sp, #32]
    7cfc:	e6fe      	b.n	7afc <mbedtls_mpi_exp_mod+0x1b8>
        mpi_montmul( X, X, N, mm, &T );
    7cfe:	4633      	mov	r3, r6
    7d00:	462a      	mov	r2, r5
    7d02:	4640      	mov	r0, r8
    7d04:	9904      	ldr	r1, [sp, #16]
    7d06:	f8cd a000 	str.w	sl, [sp]
        wbits <<= 1;
    7d0a:	007f      	lsls	r7, r7, #1
        mpi_montmul( X, X, N, mm, &T );
    7d0c:	f7ff f834 	bl	6d78 <mpi_montmul.isra.0>
        if( ( wbits & ( one << wsize ) ) != 0 )
    7d10:	ea1b 0f07 	tst.w	fp, r7
    7d14:	d007      	beq.n	7d26 <mbedtls_mpi_exp_mod+0x3e2>
            mpi_montmul( X, &W[1], N, mm, &T );
    7d16:	4633      	mov	r3, r6
    7d18:	462a      	mov	r2, r5
    7d1a:	4640      	mov	r0, r8
    7d1c:	f8cd a000 	str.w	sl, [sp]
    7d20:	a91b      	add	r1, sp, #108	; 0x6c
    7d22:	f7ff f829 	bl	6d78 <mpi_montmul.isra.0>
    for( i = 0; i < nbits; i++ )
    7d26:	9b05      	ldr	r3, [sp, #20]
    7d28:	3301      	adds	r3, #1
    7d2a:	9305      	str	r3, [sp, #20]
    7d2c:	e6f5      	b.n	7b1a <mbedtls_mpi_exp_mod+0x1d6>
        mbedtls_mpi_free( &W[i] );
    7d2e:	ab18      	add	r3, sp, #96	; 0x60
    7d30:	fb07 3005 	mla	r0, r7, r5, r3
    7d34:	f7ff f890 	bl	6e58 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7d38:	3501      	adds	r5, #1
    7d3a:	e71d      	b.n	7b78 <mbedtls_mpi_exp_mod+0x234>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    7d3c:	f06f 0403 	mvn.w	r4, #3
    7d40:	e72e      	b.n	7ba0 <mbedtls_mpi_exp_mod+0x25c>

00007d42 <platform_calloc_uninit>:
}
    7d42:	2000      	movs	r0, #0
    7d44:	4770      	bx	lr

00007d46 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    7d46:	4770      	bx	lr

00007d48 <platform_free_uninit>:
    7d48:	4770      	bx	lr

00007d4a <mbedtls_rsa_import>:
{
    7d4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d4e:	4605      	mov	r5, r0
    7d50:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    7d54:	4691      	mov	r9, r2
    7d56:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    7d58:	460c      	mov	r4, r1
    7d5a:	b979      	cbnz	r1, 7d7c <mbedtls_rsa_import+0x32>
    7d5c:	f1b9 0f00 	cmp.w	r9, #0
    7d60:	d115      	bne.n	7d8e <mbedtls_rsa_import+0x44>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    7d62:	f1b8 0f00 	cmp.w	r8, #0
    7d66:	d11a      	bne.n	7d9e <mbedtls_rsa_import+0x54>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    7d68:	bb0f      	cbnz	r7, 7dae <mbedtls_rsa_import+0x64>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    7d6a:	bb46      	cbnz	r6, 7dbe <mbedtls_rsa_import+0x74>
    if( N != NULL )
    7d6c:	b37c      	cbz	r4, 7dce <mbedtls_rsa_import+0x84>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    7d6e:	f105 0008 	add.w	r0, r5, #8
    7d72:	f7ff f91e 	bl	6fb2 <mbedtls_mpi_size>
    7d76:	6068      	str	r0, [r5, #4]
    return( 0 );
    7d78:	2000      	movs	r0, #0
    7d7a:	e006      	b.n	7d8a <mbedtls_rsa_import+0x40>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    7d7c:	3008      	adds	r0, #8
    7d7e:	f7ff f8a3 	bl	6ec8 <mbedtls_mpi_copy>
    7d82:	2800      	cmp	r0, #0
    7d84:	d0ea      	beq.n	7d5c <mbedtls_rsa_import+0x12>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    7d86:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    7d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    7d8e:	4649      	mov	r1, r9
    7d90:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    7d94:	f7ff f898 	bl	6ec8 <mbedtls_mpi_copy>
    7d98:	2800      	cmp	r0, #0
    7d9a:	d0e2      	beq.n	7d62 <mbedtls_rsa_import+0x18>
    7d9c:	e7f3      	b.n	7d86 <mbedtls_rsa_import+0x3c>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    7d9e:	4641      	mov	r1, r8
    7da0:	f105 0038 	add.w	r0, r5, #56	; 0x38
    7da4:	f7ff f890 	bl	6ec8 <mbedtls_mpi_copy>
    7da8:	2800      	cmp	r0, #0
    7daa:	d0dd      	beq.n	7d68 <mbedtls_rsa_import+0x1e>
    7dac:	e7eb      	b.n	7d86 <mbedtls_rsa_import+0x3c>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    7dae:	4639      	mov	r1, r7
    7db0:	f105 0020 	add.w	r0, r5, #32
    7db4:	f7ff f888 	bl	6ec8 <mbedtls_mpi_copy>
    7db8:	2800      	cmp	r0, #0
    7dba:	d0d6      	beq.n	7d6a <mbedtls_rsa_import+0x20>
    7dbc:	e7e3      	b.n	7d86 <mbedtls_rsa_import+0x3c>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    7dbe:	4631      	mov	r1, r6
    7dc0:	f105 0014 	add.w	r0, r5, #20
    7dc4:	f7ff f880 	bl	6ec8 <mbedtls_mpi_copy>
    7dc8:	2800      	cmp	r0, #0
    7dca:	d0cf      	beq.n	7d6c <mbedtls_rsa_import+0x22>
    7dcc:	e7db      	b.n	7d86 <mbedtls_rsa_import+0x3c>
    return( 0 );
    7dce:	4620      	mov	r0, r4
    7dd0:	e7db      	b.n	7d8a <mbedtls_rsa_import+0x40>

00007dd2 <mbedtls_rsa_init>:
{
    7dd2:	b570      	push	{r4, r5, r6, lr}
    7dd4:	4604      	mov	r4, r0
    7dd6:	460e      	mov	r6, r1
    7dd8:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    7dda:	2100      	movs	r1, #0
    7ddc:	22ac      	movs	r2, #172	; 0xac
    7dde:	f7fe f981 	bl	60e4 <memset>
    ctx->hash_id = hash_id;
    7de2:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
    7de6:	bd70      	pop	{r4, r5, r6, pc}

00007de8 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    7de8:	b510      	push	{r4, lr}
    if( ctx == NULL )
    7dea:	4604      	mov	r4, r0
    7dec:	b3a0      	cbz	r0, 7e58 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    7dee:	308c      	adds	r0, #140	; 0x8c
    7df0:	f7ff f832 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    7df4:	f104 0098 	add.w	r0, r4, #152	; 0x98
    7df8:	f7ff f82e 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    7dfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
    7e00:	f7ff f82a 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    7e04:	f104 0020 	add.w	r0, r4, #32
    7e08:	f7ff f826 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    7e0c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7e10:	f7ff f822 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    7e14:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7e18:	f7ff f81e 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    7e1c:	f104 0014 	add.w	r0, r4, #20
    7e20:	f7ff f81a 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    7e24:	f104 0008 	add.w	r0, r4, #8
    7e28:	f7ff f816 	bl	6e58 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    7e2c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7e30:	f7ff f812 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    7e34:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7e38:	f7ff f80e 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    7e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7e40:	f7ff f80a 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    7e44:	f104 0050 	add.w	r0, r4, #80	; 0x50
    7e48:	f7ff f806 	bl	6e58 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    7e4c:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
    7e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    7e54:	f7ff b800 	b.w	6e58 <mbedtls_mpi_free>
}
    7e58:	bd10      	pop	{r4, pc}

00007e5a <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    7e5a:	226c      	movs	r2, #108	; 0x6c
    7e5c:	2100      	movs	r1, #0
    7e5e:	f7fe b941 	b.w	60e4 <memset>

00007e62 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    7e62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e66:	4605      	mov	r5, r0
    7e68:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    7e6a:	4614      	mov	r4, r2
    7e6c:	b912      	cbnz	r2, 7e74 <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    7e6e:	2000      	movs	r0, #0
}
    7e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    7e74:	6803      	ldr	r3, [r0, #0]
    7e76:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
    7e7a:	18d3      	adds	r3, r2, r3
    7e7c:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    7e7e:	bf22      	ittt	cs
    7e80:	6843      	ldrcs	r3, [r0, #4]
    7e82:	3301      	addcs	r3, #1
    7e84:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    7e86:	b1a7      	cbz	r7, 7eb2 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
    7e88:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    7e8c:	454a      	cmp	r2, r9
    7e8e:	d310      	bcc.n	7eb2 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    7e90:	f100 0828 	add.w	r8, r0, #40	; 0x28
    7e94:	464a      	mov	r2, r9
    7e96:	eb08 0007 	add.w	r0, r8, r7
    7e9a:	f7fe f8f8 	bl	608e <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7e9e:	4641      	mov	r1, r8
    7ea0:	4628      	mov	r0, r5
    7ea2:	f7fc f86d 	bl	3f80 <mbedtls_internal_sha256_process>
    7ea6:	2800      	cmp	r0, #0
    7ea8:	d1e2      	bne.n	7e70 <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
    7eaa:	443c      	add	r4, r7
        left = 0;
    7eac:	4607      	mov	r7, r0
        input += fill;
    7eae:	444e      	add	r6, r9
        ilen  -= fill;
    7eb0:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    7eb2:	4426      	add	r6, r4
    7eb4:	e005      	b.n	7ec2 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    7eb6:	4628      	mov	r0, r5
    7eb8:	f7fc f862 	bl	3f80 <mbedtls_internal_sha256_process>
    7ebc:	2800      	cmp	r0, #0
    7ebe:	d1d7      	bne.n	7e70 <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
    7ec0:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    7ec2:	2c3f      	cmp	r4, #63	; 0x3f
    7ec4:	eba6 0104 	sub.w	r1, r6, r4
    7ec8:	d8f5      	bhi.n	7eb6 <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
    7eca:	2c00      	cmp	r4, #0
    7ecc:	d0cf      	beq.n	7e6e <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    7ece:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7ed2:	4622      	mov	r2, r4
    7ed4:	4438      	add	r0, r7
    7ed6:	f7fe f8da 	bl	608e <memcpy>
    7eda:	e7c8      	b.n	7e6e <mbedtls_sha256_update_ret+0xc>

00007edc <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    7edc:	b570      	push	{r4, r5, r6, lr}
    7ede:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    7ee0:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    7ee2:	6803      	ldr	r3, [r0, #0]
    7ee4:	f100 0628 	add.w	r6, r0, #40	; 0x28
    7ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    7eec:	1c5a      	adds	r2, r3, #1

    if( used <= 56 )
    7eee:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    7ef0:	4403      	add	r3, r0
{
    7ef2:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    7ef4:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    if( used <= 56 )
    7ef8:	eb06 0002 	add.w	r0, r6, r2
    7efc:	d861      	bhi.n	7fc2 <mbedtls_sha256_finish_ret+0xe6>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    7efe:	2100      	movs	r1, #0
    7f00:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    7f04:	f7fe f8ee 	bl	60e4 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    7f08:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    7f0c:	0f5a      	lsrs	r2, r3, #29
    7f0e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    7f12:	00db      	lsls	r3, r3, #3
    7f14:	ba12      	rev	r2, r2
    7f16:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7f18:	4631      	mov	r1, r6
    7f1a:	4620      	mov	r0, r4
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    7f1c:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    7f1e:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7f20:	f7fc f82e 	bl	3f80 <mbedtls_internal_sha256_process>
    7f24:	2800      	cmp	r0, #0
    7f26:	d14b      	bne.n	7fc0 <mbedtls_sha256_finish_ret+0xe4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    7f28:	7ae3      	ldrb	r3, [r4, #11]
    7f2a:	702b      	strb	r3, [r5, #0]
    7f2c:	8963      	ldrh	r3, [r4, #10]
    7f2e:	706b      	strb	r3, [r5, #1]
    7f30:	68a3      	ldr	r3, [r4, #8]
    7f32:	0a1b      	lsrs	r3, r3, #8
    7f34:	70ab      	strb	r3, [r5, #2]
    7f36:	68a3      	ldr	r3, [r4, #8]
    7f38:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    7f3a:	7be3      	ldrb	r3, [r4, #15]
    7f3c:	712b      	strb	r3, [r5, #4]
    7f3e:	89e3      	ldrh	r3, [r4, #14]
    7f40:	716b      	strb	r3, [r5, #5]
    7f42:	68e3      	ldr	r3, [r4, #12]
    7f44:	0a1b      	lsrs	r3, r3, #8
    7f46:	71ab      	strb	r3, [r5, #6]
    7f48:	68e3      	ldr	r3, [r4, #12]
    7f4a:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    7f4c:	7ce3      	ldrb	r3, [r4, #19]
    7f4e:	722b      	strb	r3, [r5, #8]
    7f50:	8a63      	ldrh	r3, [r4, #18]
    7f52:	726b      	strb	r3, [r5, #9]
    7f54:	6923      	ldr	r3, [r4, #16]
    7f56:	0a1b      	lsrs	r3, r3, #8
    7f58:	72ab      	strb	r3, [r5, #10]
    7f5a:	6923      	ldr	r3, [r4, #16]
    7f5c:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    7f5e:	7de3      	ldrb	r3, [r4, #23]
    7f60:	732b      	strb	r3, [r5, #12]
    7f62:	8ae3      	ldrh	r3, [r4, #22]
    7f64:	736b      	strb	r3, [r5, #13]
    7f66:	6963      	ldr	r3, [r4, #20]
    7f68:	0a1b      	lsrs	r3, r3, #8
    7f6a:	73ab      	strb	r3, [r5, #14]
    7f6c:	6963      	ldr	r3, [r4, #20]
    7f6e:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    7f70:	7ee3      	ldrb	r3, [r4, #27]
    7f72:	742b      	strb	r3, [r5, #16]
    7f74:	8b63      	ldrh	r3, [r4, #26]
    7f76:	746b      	strb	r3, [r5, #17]
    7f78:	69a3      	ldr	r3, [r4, #24]
    7f7a:	0a1b      	lsrs	r3, r3, #8
    7f7c:	74ab      	strb	r3, [r5, #18]
    7f7e:	69a3      	ldr	r3, [r4, #24]
    7f80:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    7f82:	7fe3      	ldrb	r3, [r4, #31]
    7f84:	752b      	strb	r3, [r5, #20]
    7f86:	8be3      	ldrh	r3, [r4, #30]
    7f88:	756b      	strb	r3, [r5, #21]
    7f8a:	69e3      	ldr	r3, [r4, #28]
    7f8c:	0a1b      	lsrs	r3, r3, #8
    7f8e:	75ab      	strb	r3, [r5, #22]
    7f90:	69e3      	ldr	r3, [r4, #28]
    7f92:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    7f94:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    7f98:	762b      	strb	r3, [r5, #24]
    7f9a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7f9c:	766b      	strb	r3, [r5, #25]
    7f9e:	6a23      	ldr	r3, [r4, #32]
    7fa0:	0a1b      	lsrs	r3, r3, #8
    7fa2:	76ab      	strb	r3, [r5, #26]
    7fa4:	6a23      	ldr	r3, [r4, #32]
    7fa6:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    7fa8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7faa:	b94b      	cbnz	r3, 7fc0 <mbedtls_sha256_finish_ret+0xe4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    7fac:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    7fb0:	772b      	strb	r3, [r5, #28]
    7fb2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7fb4:	776b      	strb	r3, [r5, #29]
    7fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7fb8:	0a1b      	lsrs	r3, r3, #8
    7fba:	77ab      	strb	r3, [r5, #30]
    7fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7fbe:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    7fc0:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    7fc2:	2100      	movs	r1, #0
    7fc4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    7fc8:	f7fe f88c 	bl	60e4 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7fcc:	4631      	mov	r1, r6
    7fce:	4620      	mov	r0, r4
    7fd0:	f7fb ffd6 	bl	3f80 <mbedtls_internal_sha256_process>
    7fd4:	2800      	cmp	r0, #0
    7fd6:	d1f3      	bne.n	7fc0 <mbedtls_sha256_finish_ret+0xe4>
        memset( ctx->buffer, 0, 56 );
    7fd8:	4601      	mov	r1, r0
    7fda:	2238      	movs	r2, #56	; 0x38
    7fdc:	4630      	mov	r0, r6
    7fde:	e791      	b.n	7f04 <mbedtls_sha256_finish_ret+0x28>

00007fe0 <z_pm_save_idle_exit>:
	if (pm_idle_exit_notify) {
		pm_system_resume();
	}
#endif

	z_clock_idle_exit();
    7fe0:	f7fe b818 	b.w	6014 <z_clock_idle_exit>

00007fe4 <k_mem_slab_init>:
{
    7fe4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7fe6:	2400      	movs	r4, #0
    7fe8:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7fea:	ea41 0402 	orr.w	r4, r1, r2
    7fee:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7ff2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    7ff6:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7ff8:	d10c      	bne.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
	slab->free_list = NULL;
    7ffa:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7ffc:	42a3      	cmp	r3, r4
    7ffe:	d103      	bne.n	8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
	list->tail = (sys_dnode_t *)list;
    8000:	e9c0 0000 	strd	r0, r0, [r0]
}
    8004:	2000      	movs	r0, #0
}
    8006:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8008:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    800a:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    800c:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    800e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    8010:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8012:	e7f3      	b.n	7ffc <k_mem_slab_init+0x18>
		return -EINVAL;
    8014:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8018:	e7f5      	b.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>

0000801a <z_impl_k_mutex_init>:
{
    801a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    801c:	2000      	movs	r0, #0
    801e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    8022:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    8026:	4770      	bx	lr

00008028 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8028:	4603      	mov	r3, r0
    802a:	b920      	cbnz	r0, 8036 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    802c:	f3ef 8205 	mrs	r2, IPSR
    8030:	b90a      	cbnz	r2, 8036 <z_reschedule_irqlock+0xe>
    8032:	f7fa b8af 	b.w	2194 <arch_swap>
    8036:	f383 8811 	msr	BASEPRI, r3
    803a:	f3bf 8f6f 	isb	sy
}
    803e:	4770      	bx	lr

00008040 <z_reschedule_unlocked>:
	__asm__ volatile(
    8040:	f04f 0320 	mov.w	r3, #32
    8044:	f3ef 8011 	mrs	r0, BASEPRI
    8048:	f383 8811 	msr	BASEPRI, r3
    804c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8050:	f7ff bfea 	b.w	8028 <z_reschedule_irqlock>

00008054 <k_sched_unlock>:
}
    8054:	4770      	bx	lr

00008056 <unpend_thread_no_timeout>:
{
    8056:	4601      	mov	r1, r0
    8058:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    805a:	6880      	ldr	r0, [r0, #8]
    805c:	f7fc fd42 	bl	4ae4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8060:	7b4b      	ldrb	r3, [r1, #13]
    8062:	f023 0302 	bic.w	r3, r3, #2
    8066:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    8068:	2300      	movs	r3, #0
    806a:	608b      	str	r3, [r1, #8]
}
    806c:	bd08      	pop	{r3, pc}

0000806e <z_priq_dumb_best>:
{
    806e:	4603      	mov	r3, r0
	return list->head == list;
    8070:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8072:	4283      	cmp	r3, r0
    8074:	d003      	beq.n	807e <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8076:	2800      	cmp	r0, #0
    8078:	bf38      	it	cc
    807a:	2000      	movcc	r0, #0
    807c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    807e:	2000      	movs	r0, #0
}
    8080:	4770      	bx	lr

00008082 <z_ready_thread>:
{
    8082:	b510      	push	{r4, lr}
    8084:	f04f 0320 	mov.w	r3, #32
    8088:	f3ef 8411 	mrs	r4, BASEPRI
    808c:	f383 8811 	msr	BASEPRI, r3
    8090:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    8094:	f7fc fd5e 	bl	4b54 <ready_thread>
	__asm__ volatile(
    8098:	f384 8811 	msr	BASEPRI, r4
    809c:	f3bf 8f6f 	isb	sy
}
    80a0:	bd10      	pop	{r4, pc}

000080a2 <z_thread_timeout>:
{
    80a2:	b570      	push	{r4, r5, r6, lr}
    80a4:	4604      	mov	r4, r0
	__asm__ volatile(
    80a6:	f04f 0320 	mov.w	r3, #32
    80aa:	f3ef 8611 	mrs	r6, BASEPRI
    80ae:	f383 8811 	msr	BASEPRI, r3
    80b2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    80b6:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    80ba:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    80be:	b113      	cbz	r3, 80c6 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    80c0:	4628      	mov	r0, r5
    80c2:	f7ff ffc8 	bl	8056 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    80c6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
    80ca:	4628      	mov	r0, r5
    80cc:	f023 0314 	bic.w	r3, r3, #20
    80d0:	f804 3c0b 	strb.w	r3, [r4, #-11]
    80d4:	f7fc fd3e 	bl	4b54 <ready_thread>
	__asm__ volatile(
    80d8:	f386 8811 	msr	BASEPRI, r6
    80dc:	f3bf 8f6f 	isb	sy
}
    80e0:	bd70      	pop	{r4, r5, r6, pc}

000080e2 <add_to_waitq_locked>:
{
    80e2:	b538      	push	{r3, r4, r5, lr}
    80e4:	4604      	mov	r4, r0
    80e6:	460d      	mov	r5, r1
	unready_thread(thread);
    80e8:	f7fc fe18 	bl	4d1c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    80ec:	7b63      	ldrb	r3, [r4, #13]
    80ee:	f043 0302 	orr.w	r3, r3, #2
    80f2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    80f4:	b1c5      	cbz	r5, 8128 <add_to_waitq_locked+0x46>
	return list->head == list;
    80f6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    80f8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80fa:	429d      	cmp	r5, r3
    80fc:	bf08      	it	eq
    80fe:	2300      	moveq	r3, #0
    8100:	2b00      	cmp	r3, #0
    8102:	bf38      	it	cc
    8104:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8106:	b183      	cbz	r3, 812a <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    8108:	f994 100e 	ldrsb.w	r1, [r4, #14]
    810c:	f993 200e 	ldrsb.w	r2, [r3, #14]
    8110:	4291      	cmp	r1, r2
    8112:	db04      	blt.n	811e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    8114:	686a      	ldr	r2, [r5, #4]
    8116:	429a      	cmp	r2, r3
    8118:	d007      	beq.n	812a <add_to_waitq_locked+0x48>
    811a:	681b      	ldr	r3, [r3, #0]
    811c:	e7f3      	b.n	8106 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    811e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8120:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    8124:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8126:	605c      	str	r4, [r3, #4]
}
    8128:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    812a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    812c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    812e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    8130:	686b      	ldr	r3, [r5, #4]
    8132:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8134:	606c      	str	r4, [r5, #4]
    8136:	e7f7      	b.n	8128 <add_to_waitq_locked+0x46>

00008138 <z_unpend_first_thread>:
{
    8138:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    813a:	f04f 0320 	mov.w	r3, #32
    813e:	f3ef 8211 	mrs	r2, BASEPRI
    8142:	f383 8811 	msr	BASEPRI, r3
    8146:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    814a:	f7ff ff90 	bl	806e <z_priq_dumb_best>
    814e:	4604      	mov	r4, r0
	__asm__ volatile(
    8150:	f382 8811 	msr	BASEPRI, r2
    8154:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    8158:	b188      	cbz	r0, 817e <z_unpend_first_thread+0x46>
	__asm__ volatile(
    815a:	f04f 0320 	mov.w	r3, #32
    815e:	f3ef 8511 	mrs	r5, BASEPRI
    8162:	f383 8811 	msr	BASEPRI, r3
    8166:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    816a:	f7ff ff74 	bl	8056 <unpend_thread_no_timeout>
	__asm__ volatile(
    816e:	f385 8811 	msr	BASEPRI, r5
    8172:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    8176:	f104 0018 	add.w	r0, r4, #24
    817a:	f000 f80e 	bl	819a <z_abort_timeout>
}
    817e:	4620      	mov	r0, r4
    8180:	bd38      	pop	{r3, r4, r5, pc}

00008182 <k_is_in_isr>:
    8182:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    8186:	3800      	subs	r0, #0
    8188:	bf18      	it	ne
    818a:	2001      	movne	r0, #1
    818c:	4770      	bx	lr

0000818e <z_impl_k_busy_wait>:
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	if (usec_to_wait == 0) {
    818e:	b108      	cbz	r0, 8194 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8190:	f7f9 bc0a 	b.w	19a8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
    8194:	4770      	bx	lr

00008196 <k_thread_name_get>:
	return (const char *)thread->name;
#else
	ARG_UNUSED(thread);
	return NULL;
#endif /* CONFIG_THREAD_NAME */
}
    8196:	2000      	movs	r0, #0
    8198:	4770      	bx	lr

0000819a <z_abort_timeout>:
{
    819a:	b510      	push	{r4, lr}
	__asm__ volatile(
    819c:	f04f 0220 	mov.w	r2, #32
    81a0:	f3ef 8411 	mrs	r4, BASEPRI
    81a4:	f382 8811 	msr	BASEPRI, r2
    81a8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    81ac:	6803      	ldr	r3, [r0, #0]
    81ae:	b13b      	cbz	r3, 81c0 <z_abort_timeout+0x26>
			remove_timeout(to);
    81b0:	f7fc fea4 	bl	4efc <remove_timeout>
			ret = 0;
    81b4:	2000      	movs	r0, #0
	__asm__ volatile(
    81b6:	f384 8811 	msr	BASEPRI, r4
    81ba:	f3bf 8f6f 	isb	sy
}
    81be:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    81c0:	f06f 0015 	mvn.w	r0, #21
    81c4:	e7f7      	b.n	81b6 <z_abort_timeout+0x1c>

000081c6 <k_heap_init>:
{
    81c6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    81c8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    81cc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    81d0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    81d2:	f7fd bd26 	b.w	5c22 <sys_heap_init>

000081d6 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    81d6:	4770      	bx	lr
